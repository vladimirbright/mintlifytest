{
  "openapi": "3.0.1",
  "info": {
    "title": "Truv API",
    "description": "Truv API Documentation",
    "termsOfService": "https://www.truv.com/legal/terms-of-use",
    "contact": {
      "email": "support@truv.com"
    },
    "license": {
      "name": "BSD License"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://prod.truv.com/"
    }
  ],
  "security": [
    {
      "ClientID": [],
      "AccessKey": []
    }
  ],
  "paths": {
    "/v1/bridge-tokens/": {
      "post": {
        "tags": [
          "Bridge Token"
        ],
        "summary": "Create a bridge token",
        "description": "\nThe endpoint returns a bridge token. This is typically the endpoint called before         initializing the Bridge since the response from this call is passed to the TruvBridge.init function.\n",
        "operationId": "v1_bridge-tokens_create",
        "requestBody": {
          "description": "Bridge token properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BridgeTokenCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeTokenCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/companies/": {
      "get": {
        "tags": [
          "Companies and Data Providers"
        ],
        "summary": "List all companies",
        "description": "The endpoint returns a list of companies. Requires special approval to use.",
        "operationId": "company_mapping_list",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyMappingList"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Companies and Data Providers"
        ],
        "summary": "Search companies",
        "description": "\nThe endpoint returns the `company_mapping_id` for a company if it exists. This `company_mapping_id`         can be passed to the `/bridge-tokens` endpoint to have the user skip the company selection step and suggest         a data provider.",
        "operationId": "company_mapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "request_body",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Company name",
                    "example": "Google"
                  },
                  "domain": {
                    "type": "string",
                    "description": "Company domain",
                    "example": "google.com"
                  },
                  "ein": {
                    "type": "string",
                    "description": "Company EIN",
                    "example": "770493581"
                  },
                  "address": {
                    "required": [
                      "city",
                      "street",
                      "zip"
                    ],
                    "type": "object",
                    "properties": {
                      "street": {
                        "type": "string",
                        "description": "Company location street",
                        "example": "1600 Amphitheatre Pkwy"
                      },
                      "city": {
                        "type": "string",
                        "description": "Company location city",
                        "example": "Mountain View"
                      },
                      "state": {
                        "type": "string",
                        "description": "Company location state",
                        "example": "CA"
                      },
                      "zip": {
                        "type": "string",
                        "description": "Company location zip code",
                        "example": "94043"
                      }
                    },
                    "description": "Company location address object"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Company phone number",
                    "example": "6503087300"
                  },
                  "id": {
                    "type": "string",
                    "description": "Company ID",
                    "example": "d94df7ecffcb4b218ab2dbff70e7cda8"
                  },
                  "product_type": {
                    "type": "string",
                    "description": "Product type for success rate calculation",
                    "enum": [
                      "income",
                      "employment",
                      "deposit_switch",
                      "pll"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "company_mapping_id": {
                      "type": "string",
                      "description": "Company to Payroll Provider mapping ID",
                      "example": "48427a36d43c4d5aa6324bc06c692456"
                    },
                    "name": {
                      "type": "string",
                      "description": "Company name",
                      "example": "Facebook Demo"
                    },
                    "domain": {
                      "type": "string",
                      "description": "Company domain",
                      "example": "facebook.com"
                    },
                    "logo_url": {
                      "type": "string",
                      "description": "URL to company logo",
                      "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/facebook.png"
                    },
                    "success_rate": {
                      "type": "string",
                      "description": "Success rate for the company",
                      "example": "high",
                      "enum": [
                        "low",
                        "high",
                        "unsupported"
                      ]
                    },
                    "confidence_level": {
                      "type": "string",
                      "description": "Confidence level for the company success rate. Range of possible values is from 0 to 1 with 0.5 and above being high success rate",
                      "example": "0.9"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/company-mappings-search/": {
      "get": {
        "tags": [
          "Companies and Data Providers"
        ],
        "summary": "Search companies with autocomplete",
        "description": "The endpoint provides company search using prefix.",
        "operationId": "company_autocomplete_search",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Face"
            }
          },
          {
            "name": "product_type",
            "in": "query",
            "description": "Product type for success rate calculation",
            "schema": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyMappingSearchResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/documents/": {
      "post": {
        "tags": [
          "Document upload"
        ],
        "summary": "Create document credentials for uploading to AWS S3 storage.",
        "description": "The endpoint returns the data required for uploading documents for further parsing.",
        "operationId": "create_document_sign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentPresignedPostCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentPresignedPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/documents/tasks/": {
      "post": {
        "tags": [
          "Document upload"
        ],
        "summary": "Create a new document parsing task",
        "description": "The endpoint returns task details.",
        "operationId": "create_new_task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "document_id"
                ],
                "type": "object",
                "properties": {
                  "document_id": {
                    "title": "Document ID",
                    "type": "string",
                    "example": "ffba27447d8e4285b7bdb4a6ec76db5c"
                  },
                  "tracking_info": {
                    "title": "Tracking info",
                    "maxLength": 255,
                    "type": "string"
                  },
                  "product_type": {
                    "title": "Type",
                    "type": "string",
                    "example": "employment",
                    "enum": [
                      "employment",
                      "income"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUploadTaskCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/documents/tasks/{task_id}/": {
      "get": {
        "tags": [
          "Document upload"
        ],
        "summary": "Get document parsing task status",
        "description": "The endpoint returns task status.",
        "operationId": "get_task_status",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUploadRetrieveTask"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/invoices/": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "List all invoices",
        "description": "The endpoint returns a list of invoices.",
        "operationId": "invoices_list",
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "Filter by year",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "count",
                    "results"
                  ],
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "next": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true
                    },
                    "previous": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/invoices/{id}/": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve an invoice",
        "description": "The endpoint returns an invoice.",
        "operationId": "invoices_detail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique value identifying this invoice.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/link-access-tokens/": {
      "post": {
        "tags": [
          "Account Links"
        ],
        "summary": "Retrieve a link token",
        "description": "Exchange a bridge public_token for a link access_token.",
        "operationId": "link_exchange_token_flow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "request_body",
                "required": [
                  "public_token"
                ],
                "type": "object",
                "properties": {
                  "public_token": {
                    "type": "string",
                    "description": "Public token for an exchange",
                    "example": "48427a36d43c4d5aa6324bc06c692456"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkAccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/links/": {
      "get": {
        "tags": [
          "Account Links"
        ],
        "summary": "List all links",
        "operationId": "links-list",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksListResponse"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/reports/insurance/": {
      "post": {
        "tags": [
          "Insurance Reports"
        ],
        "summary": "Retrieve an insurance report",
        "description": "The endpoint returns the Insurance report.",
        "operationId": "insurance_report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "request_body",
                "required": [
                  "access_token"
                ],
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "Access Token",
                    "example": "48427a36d43c4d5aa6324bc06c692456"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceReport"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/links/{link_id}/": {
      "get": {
        "tags": [
          "Account Links"
        ],
        "summary": "Retrieve a link",
        "operationId": "links-item",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Account Links"
        ],
        "summary": "Delete a link",
        "description": "The endpoint removes a link and all associated data.",
        "operationId": "delete_link_by_link_id",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty body",
            "content": {}
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/balances/": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "List all balances",
        "description": "The endpoint allows developers to receive balances.",
        "operationId": "balances-list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/bank_accounts/": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "List all bank accounts",
        "description": "List of all bank accounts used for the direct deposit",
        "operationId": "link-bank-accounts",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccount"
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/direct_deposit/report/": {
      "get": {
        "tags": [
          "Deposit Switch Reports"
        ],
        "summary": "Retrieve a direct deposit switch report for a link",
        "description": "The endpoint returns the DDS report for a link",
        "operationId": "link_detail_reports_dds",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DDSDetail"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/documents/": {
      "get": {
        "tags": [
          "Uploaded Documents"
        ],
        "summary": "List all documents",
        "description": "The endpoint returns a list of documents.",
        "operationId": "list-documents",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/documents/{doc_id}/": {
      "get": {
        "tags": [
          "Uploaded Documents"
        ],
        "summary": "Retrieve document",
        "description": "The endpoint returns a document.",
        "operationId": "retrieve-document",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          },
          {
            "name": "doc_id",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "09e9bda2414c42bcb4dab5240b9013b6"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/employment/": {
      "get": {
        "tags": [
          "Employment"
        ],
        "summary": "Retrieve an employment",
        "description": "Get the most recent employment data",
        "operationId": "link-last-employemet",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmploymentLinked"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/employment/report/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve an employment history report for a link",
        "description": "The endpoint returns the VOE report for a link",
        "operationId": "link_detail_reports_employment",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmploymentCheck"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/employments/": {
      "get": {
        "tags": [
          "Employment"
        ],
        "summary": "List all employments",
        "description": "The endpoint returns list of all employments.",
        "operationId": "link-employments",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmploymentLinked"
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/identity/": {
      "get": {
        "tags": [
          "Identity"
        ],
        "summary": "Retrieve an identity",
        "description": "Get the identity data for the user",
        "operationId": "link-identity",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/income/report/": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve an income and employment report for a link",
        "description": "The endpoint returns the VOIE report for a link",
        "operationId": "link_detail_reports_income",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeCheck"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/income/transactions/reports/": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Creates a bank income report",
        "description": "The endpoint creates a bank income report for a Link.",
        "operationId": "bank-income-report-create",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankIncomeReportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "report_id"
                  ],
                  "type": "object",
                  "properties": {
                    "report_id": {
                      "type": "string",
                      "description": "Unique ID for the bank income report request.",
                      "example": "48427a36d43c4d5aa6324bc06c692456"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/links/{link_id}/income/transactions/reports/{report_id}/": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieves a bank income report",
        "description": "The endpoint retrieves a bank income report for a Link.",
        "operationId": "bank-income-report-retrieve",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "Unique ID for the bank income report",
            "required": true,
            "schema": {
              "type": "string",
              "default": "48427a36d43c4d5aa6324bc06c692456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankIncomeReport"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/insurance/report/": {
      "get": {
        "tags": [
          "Insurance Reports"
        ],
        "summary": "Retrieve an insurance report",
        "description": "The endpoint returns the Insurance report.",
        "operationId": "link_detail_reports_insurance",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceReport"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/insurance/report/auto/": {
      "get": {
        "tags": [
          "Insurance Reports"
        ],
        "summary": "Retrieve an auto insurance report",
        "description": "The endpoint returns the auto insurance report.",
        "operationId": "link_detail_reports_insurance_auto",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoInsuranceReport"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/insurance/report/home/": {
      "get": {
        "tags": [
          "Insurance Reports"
        ],
        "summary": "Retrieve an home insurance report",
        "description": "The endpoint returns the home insurance report.",
        "operationId": "link_detail_reports_insurance_home",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeInsuranceReport"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/pll/report/": {
      "get": {
        "tags": [
          "Deposit Switch Reports"
        ],
        "summary": "Retrieve a paycheck linked loan report",
        "description": "The endpoint returns the PLL report.",
        "operationId": "link_detail_reports_pll",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PLLDetail"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/shifts/": {
      "get": {
        "tags": [
          "Shifts"
        ],
        "summary": "List all shifts",
        "description": "The endpoint returns ongoing and completed work shifts. It includes time entries (clock in/clock out), the type of work, and earnings.",
        "operationId": "link-shifts",
        "parameters": [
          {
            "name": "start_date_from",
            "in": "query",
            "description": "Filter `start_date` greater than or equal  (ISO-8601)",
            "schema": {
              "type": "string",
              "default": "2022-06-01T000:00:00.000Z"
            }
          },
          {
            "name": "start_date_to",
            "in": "query",
            "description": "Filter `start_date` less than or equal (ISO-8601)",
            "schema": {
              "type": "string",
              "default": "2022-06-01T00:00:00.000Z"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number from the shift list",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftsListResponse"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/statements/": {
      "get": {
        "tags": [
          "Pay Statements"
        ],
        "summary": "List all statements",
        "description": "The endpoint returns list of pay statements with dates, gross pay, net pay and earnings with deductions breakdown. ",
        "operationId": "link-statements",
        "parameters": [
          {
            "name": "pay_date_from",
            "in": "query",
            "description": "Filter `pay_date` greater than or equal  (ISO-8601)",
            "schema": {
              "type": "string",
              "default": "2022-06-01T00:00:00.000Z"
            }
          },
          {
            "name": "pay_date_to",
            "in": "query",
            "description": "Filter `pay_date` less than or equal (ISO-8601)",
            "schema": {
              "type": "string",
              "default": "2022-06-02T00:00:00.000Z"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number from the statement list",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementsListResponse"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/statements/{statement_id}/": {
      "get": {
        "tags": [
          "Pay Statements"
        ],
        "summary": "Retrieve a statement",
        "description": "Get the pay statement",
        "operationId": "retrieve-statement",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          },
          {
            "name": "statement_id",
            "in": "path",
            "description": "Statement ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "39d7e80942ce4ad58a93f70ce4115ccc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statement"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/tax/": {
      "get": {
        "tags": [
          "Tax Documents"
        ],
        "summary": "List all tax documents",
        "description": "The endpoint returns a list of tax documents.",
        "operationId": "tax-documents",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxDocument"
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/tax/{tax_id}/": {
      "get": {
        "tags": [
          "Tax Documents"
        ],
        "summary": "Retrieve tax document",
        "description": "The endpoint returns a tax document.",
        "operationId": "tax-document",
        "parameters": [
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          },
          {
            "name": "tax_id",
            "in": "path",
            "description": "Tax Document ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxDocumentRetrieve"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/links/{link_id}/transactions/": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "List all bank transactions",
        "description": "The endpoint allows developers to receive user-authorized transaction data.",
        "operationId": "link-bank-data-transactions",
        "parameters": [
          {
            "name": "account_ids",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transacted_at_from",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transacted_at_to",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "link_id",
            "in": "path",
            "description": "Link ID",
            "required": true,
            "schema": {
              "type": "string",
              "default": "24d7e80942ce4ad58a93f70ce4115f5c"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders/": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create an order",
        "description": "The endpoint creates an order",
        "operationId": "v1_orders_create",
        "requestBody": {
          "description": "An Order for a user to link an account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/orders/lookup/": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Get list of orders by SSN",
        "description": "The endpoint returns a list of orders by an applicant SSN",
        "operationId": "orders_list_lookup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderGroupSSNSearch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderListResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/orders/{id}/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve an order",
        "description": "The endpoint returns the order.",
        "operationId": "v1_orders_read",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID received from the POST request",
            "required": true,
            "schema": {
              "type": "string",
              "default": "48427a36d43c4d5aa6324bc06c692456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a data refresh order",
        "description": "The endpoint creates the new order with data populated from the existing order.",
        "operationId": "orders_create_refresh_order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID received from the POST request",
            "required": true,
            "schema": {
              "type": "string",
              "default": "48427a36d43c4d5aa6324bc06c692456"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRefreshOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      },
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Update an order",
        "description": "The endpoint updates the order. Update only available if all employers in one of statuses: pending, sent.",
        "operationId": "v1_orders_partial_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID received from the POST request",
            "required": true,
            "schema": {
              "type": "string",
              "default": "48427a36d43c4d5aa6324bc06c692456"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Empty body",
            "content": {}
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/orders/{id}/cancel/": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel an order",
        "description": "The endpoint cancels the order.",
        "operationId": "v1_orders_cancel_create",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID received from the POST request",
            "required": true,
            "schema": {
              "type": "string",
              "default": "48427a36d43c4d5aa6324bc06c692456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/orders/{id}/employers/": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add new employer to the existing order",
        "description": "The endpoint allows to add new employer to the existing order. The order should not be expired or canceled.",
        "operationId": "order-add-new-employer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID received from the POST request",
            "required": true,
            "schema": {
              "type": "string",
              "default": "48427a36d43c4d5aa6324bc06c692456"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployerAdd"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/providers/": {
      "get": {
        "tags": [
          "Companies and Data Providers"
        ],
        "summary": "List all data providers",
        "description": "The endpoint returns a list of data providers filtered by the query parameter `product_type`.",
        "operationId": "providers-list",
        "parameters": [
          {
            "name": "data_source",
            "in": "query",
            "description": "Data source",
            "schema": {
              "type": "string",
              "enum": [
                "payroll",
                "docs",
                "insurance",
                "financial_accounts",
                "tax",
                "scoring_attributes"
              ]
            }
          },
          {
            "name": "product_type",
            "in": "query",
            "description": "Product type",
            "required": true,
            "schema": {
              "type": "string",
              "default": "income",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets",
                "admin"
              ]
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ordering",
            "in": "query",
            "description": "Which field to use when ordering the results. The default is by ascending `id`.",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "rank",
                "-rank"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/providers/{id}/": {
      "get": {
        "tags": [
          "Companies and Data Providers"
        ],
        "summary": "Retrieve a data provider",
        "description": "This endpoint retrieves a data provider.",
        "operationId": "providers-detail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A unique value identifying this data provider.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_type",
            "in": "query",
            "description": "Product type",
            "schema": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets",
                "admin"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/refresh/tasks/": {
      "post": {
        "tags": [
          "Data Refresh"
        ],
        "summary": "Create a data refresh task",
        "description": "The endpoint creates a link data refresh task.",
        "operationId": "refresh_task_create",
        "requestBody": {
          "description": "Link data refresh task",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTaskCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTaskCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/refresh/tasks/{task_id}/": {
      "get": {
        "tags": [
          "Data Refresh"
        ],
        "summary": "Retrieve a data refresh status",
        "description": "The endpoint returns the refresh task status.",
        "operationId": "refresh_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "description": "Task ID received from the POST request",
            "required": true,
            "schema": {
              "type": "string",
              "default": "48427a36d43c4d5aa6324bc06c692456"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTask"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/templates/": {
      "get": {
        "tags": [
          "Customization Templates"
        ],
        "summary": "List all customization templates",
        "description": "The endpoint returns a list of all customization templates for user.",
        "operationId": "v1_templates_list",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "default_for_products",
            "in": "query",
            "description": "Default for products",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "products",
            "in": "query",
            "description": "Filter by products",
            "schema": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets",
                "admin"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "count",
                    "results"
                  ],
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "next": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true
                    },
                    "previous": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomizationTemplate"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customization Templates"
        ],
        "summary": "Create a customization template",
        "description": "The endpoint creates a customization template.",
        "operationId": "v1_templates_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizationTemplateRequestCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomizationTemplate"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/templates/{template_id}/": {
      "get": {
        "tags": [
          "Customization Templates"
        ],
        "summary": "Retrieve a customization template",
        "description": "This endpoint retrieves a customization template.",
        "operationId": "v1_templates_read",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomizationTemplate"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customization Templates"
        ],
        "summary": "Delete a customization template",
        "description": "The endpoint deletes a customization template.",
        "operationId": "v1_templates_delete",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {}
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Customization Templates"
        ],
        "summary": "Update a customization template",
        "description": "The endpoint updates a customization template.",
        "operationId": "v1_templates_partial_update",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomizationTemplateRequestUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomizationTemplate"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List all users",
        "description": "The endpoint returns a list of users.",
        "operationId": "v1_users_list",
        "parameters": [
          {
            "name": "created_at__lte",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at__gte",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "link_exists",
            "in": "query",
            "description": "If not set, returns all users; otherwise, returns users with/without attempts.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "list_links",
            "in": "query",
            "description": "When set to true, for each user adds the payload from the account links endpoint.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "count",
                    "results"
                  ],
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "next": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true
                    },
                    "previous": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ApplicantList"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "description": "The endpoint creates a user.",
        "operationId": "v1_users_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantRequestCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Applicant"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/users/{user_id}/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a user",
        "description": "This endpoint retrieves a user.",
        "operationId": "v1_users_read",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "list_links",
            "in": "query",
            "description": "When set to true, adds the payload from the account links endpoint.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantRetrieve"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "The endpoint deletes a user.",
        "operationId": "v1_users_delete",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {}
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "The endpoint updates a user.",
        "operationId": "v1_users_partial_update",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantRequestUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Applicant"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/users/{user_id}/assets/reports/": {
      "post": {
        "tags": [
          "VOA Reports"
        ],
        "summary": "Create an assets report",
        "description": "The endpoint creates an assets report for the user.",
        "operationId": "assets-report-create",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoaApplicantReport"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/users/{user_id}/assets/reports/{report_id}/": {
      "get": {
        "tags": [
          "VOA Reports"
        ],
        "summary": "Retrieve an assets report",
        "description": "The endpoint retrieves an assets report for the user.",
        "operationId": "assets-report-retrieve",
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fmt",
            "in": "query",
            "description": "Response format",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "pdf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoaApplicantReport"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/deposit_switch/report/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a deposit switch report",
        "description": "The endpoint retrieves a deposit switch report for a user.",
        "operationId": "dds-report-retrieve",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DDSApplicantReport"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/financial_accounts/accounts/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List financial accounts",
        "description": "The endpoint retrieves a list of connected financial accounts for the user.",
        "operationId": "user-financial-accounts-list",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter by account type",
            "schema": {
              "type": "string",
              "enum": [
                "CHECKING",
                "SAVINGS",
                "LOAN",
                "CREDIT_CARD",
                "INVESTMENT",
                "LINE_OF_CREDIT",
                "MORTGAGE",
                "PROPERTY",
                "CASH",
                "INSURANCE",
                "PREPAID",
                "CHECKING_LINE_OF_CREDIT"
              ]
            }
          },
          {
            "name": "subtype",
            "in": "query",
            "description": "Filter by account subtype",
            "schema": {
              "type": "string",
              "enum": [
                "MONEY_MARKET",
                "CERTIFICATE_OF_DEPOSIT",
                "AUTO",
                "STUDENT",
                "SMALL_BUSINESS",
                "PERSONAL",
                "PERSONAL_WITH_COLLATERAL",
                "HOME_EQUITY",
                "BOAT",
                "POWERSPORTS",
                "RV",
                "HELOC",
                "PLAN_401_K",
                "PLAN_403_B",
                "PLAN_529",
                "IRA",
                "ROLLOVER_IRA",
                "ROTH_IRA",
                "TAXABLE",
                "NON_TAXABLE",
                "BROKERAGE",
                "TRUST",
                "UNIFORM_GIFTS_TO_MINORS_ACT",
                "PLAN_457",
                "PENSION",
                "EMPLOYEE_STOCK_OWNERSHIP_PLAN",
                "SIMPLIFIED_EMPLOYEE_PENSION",
                "SIMPLE_IRA",
                "PLAN_ROTH_401_K",
                "FIXED_ANNUITY",
                "VARIABLE_ANNUITY",
                "HSA",
                "TAX_FREE_SAVINGS_ACCOUNT",
                "INDIVIDUAL",
                "REGISTERED_RETIREMENT_INCOME_FUND",
                "CASH_MANAGEMENT_ACCOUNT",
                "EMPLOYEE_STOCK_PURCHASE_PLAN",
                "REGISTERED_EDUCATION_SAVINGS_PLAN",
                "PROFIT_SHARING_PLAN",
                "UNIFORM_TRANSFER_TO_MINORS_ACT",
                "PLAN_401_A",
                "SARSEP_IRA",
                "FIXED_ANNUITY_TRADITIONAL_IRA",
                "VARIABLE_ANNUITY_TRADITIONAL_IRA",
                "SEPP_IRA",
                "INHERITED_TRADITIONAL_IRA",
                "FIXED_ANNUITY_ROTH_IRA",
                "VARIABLE_ANNUITY_ROTH_IRA",
                "INHERITED_ROTH_IRA",
                "COVERDELL",
                "ADVISORY_ACCOUNT",
                "BROKERAGE_MARGIN",
                "CHARITABLE_GIFT_ACCOUNT",
                "CHURCH_ACCOUNT",
                "CONSERVATORSHIP",
                "CUSTODIAL",
                "DEFINED_BENEFIT_PLAN",
                "DEFINED_CONTRIBUTION_PLAN",
                "EDUCATIONAL",
                "ESTATE",
                "EXECUTOR",
                "GROUP_RETIREMENT_SAVINGS_PLAN",
                "GUARANTEED_INVESTMENT_CERTIFICATE",
                "HRA",
                "INDEXED_ANNUITY",
                "INVESTMENT_CLUB",
                "IRREVOCABLE_TRUST",
                "JOINT_TENANTS_BY_ENTIRITY",
                "JOINT_TENANTS_COMMUNITY_PROPERTY",
                "JOINT_TENANTS_IN_COMMON",
                "JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP",
                "KEOUGH_PLAN",
                "LIFE_INCOME_FUND",
                "LIVING_TRUST",
                "LOCKED_IN_RETIREMENT_ACCOUNT",
                "LOCKED_IN_RETIREMENT_INVESTMENT_FUND",
                "LOCKED_IN_RETIREMENT_SAVINGS_ACCOUNT",
                "MONEY_PURCHASE_PLAN",
                "PARTNERSHIP",
                "PLAN_409_A",
                "PLAN_ROTH_403_B",
                "REGISTERED_DISABILITY_SAVINGS_PLAN",
                "REGISTERED_LOCKED_IN_SAVINGS_PLAN",
                "REGISTERED_PENSION_PLAN",
                "REGISTERED_RETIREMENT_SAVINGS_PLAN",
                "REVOCABLE_TRUST",
                "ROTH_CONVERSION",
                "SOLE_PROPRIETORSHIP",
                "SPOUSAL_IRA",
                "SPOUSAL_ROTH_IRA",
                "TESTAMENTARY_TRUST",
                "THRIFT_SAVINGS_PLAN",
                "INHERITED_ANNUITY",
                "CORPORATE_ACCOUNT",
                "LIMITED_LIABILITY_ACCOUNT",
                "VEHICLE_INSURANCE",
                "DISABILITY",
                "HEALTH",
                "LONG_TERM_CARE",
                "PROPERTY_AND_CASUALTY",
                "UNIVERSAL_LIFE",
                "TERM_LIFE",
                "WHOLE_LIFE",
                "ACCIDENTAL_DEATH_AND_DISMEMBERMENT",
                "VARIABLE_UNIVERSAL_LIFE",
                "ROTH",
                "ROLLOVER",
                "OTHER"
              ]
            }
          },
          {
            "name": "liabilites",
            "in": "query",
            "description": "Filter by liabilites account types: LOAN, CREDIT_CARD, LINE_OF_CREDIT, MORTGAGE, CHECKING_LINE_OF_CREDIT",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "full_account_number",
            "in": "query",
            "description": "When set to true, comprehensive information including the account_number, routing_number, and a list of owners associated with the financial account will be returned. This allows for a consolidated view of key details, facilitating efficient management and processing of financial transactions.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FinancialAccount"
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/income_insights/reports/": {
      "post": {
        "tags": [
          "Income Insights Reports"
        ],
        "summary": "Create a user bank income insights report",
        "description": "The endpoint creates a bank income insights report for the user.",
        "operationId": "income-insights-report-create",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomeInsightsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeInsightsApplicantReport"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/users/{user_id}/income_insights/reports/{report_id}/": {
      "get": {
        "tags": [
          "Income Insights Reports"
        ],
        "summary": "Retrieve a user bank income insights report",
        "description": "The endpoint retrieves a bank income insights report for the user.",
        "operationId": "income-insights-report-retrieve",
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeInsightsApplicantReport"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/reports/": {
      "post": {
        "tags": [
          "VOIE Reports"
        ],
        "summary": "Create a report",
        "description": "The endpoint creates a report for a user.",
        "operationId": "v1_users_reports",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LenderApplicantReport"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/reports/{report_id}/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a report",
        "description": "The endpoint retrieves a report for a user.",
        "operationId": "v1_users_get_report",
        "parameters": [
          {
            "name": "report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "report_type",
            "in": "query",
            "description": "Report type",
            "schema": {
              "type": "string",
              "default": "payroll",
              "enum": [
                "payroll",
                "aim_check"
              ]
            }
          },
          {
            "name": "fmt",
            "in": "query",
            "description": "Response format",
            "schema": {
              "type": "string",
              "default": "json",
              "enum": [
                "json",
                "pdf"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LenderApplicantReport"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{user_id}/tokens/": {
      "post": {
        "tags": [
          "Bridge Token"
        ],
        "summary": "Create a bridge token",
        "description": "The endpoint creates a bridge token for a user.\n        This is typically the endpoint called before initializing the Bridge since the\n        response from this call is passed to the TruvBridge.init function.",
        "operationId": "v1_users_tokens",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Bridge token properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicantBridgeTokenCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeTokenCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/webhooks/": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List all webhooks",
        "description": "The endpoint returns a list of webhooks.",
        "operationId": "v1_webhooks_list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "count",
                    "results"
                  ],
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    },
                    "next": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true
                    },
                    "previous": {
                      "type": "string",
                      "format": "uri",
                      "nullable": true
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Webhook"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a webhook",
        "description": "The endpoint creates a webhook.",
        "operationId": "v1_webhooks_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/webhooks/{webhook_id}/": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Retrieve a webhook",
        "description": "This endpoint retrieves a webhook.",
        "operationId": "v1_webhooks_read",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "The endpoint deletes a webhook.",
        "operationId": "v1_webhooks_delete",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "content": {}
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a webhook",
        "description": "The endpoint updates a webhook.",
        "operationId": "v1_webhooks_partial_update",
        "parameters": [
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequestUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/links/reports/income/": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve an income and employment report",
        "description": "The endpoint returns the VOIE report",
        "operationId": "income_verification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "request_body",
                "required": [
                  "access_token"
                ],
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "Access Token",
                    "example": "48427a36d43c4d5aa6324bc06c692456"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeCheck"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/links/reports/employment/": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve an employment history report",
        "description": "The endpoint returns the VOE report",
        "operationId": "employment_verification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "request_body",
                "required": [
                  "access_token"
                ],
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "Access Token",
                    "example": "48427a36d43c4d5aa6324bc06c692456"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmploymentCheck"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/links/reports/direct_deposit/": {
      "post": {
        "tags": [
          "Deposit Switch Reports"
        ],
        "summary": "Retrieve a direct deposit switch report",
        "description": "The endpoint returns the DDS report.",
        "operationId": "dds_report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "request_body",
                "required": [
                  "access_token"
                ],
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "Access Token",
                    "example": "48427a36d43c4d5aa6324bc06c692456"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DDS"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    },
    "/v1/links/reports/pll/": {
      "post": {
        "tags": [
          "Deposit Switch Reports"
        ],
        "summary": "Retrieve a paycheck linked lending report",
        "description": "The endpoint returns a PLL report.",
        "operationId": "pll_report",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "request_body",
                "required": [
                  "access_token"
                ],
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "Access Token",
                    "example": "48427a36d43c4d5aa6324bc06c692456"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PLL"
                }
              }
            }
          },
          "400": {
            "description": "HTTP 400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "HTTP 401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "HTTP 403 Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "data"
      }
    }
  },
  "components": {
    "schemas": {
      "TargetBankAccount": {
        "required": [
          "account_number",
          "routing_number"
        ],
        "type": "object",
        "properties": {
          "deposit_value": {
            "title": "Deposit value",
            "type": "string",
            "format": "decimal"
          },
          "deposit_type": {
            "title": "Deposit type",
            "type": "string",
            "enum": [
              "entire",
              "percent",
              "amount"
            ]
          },
          "account_type": {
            "title": "Account type",
            "type": "string",
            "enum": [
              "checking",
              "savings"
            ]
          },
          "bank_name": {
            "title": "Bank name",
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "bank_address": {
            "title": "Bank address",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "account_number": {
            "title": "Account number",
            "maxLength": 20,
            "minLength": 4,
            "pattern": "\\d+",
            "type": "string"
          },
          "routing_number": {
            "title": "Routing number",
            "maxLength": 12,
            "minLength": 8,
            "pattern": "\\d+",
            "type": "string"
          },
          "action": {
            "title": "Action",
            "type": "string",
            "default": "create",
            "enum": [
              "create",
              "delete",
              "update"
            ]
          }
        }
      },
      "ApplicantProfileCreate": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "maxLength": 512,
            "minLength": 1,
            "type": "string"
          },
          "first_name": {
            "title": "First name",
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "last_name": {
            "title": "Last name",
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "title": "Email",
            "maxLength": 254,
            "minLength": 1,
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "ssn": {
            "title": "Ssn",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "BridgeTokenCreate": {
        "required": [
          "product_type",
          "user"
        ],
        "type": "object",
        "properties": {
          "tracking_info": {
            "type": "string",
            "description": "Any information to associate with current user.",
            "example": "any data for tracking current user"
          },
          "client_name": {
            "type": "string",
            "description": "Client name to be used in the Bridge.",
            "example": "Truv Demo"
          },
          "color_primary": {
            "type": "string",
            "description": "Primary color for the widget in HEX format.",
            "example": "#000000"
          },
          "product_type": {
            "type": "string",
            "description": "\nIndicates the type of product to use:\n\n* `employment` - Employment verification,\n* `income` - Income and Employment verification,\n* `deposit_switch` - Direct deposit switch,\n* `pll` - Paycheck linked lending,\n* `insurance` - Insurance verification,\n* `transactions` - Financial account aggregation,\n* `assets` - Assets verification,\n\n",
            "enum": [
              "income",
              "employment",
              "deposit_switch",
              "pll",
              "insurance",
              "transactions",
              "assets"
            ]
          },
          "allowed_products": {
            "type": "array",
            "description": "List of all allowed products for this payroll connection. If not passed, only type from the product_type field will be allowed.",
            "items": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets",
                "admin"
              ]
            }
          },
          "company_mapping_id": {
            "type": "string",
            "description": "A mapping ID from a company to payroll provider.",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "provider_id": {
            "type": "string",
            "description": "An ID of a data provider for direct login.",
            "example": "adp"
          },
          "access_token": {
            "type": "string",
            "description": "Access token of the existing link (used for the data refresh).",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "account": {
            "required": [
              "account_number",
              "bank_name",
              "routing_number"
            ],
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "description": "\nAction to be performed on the account.\n\n`update` and `delete` actions are only available for the accounts that were previously created.\n",
                "enum": [
                  "create",
                  "update",
                  "delete"
                ]
              },
              "account_number": {
                "maxLength": 20,
                "minLength": 4,
                "type": "string",
                "description": "Account number. Only digits are allowed, leading zeros will be preserved.",
                "example": "16002600"
              },
              "routing_number": {
                "maxLength": 12,
                "minLength": 8,
                "type": "string",
                "description": "Routing number. Only digits are allowed, leading zeros will be preserved.",
                "example": "123456789"
              },
              "account_type": {
                "type": "string",
                "description": "\nAccount type. Required for the `create` action.\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                "enum": [
                  "checking",
                  "savings"
                ]
              },
              "bank_name": {
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "description": "Bank name. Required for the `create` action.",
                "example": "TD Bank"
              },
              "bank_address": {
                "maxLength": 1024,
                "minLength": 1,
                "type": "string",
                "description": "Bank address.",
                "example": "123 Main St, New York, NY 10001"
              },
              "deposit_type": {
                "type": "string",
                "description": "\nDeposit type.\nFor `pll` product type is required and must be set to `amount`.\nFor `deposit_switch` product type is optional and can be set to any supported value.\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n",
                "enum": [
                  "entire",
                  "percent",
                  "amount"
                ]
              },
              "deposit_value": {
                "type": "string",
                "description": "\nDeposit value.\n\nPossible values for this field depend on the `deposit_type` field:\n`percent` - this field must be set to a whole number between 0 and 100.\n`amount` - this field must be set to a number between 0 and 9999.99.\n`entire` - this field must be set to `null` or be not provided.\n",
                "example": "50.00"
              }
            },
            "description": "Bank account info. Used for Direct deposit switching and Paycheck linked lending"
          },
          "user": {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "External user id",
                "example": "12345"
              },
              "first_name": {
                "type": "string",
                "description": "First name",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "description": "Last name",
                "example": "Doe"
              },
              "email": {
                "type": "string",
                "description": "Subject's email",
                "format": "email",
                "example": "john.doe@gmail.com"
              },
              "phone": {
                "type": "string",
                "description": "Subject's phone number",
                "example": "+14155554193"
              },
              "ssn": {
                "type": "string",
                "description": "Subject's SSN",
                "example": "222233333"
              }
            },
            "description": "Applicant's personal info"
          },
          "locale": {
            "type": "string",
            "description": "Locale parameter for regional customization of the Bridge.",
            "example": "es",
            "enum": [
              "en",
              "es"
            ]
          },
          "data_sources": {
            "type": "array",
            "description": "List of data sources for the provided product_type. Leave blank to apply default values.",
            "items": {
              "type": "string",
              "enum": [
                "payroll",
                "docs",
                "insurance",
                "financial_accounts",
                "tax"
              ]
            }
          }
        }
      },
      "BridgeTokenCreateResponse": {
        "required": [
          "bridge_token"
        ],
        "type": "object",
        "properties": {
          "bridge_token": {
            "type": "string",
            "description": "The bridge token",
            "example": "2f67984a110747d190c39e1022c81837"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information to associate with current user.",
            "example": "any data for tracking current user"
          },
          "client_name": {
            "type": "string",
            "description": "Client name to be used in the Bridge.",
            "example": "Truv Demo"
          },
          "product_type": {
            "type": "string",
            "description": "\nIndicates the type of product to use:\n\n* `employment` - Employment verification,\n* `income` - Income and Employment verification,\n* `deposit_switch` - Direct deposit switch,\n* `pll` - Paycheck linked lending,\n* `insurance` - Insurance verification,\n* `transactions` - Financial account aggregation,\n* `assets` - Assets verification,\n\n",
            "enum": [
              "income",
              "employment",
              "deposit_switch",
              "pll",
              "insurance",
              "transactions",
              "assets"
            ]
          },
          "allowed_products": {
            "type": "array",
            "description": "List of all allowed products for this payroll connection. If not passed, only main type will be allowed.",
            "example": [
              "income",
              "deposit_switch"
            ],
            "items": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets"
              ]
            }
          },
          "company_mapping_id": {
            "type": "string",
            "description": "A mapping ID from a company to payroll provider.",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "access_token": {
            "type": "string",
            "description": "Access token of the existing link (used for the data refresh).",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "user_id": {
            "type": "string",
            "description": "Unique Truv ID of the user.",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "template_id": {
            "type": "string",
            "description": "An ID of a customization template.",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "data_sources": {
            "type": "array",
            "description": "List of data sources for the provided product_type. Leave blank to apply default values.",
            "items": {
              "type": "string",
              "enum": [
                "payroll",
                "docs",
                "insurance",
                "financial_accounts",
                "tax"
              ]
            }
          }
        },
        "description": "Data for the bridge token"
      },
      "CompanyMappingListItem": {
        "title": "CompanyMappingListItem",
        "required": [
          "domain",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company to Payroll Provider mapping ID",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Facebook Demo"
          },
          "domain": {
            "type": "string",
            "description": "Company domain",
            "example": "https://www.facebook.com"
          }
        },
        "description": "CompanyMapping information"
      },
      "CompanyMappingList": {
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of the results in total",
            "example": 100
          },
          "next": {
            "type": "string",
            "description": "Link to next page",
            "example": "https://prod.truv.com/v1/companies?cursor=kdApwqA"
          },
          "previous": {
            "type": "string",
            "description": "Link to previous page",
            "example": "https://prod.truv.com/v1/companies?cursor=pdAuvgGA"
          },
          "results": {
            "type": "array",
            "description": "List of company mappings",
            "items": {
              "$ref": "#/components/schemas/CompanyMappingListItem"
            }
          }
        },
        "description": "Company Mappings List"
      },
      "SSOProviderSearchResponse": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "CompanyMappingSearchResponse": {
        "required": [
          "company_mapping_id",
          "confidence_level",
          "domain",
          "name",
          "success_rate"
        ],
        "type": "object",
        "properties": {
          "company_mapping_id": {
            "type": "string",
            "description": "Company to Payroll Provider mapping ID",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Facebook Demo"
          },
          "domain": {
            "type": "string",
            "description": "Company domain",
            "example": "facebook.com"
          },
          "logo_url": {
            "type": "string",
            "description": "URL to company logo",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/facebook.png"
          },
          "success_rate": {
            "type": "string",
            "description": "Success rate for the company",
            "example": "high",
            "enum": [
              "low",
              "high",
              "unsupported"
            ]
          },
          "confidence_level": {
            "type": "string",
            "description": "Confidence level for the company success rate. Range of possible values is from 0 to 1 with 0.5 and above being high success rate",
            "example": "0.9"
          },
          "sso": {
            "required": [
              "name"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "SSO provider name",
                "example": "Microsoft"
              }
            },
            "description": "SSO provider for the company"
          }
        },
        "description": "Response for company search endpoint."
      },
      "DocumentPresignedPostCreate": {
        "required": [
          "filename",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "minLength": 1,
            "type": "string"
          },
          "subtype": {
            "title": "Subtype",
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "filename": {
            "title": "Filename",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "public_token": {
            "title": "Public token",
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "DocumentPresignedPostResponse": {
        "required": [
          "fields",
          "id",
          "public_token",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "minLength": 1,
            "type": "string"
          },
          "public_token": {
            "title": "Public token",
            "minLength": 1,
            "type": "string"
          },
          "url": {
            "title": "Url",
            "minLength": 1,
            "type": "string"
          },
          "fields": {
            "title": "Fields",
            "type": "object",
            "additionalProperties": {
              "minLength": 1,
              "type": "string"
            }
          }
        }
      },
      "DocumentUploadTaskCreateResponse": {
        "required": [
          "status",
          "task_id"
        ],
        "type": "object",
        "properties": {
          "task_id": {
            "title": "Task id",
            "minLength": 1,
            "type": "string"
          },
          "status": {
            "title": "Status",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "DocumentUploadRetrieveTask": {
        "required": [
          "status",
          "task_id"
        ],
        "type": "object",
        "properties": {
          "task_id": {
            "title": "Task id",
            "minLength": 1,
            "type": "string"
          },
          "status": {
            "title": "Status",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Invoice": {
        "required": [
          "created_at",
          "id",
          "invoice_id",
          "period_end",
          "period_start",
          "report"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the invoice",
            "format": "uuid",
            "readOnly": true
          },
          "invoice_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Stripe invoice identifier"
          },
          "period_start": {
            "type": "string",
            "description": "Datetime when the period is start",
            "format": "date-time",
            "readOnly": true
          },
          "period_end": {
            "type": "string",
            "description": "Datetime when the period is end",
            "format": "date-time",
            "readOnly": true
          },
          "report": {
            "type": "string",
            "description": "Report file.",
            "format": "uri",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "Datetime when the invoice was created",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "LinkAccessTokenResponse": {
        "required": [
          "access_token",
          "link_id"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Access token",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "link_id": {
            "type": "string",
            "description": "Link ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "link_hash": {
            "type": "string",
            "description": "Link hash",
            "example": "bc917458a3da4b2c8cc8282aa1707aaa"
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: payroll - payroll provider parsing, docs - user uploaded documents, insurance - insurance data, financial_accounts - bank data, tax - tax documents, scoring_attributes - transactions scoring attributes report.",
            "example": "payroll",
            "enum": [
              "payroll",
              "docs",
              "insurance",
              "financial_accounts",
              "tax",
              "scoring_attributes"
            ]
          }
        }
      },
      "ProviderBase": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "type": "string",
            "description": "Data provider ID.",
            "readOnly": true,
            "example": "adp"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Data provider name.",
            "readOnly": true,
            "example": "ADP"
          },
          "logo_url": {
            "type": "string",
            "description": "Data provider logo image."
          }
        },
        "nullable": true,
        "x-nullable": true
      },
      "Employer": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "type": "string",
            "description": "Employer ID.",
            "readOnly": true,
            "example": "meta"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Employer name.",
            "readOnly": true,
            "example": "Meta"
          },
          "logo_url": {
            "type": "string",
            "description": "Employer logo image."
          }
        },
        "nullable": true,
        "x-nullable": true
      },
      "Link": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Link ID",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "created_at": {
            "type": "string",
            "description": "Link creation timestamp (ISO 8601)",
            "example": "2022-06-07T15:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Link last update timestamp (ISO 8601)",
            "example": "2022-07-01T15:00:00.000Z"
          },
          "deleted_at": {
            "type": "string",
            "description": "Link removal timestamp (ISO 8601)",
            "example": "2022-07-01T15:00:00.000Z"
          },
          "tracking_info": {
            "type": "string",
            "description": "Optional tracking information provided by a partner",
            "example": "user123456"
          },
          "status": {
            "type": "string",
            "description": "Status of the last Task",
            "example": "new"
          },
          "user_external_id": {
            "type": "string",
            "description": "User external ID is information provided by a partner",
            "example": "user123456"
          },
          "provider_id": {
            "type": "string",
            "description": "Data provider ID",
            "example": "adp"
          },
          "provider": {
            "$ref": "#/components/schemas/ProviderBase"
          },
          "company_mapping": {
            "$ref": "#/components/schemas/Employer"
          },
          "link_hash": {
            "type": "string",
            "description": "Unique hash for the user credentials used to create the link",
            "example": "bc917458a3da4b2c8cc8282aa1707aaa"
          },
          "allowed_products": {
            "type": "array",
            "description": "List of all allowed products for this connection",
            "items": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets",
                "admin"
              ]
            }
          },
          "initial_product_type": {
            "type": "string",
            "description": "Initial product type",
            "example": "income",
            "enum": [
              "income",
              "employment",
              "deposit_switch",
              "pll",
              "insurance",
              "transactions",
              "assets",
              "admin"
            ]
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: payroll - payroll provider parsing, docs - user uploaded documents, insurance - insurance data, financial_accounts - bank data, tax - tax documents, scoring_attributes - transactions scoring attributes report.",
            "example": "payroll",
            "enum": [
              "payroll",
              "docs",
              "insurance",
              "financial_accounts",
              "tax",
              "scoring_attributes"
            ]
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          }
        },
        "description": "Link's properties"
      },
      "LinksListResponse": {
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of Links to return",
            "example": 100
          },
          "next": {
            "type": "string",
            "description": "Url to the next page",
            "example": "https://prod.truv.com/v1/links?page=1"
          },
          "previous": {
            "type": "string",
            "description": "Url to the previous page",
            "example": "https://prod.truv.com/v1/links?page=1"
          },
          "results": {
            "type": "array",
            "description": "List all links",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        },
        "description": "List all links"
      },
      "DDS": {
        "required": [
          "access_token",
          "completed_at",
          "deposit_details",
          "id",
          "status",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "status": {
            "type": "string",
            "description": "[Request status](https://docs.truv.com/reference/task-livecycle)",
            "example": "new"
          },
          "finished_at": {
            "type": "string",
            "description": "Time when report was finished",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Time when report was completed **(Deprecated, invalid datetime format)**",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information passed to the Truv Bridge from a partner",
            "example": "user123456"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "deposit_details": {
            "required": [
              "account_number",
              "account_type",
              "bank_name",
              "deposit_type",
              "routing_number"
            ],
            "type": "object",
            "properties": {
              "account_number": {
                "maxLength": 20,
                "minLength": 4,
                "type": "string",
                "description": "Account number",
                "example": "16002600"
              },
              "account_type": {
                "type": "string",
                "description": "\nAccount type:\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                "enum": [
                  "checking",
                  "savings"
                ]
              },
              "routing_number": {
                "maxLength": 12,
                "minLength": 8,
                "type": "string",
                "description": "Routing number",
                "example": "123456789"
              },
              "bank_name": {
                "type": "string",
                "description": "Bank name",
                "example": "TD Bank"
              },
              "deposit_type": {
                "type": "string",
                "description": "\nDeposit type:\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n\n",
                "enum": [
                  "entire",
                  "percent",
                  "amount"
                ]
              },
              "deposit_value": {
                "type": "string",
                "description": "Deposit value",
                "example": "50.00"
              }
            },
            "description": "Bank account info. Used for Direct deposit switching and Paycheck linked lending"
          },
          "initial_accounts": {
            "type": "array",
            "description": "List of initial accounts",
            "items": {
              "required": [
                "account_number",
                "routing_number"
              ],
              "type": "object",
              "properties": {
                "account_number": {
                  "maxLength": 20,
                  "minLength": 4,
                  "pattern": "[\\d*]+",
                  "type": "string",
                  "description": "Account number. Only digits and * are allowed.",
                  "example": "16001234"
                },
                "routing_number": {
                  "maxLength": 12,
                  "minLength": 8,
                  "pattern": "[\\d*]+",
                  "type": "string",
                  "description": "Routing number. Only digits and * are allowed.",
                  "example": "55999876"
                },
                "account_type": {
                  "type": "string",
                  "description": "\nAccount type.\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                  "enum": [
                    "checking",
                    "savings"
                  ]
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name"
                },
                "bank_name": {
                  "type": "string",
                  "description": "Bank name.",
                  "example": "TD Bank"
                },
                "deposit_type": {
                  "type": "string",
                  "description": "\nDeposit type.\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n",
                  "example": "amount",
                  "enum": [
                    "entire",
                    "percent",
                    "amount"
                  ]
                },
                "deposit_value": {
                  "type": "string",
                  "description": "Deposit value.",
                  "example": "50.00"
                }
              },
              "description": "Initial Account"
            }
          },
          "pdf_report": {
            "type": "string",
            "description": "URL that points to the PDF file containing the report",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          }
        },
        "description": "Data for the DDS report"
      },
      "Company": {
        "required": [
          "address",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Facebook Demo"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "description": "Street",
                "example": "1 Morgan Ave"
              },
              "city": {
                "type": "string",
                "description": "City",
                "example": "Los Angeles"
              },
              "state": {
                "type": "string",
                "description": "State",
                "example": "CA"
              },
              "zip": {
                "type": "string",
                "description": "Zip code",
                "example": "90210"
              },
              "country": {
                "type": "string",
                "description": "Country",
                "example": "US"
              }
            },
            "description": "Company address"
          },
          "phone": {
            "type": "string",
            "description": "Company phone number",
            "example": "6503087300"
          },
          "ein": {
            "type": "string",
            "description": "Employer Identification Number  (EIN)",
            "example": "12-345678"
          }
        },
        "description": "Company information"
      },
      "Profile": {
        "required": [
          "first_name",
          "home_address",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the object",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "created_at": {
            "type": "string",
            "description": "Person's identity info was retrieved first time (ISO 8601)",
            "example": "2022-06-07T15:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Person's identity info was retrieved last time (ISO 8601)",
            "example": "2022-07-01T15:00:00.000Z"
          },
          "first_name": {
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "full_name": {
            "type": "string",
            "description": "Full name",
            "example": "John Doe"
          },
          "middle_initials": {
            "type": "string",
            "description": "Middle initials",
            "example": "K"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "ssn": {
            "type": "string",
            "description": "Social security number (Full or last 4 digits)",
            "example": "123456789"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of birth",
            "format": "date",
            "example": "1992-03-03T00:00:00.000Z"
          },
          "home_address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "description": "Street",
                "example": "1 Morgan Ave"
              },
              "city": {
                "type": "string",
                "description": "City",
                "example": "Los Angeles"
              },
              "state": {
                "type": "string",
                "description": "State",
                "example": "CA"
              },
              "zip": {
                "type": "string",
                "description": "Zip code",
                "example": "90210"
              },
              "country": {
                "type": "string",
                "description": "Country",
                "example": "US"
              }
            },
            "description": "Home address"
          }
        },
        "description": "Person's identity information"
      },
      "Employment": {
        "required": [
          "company",
          "id",
          "profile"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the employment is still active",
            "example": false
          },
          "job_title": {
            "type": "string",
            "description": "Employee's job title",
            "example": "PR associate"
          },
          "job_type": {
            "type": "string",
            "description": "\nEmployee's job type:\n\n* `F` - Full Time,\n* `P` - Part Time,\n* `S` - Seasonal,\n* `D` - Daily (per diem),\n* `C` - Contract\n\n",
            "enum": [
              "F",
              "P",
              "S",
              "D",
              "C"
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Employee's hire date",
            "format": "date",
            "example": "2018-01-01T00:00:00.000Z"
          },
          "original_hire_date": {
            "type": "string",
            "description": "Original hire date",
            "format": "date",
            "example": "2017-06-21T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Employee's end date",
            "format": "date"
          },
          "external_last_updated": {
            "type": "string",
            "description": "Indicates the date when employment data was last updated on the Payroll Provider side",
            "format": "date"
          },
          "dates_from_statements": {
            "type": "boolean",
            "description": "Indicates whether or not the Employee's hire and/or end dates were derived from first/last pay statements **(Deprecated)**",
            "example": false
          },
          "derived_fields": {
            "type": "array",
            "description": "Array of derived fields",
            "example": [
              "is_active"
            ],
            "items": {
              "type": "string"
            }
          },
          "missing_data_fields": {
            "type": "array",
            "description": "List of the data fields which are missing in the payroll API response",
            "example": [
              "w2s"
            ],
            "items": {
              "type": "string"
            }
          },
          "manager_name": {
            "type": "string",
            "description": "Supervisor's name",
            "example": "Jenny McDouglas"
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          }
        },
        "description": "Employment data"
      },
      "EmploymentCheck": {
        "required": [
          "access_token",
          "completed_at",
          "employments",
          "finished_at",
          "id",
          "provider",
          "status",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "status": {
            "type": "string",
            "description": "[Request status](https://docs.truv.com/reference/task-livecycle)",
            "example": "new"
          },
          "finished_at": {
            "type": "string",
            "description": "Time when report was finished",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Time when report was completed **(Deprecated, invalid datetime format)**",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information passed to the Truv Bridge from a partner",
            "example": "user123456"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "employments": {
            "type": "array",
            "description": "List of employments received from a payroll provider",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Employment"
            }
          },
          "pdf_report": {
            "type": "string",
            "description": "Verification report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          },
          "provider": {
            "type": "string",
            "description": "Payroll provider name",
            "example": "adp"
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: crawler - payroll provider parsing, docs - user uploaded documents",
            "example": "crawler",
            "enum": [
              "crawler",
              "docs"
            ]
          }
        },
        "description": "Data for the employment verification"
      },
      "Statement": {
        "required": [
          "pay_date"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "check_number": {
            "type": "string",
            "description": "External ID of pay stub from the payroll provider",
            "format": "string",
            "example": "29205182"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay Date",
            "format": "date",
            "example": "2018-05-15T00:00:00.000Z"
          },
          "net_pay": {
            "type": "string",
            "description": "Net pay",
            "format": "decimal",
            "example": "11500.32"
          },
          "net_pay_ytd": {
            "type": "string",
            "description": "Net pay year to date",
            "format": "decimal",
            "example": "31980.64"
          },
          "gross_pay": {
            "type": "string",
            "description": "Gross pay",
            "format": "decimal",
            "example": "13900.11"
          },
          "gross_pay_ytd": {
            "type": "string",
            "description": "Gross pay year to date",
            "format": "decimal",
            "example": "49200.00"
          },
          "bonus": {
            "type": "string",
            "description": "Bonus",
            "format": "decimal",
            "example": "100.00"
          },
          "commission": {
            "type": "string",
            "description": "Commission",
            "format": "decimal",
            "example": "12000.00"
          },
          "hours": {
            "type": "string",
            "description": "Work hours during a pay period",
            "format": "decimal",
            "example": "40.00"
          },
          "basis_of_pay": {
            "type": "string",
            "description": "\nBasis of pay:\n\n* `S` - Salary,\n* `H` - Hourly,\n* `D` - Daily,\n* `W` - Weekly,\n* `M` - Monthly,\n* `C` - Contract,\n\n",
            "example": "S",
            "enum": [
              "S",
              "H",
              "D",
              "W",
              "M"
            ]
          },
          "period_start": {
            "type": "string",
            "description": "Period start",
            "format": "date",
            "example": "2018-05-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Period end",
            "format": "date",
            "example": "2018-05-15T00:00:00.000Z"
          },
          "regular": {
            "type": "string",
            "description": "Regular pay",
            "format": "decimal",
            "example": "1695.11"
          },
          "regular_ytd": {
            "type": "string",
            "description": "Regular salary year to date",
            "format": "decimal",
            "example": "23000.00"
          },
          "other_pay_ytd": {
            "type": "string",
            "description": "All other pays year to date",
            "format": "decimal",
            "example": "700.00"
          },
          "bonus_ytd": {
            "type": "string",
            "description": "Bonus year to date",
            "format": "decimal",
            "example": "1000.00"
          },
          "commission_ytd": {
            "type": "string",
            "description": "Commission year to date",
            "format": "decimal",
            "example": "24000.00"
          },
          "overtime": {
            "type": "string",
            "description": "Overtime pay",
            "format": "decimal",
            "example": "45.00"
          },
          "overtime_ytd": {
            "type": "string",
            "description": "Overtime pay year to date",
            "format": "decimal",
            "example": "500.00"
          },
          "other_pay": {
            "type": "string",
            "description": "All other pays",
            "format": "decimal",
            "example": "60.00"
          },
          "earnings": {
            "type": "array",
            "description": "Earnings for this pay cycle by type",
            "example": [
              {
                "name": "Regular",
                "amount": "1935.77",
                "category": "regular",
                "rate": null,
                "units": null
              },
              {
                "name": "Overtime",
                "amount": "60.58",
                "category": "overtime",
                "rate": "30.29",
                "units": "2"
              }
            ],
            "items": {
              "required": [
                "amount",
                "category",
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of earnings",
                  "example": "Regular"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of earnings",
                  "format": "decimal",
                  "example": "1935.77"
                },
                "category": {
                  "type": "string",
                  "description": "Category of earnings",
                  "example": "regular",
                  "enum": [
                    "regular",
                    "overtime",
                    "bonus",
                    "commission",
                    "other_pay"
                  ]
                },
                "rate": {
                  "type": "string",
                  "description": "Rate of earnings",
                  "format": "decimal"
                },
                "units": {
                  "type": "string",
                  "description": "Units of earnings",
                  "format": "decimal"
                }
              }
            }
          },
          "earnings_ytd": {
            "type": "array",
            "description": "Earnings year to date by type",
            "example": [
              {
                "name": "Regular",
                "amount": "1935.77",
                "category": "regular",
                "rate": null,
                "units": null
              },
              {
                "name": "Overtime",
                "amount": "60.58",
                "category": "overtime",
                "rate": "30.29",
                "units": "2"
              }
            ],
            "items": {
              "required": [
                "amount",
                "category",
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of earnings",
                  "example": "Regular"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of earnings",
                  "format": "decimal",
                  "example": "1935.77"
                },
                "category": {
                  "type": "string",
                  "description": "Category of earnings",
                  "example": "regular",
                  "enum": [
                    "regular",
                    "overtime",
                    "bonus",
                    "commission",
                    "other_pay"
                  ]
                },
                "rate": {
                  "type": "string",
                  "description": "Rate of earnings",
                  "format": "decimal"
                },
                "units": {
                  "type": "string",
                  "description": "Units of earnings",
                  "format": "decimal"
                }
              }
            }
          },
          "deductions": {
            "type": "array",
            "description": "Deductions for this pay cycle by type",
            "example": [
              {
                "name": "Social Security Tax",
                "amount": "127.01",
                "category": "socialsec"
              },
              {
                "name": "VA State Income Tax",
                "amount": "46.23",
                "category": "state"
              },
              {
                "name": "Medicare Tax",
                "amount": "29.7",
                "category": "medicare"
              }
            ],
            "items": {
              "required": [
                "amount",
                "category",
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the deduction",
                  "example": "Social Security Tax"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of the deduction",
                  "format": "decimal",
                  "example": "127.01"
                },
                "category": {
                  "type": "string",
                  "description": "Category of the deduction",
                  "example": "socialsec",
                  "enum": [
                    "memo",
                    "medicare",
                    "retirement",
                    "socialsec",
                    "federal",
                    "state",
                    "benefit",
                    "garnishment",
                    "local",
                    "other"
                  ]
                }
              }
            }
          },
          "deductions_ytd": {
            "type": "array",
            "description": "Deductions year to date by type",
            "example": [
              {
                "name": "Social Security Tax",
                "amount": "127.01",
                "category": "socialsec"
              },
              {
                "name": "VA State Income Tax",
                "amount": "46.23",
                "category": "state"
              },
              {
                "name": "Medicare Tax",
                "amount": "29.7",
                "category": "medicare"
              }
            ],
            "items": {
              "required": [
                "amount",
                "category",
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the deduction",
                  "example": "Social Security Tax"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of the deduction",
                  "format": "decimal",
                  "example": "127.01"
                },
                "category": {
                  "type": "string",
                  "description": "Category of the deduction",
                  "example": "socialsec",
                  "enum": [
                    "memo",
                    "medicare",
                    "retirement",
                    "socialsec",
                    "federal",
                    "state",
                    "benefit",
                    "garnishment",
                    "local",
                    "other"
                  ]
                }
              }
            }
          },
          "md5sum": {
            "type": "string",
            "description": "MD5 hash value computed based on the file content",
            "format": "string",
            "example": "03639d6a6624f69a54a88ea90bd25e9d"
          },
          "file": {
            "type": "string",
            "description": "Link to a pay stub file (format is specified in the content-type)",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/paystub_sample.pdf"
          },
          "derived_fields": {
            "type": "array",
            "description": "Array of derived fields",
            "example": [
              "basis_of_pay"
            ],
            "items": {
              "type": "string"
            }
          },
          "missing_data_fields": {
            "type": "array",
            "description": "List of the data fields which are missing in the payroll API response",
            "example": [
              "earnings_ytd"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Pay stub data"
      },
      "AnnualIncomeSummary": {
        "required": [
          "id",
          "year"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "year": {
            "type": "integer",
            "description": "Income report year",
            "example": 2018
          },
          "regular": {
            "type": "string",
            "description": "Regular salary",
            "format": "decimal",
            "example": "23000.00"
          },
          "bonus": {
            "type": "string",
            "description": "Bonus",
            "format": "decimal",
            "example": "1000.00"
          },
          "commission": {
            "type": "string",
            "description": "Commission",
            "format": "decimal",
            "example": "24000.00"
          },
          "overtime": {
            "type": "string",
            "description": "Overtime pay",
            "format": "decimal",
            "example": "500.00"
          },
          "other_pay": {
            "type": "string",
            "description": "All other pays",
            "format": "decimal",
            "example": "700.00"
          },
          "net_pay": {
            "type": "string",
            "description": "Net pay",
            "format": "decimal",
            "example": "31980.64"
          },
          "gross_pay": {
            "type": "string",
            "description": "Gross pay",
            "format": "decimal",
            "example": "49200.00"
          }
        },
        "description": "Annual income summary"
      },
      "BankAccount": {
        "required": [
          "account_number"
        ],
        "type": "object",
        "properties": {
          "account_number": {
            "type": "string",
            "description": "Account number",
            "example": "1234567890"
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number",
            "example": "123456789"
          },
          "account_name": {
            "type": "string",
            "description": "User friendly account name",
            "example": "My Bank"
          },
          "account_type": {
            "type": "string",
            "description": "\nAccount type:\n\n* `C` - Checking account,\n* `S` - Savings account,\n\n",
            "example": "C",
            "enum": [
              "C",
              "S"
            ]
          },
          "deposit_type": {
            "type": "string",
            "description": "\nDeposit type:\n\n* `E` - Entire paycheck,\n* `P` - Percentage of the paycheck,\n* `A` - Fixed amount from the paycheck,\n\n",
            "example": "A",
            "enum": [
              "E",
              "P",
              "A"
            ]
          },
          "deposit_value": {
            "type": "string",
            "description": "Deposit value",
            "format": "decimal",
            "example": "200.00"
          },
          "bank_name": {
            "type": "string",
            "description": "Bank name",
            "example": "TD Bank"
          }
        },
        "description": "Bank account"
      },
      "TaxDocumentW2": {
        "required": [
          "file",
          "md5sum",
          "year"
        ],
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "Link to a W2 report file (format is specified in the content-type)",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/W2_sample.pdf"
          },
          "md5sum": {
            "type": "string",
            "description": "MD5 hash value computed based on the file content",
            "format": "string",
            "example": "f65e30c39124ad707ac4b3aeaee923a7"
          },
          "year": {
            "type": "integer",
            "description": "Year",
            "example": 2020
          },
          "wages": {
            "type": "string",
            "description": "Wages, tips, other compensation (section 1)",
            "format": "decimal",
            "example": "900.50"
          },
          "federal_tax": {
            "type": "string",
            "description": "Federal income tax withheld (section 2)",
            "format": "decimal",
            "example": "75.01"
          },
          "social_security_wages": {
            "type": "string",
            "description": "Social security wages (section 3)",
            "format": "decimal",
            "example": "900.50"
          },
          "social_security_tax": {
            "type": "string",
            "description": "Social security tax withheld (section 4)",
            "format": "decimal",
            "example": "56.30"
          },
          "medicare_wages": {
            "type": "string",
            "description": "Medicare wages (section 5)",
            "format": "decimal",
            "example": "900.50"
          },
          "medicare_tax": {
            "type": "string",
            "description": "Medicare tax withheld (section 6)",
            "format": "decimal",
            "example": "13.15"
          },
          "gross_pay": {
            "type": "string",
            "description": "Gross pay",
            "format": "decimal",
            "example": "18211.48"
          }
        },
        "description": "W-2 Form"
      },
      "EmploymentIncome": {
        "required": [
          "company",
          "id",
          "profile"
        ],
        "type": "object",
        "properties": {
          "income": {
            "type": "string",
            "description": "Income amount not including commission or bonuses",
            "format": "decimal",
            "example": "70000.00"
          },
          "income_unit": {
            "type": "string",
            "description": "\nThe pay interval the income field refers to:\n\n* `YEARLY` - Annual income,\n* `MONTHLY` - Monthly income,\n* `WEEKLY` - Weekly income,\n* `DAILY` - Daily income,\n* `HOURLY` - Hourly income\n\n",
            "enum": [
              "YEARLY",
              "MONTHLY",
              "WEEKLY",
              "DAILY",
              "HOURLY"
            ]
          },
          "pay_rate": {
            "type": "string",
            "description": "Payment rate per pay cycle",
            "format": "decimal",
            "example": "6500.00"
          },
          "pay_frequency": {
            "type": "string",
            "description": "\nPay frequency:\n\n* `M` - Monthly,\n* `SM` - Semi-Monthly,\n* `W` - Weekly,\n* `BW` - Bi-Weekly,\n* `A` - Annually,\n* `SA` - Semiannually,\n* `C` - Commission\n\n",
            "enum": [
              "M",
              "SM",
              "W",
              "BW",
              "A",
              "SA",
              "C"
            ]
          },
          "statements": {
            "type": "array",
            "description": "List of paystubs received from a payroll provider",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Statement"
            }
          },
          "annual_income_summary": {
            "type": "array",
            "description": "Annual income summary by years",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AnnualIncomeSummary"
            }
          },
          "bank_accounts": {
            "type": "array",
            "description": "List of bank accounts linked to the employment",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/BankAccount"
            }
          },
          "w2s": {
            "type": "array",
            "description": "List of W-2 forms linked to the employment",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/TaxDocumentW2"
            }
          },
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the employment is still active",
            "example": false
          },
          "job_title": {
            "type": "string",
            "description": "Employee's job title",
            "example": "PR associate"
          },
          "job_type": {
            "type": "string",
            "description": "\nEmployee's job type:\n\n* `F` - Full Time,\n* `P` - Part Time,\n* `S` - Seasonal,\n* `D` - Daily (per diem),\n* `C` - Contract\n\n",
            "enum": [
              "F",
              "P",
              "S",
              "D",
              "C"
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Employee's hire date",
            "format": "date",
            "example": "2018-01-01T00:00:00.000Z"
          },
          "original_hire_date": {
            "type": "string",
            "description": "Original hire date",
            "format": "date",
            "example": "2017-06-21T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Employee's end date",
            "format": "date"
          },
          "external_last_updated": {
            "type": "string",
            "description": "Indicates the date when employment data was last updated on the Payroll Provider side",
            "format": "date"
          },
          "dates_from_statements": {
            "type": "boolean",
            "description": "Indicates whether or not the Employee's hire and/or end dates were derived from first/last pay statements **(Deprecated)**",
            "example": false
          },
          "derived_fields": {
            "type": "array",
            "description": "Array of derived fields",
            "example": [
              "is_active"
            ],
            "items": {
              "type": "string"
            }
          },
          "missing_data_fields": {
            "type": "array",
            "description": "List of the data fields which are missing in the payroll API response",
            "example": [
              "w2s"
            ],
            "items": {
              "type": "string"
            }
          },
          "manager_name": {
            "type": "string",
            "description": "Supervisor's name",
            "example": "Jenny McDouglas"
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          }
        },
        "description": "Income data"
      },
      "IncomeCheck": {
        "required": [
          "access_token",
          "completed_at",
          "employments",
          "id",
          "provider",
          "refresh_status",
          "status",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "status": {
            "type": "string",
            "description": "[Request status](https://docs.truv.com/reference/task-livecycle)",
            "example": "new"
          },
          "finished_at": {
            "type": "string",
            "description": "Time when report was finished",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Time when report was completed **(Deprecated, invalid datetime format)**",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information passed to the Truv Bridge from a partner",
            "example": "user123456"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "refresh_status": {
            "type": "string",
            "description": "Status of the most recent refresh task",
            "example": "new"
          },
          "employments": {
            "type": "array",
            "description": "List of employments received from a payroll provider",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/EmploymentIncome"
            }
          },
          "pdf_report": {
            "type": "string",
            "description": "Verification report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          },
          "provider": {
            "type": "string",
            "description": "Payroll provider name",
            "example": "adp"
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: crawler - payroll provider parsing, docs - user uploaded documents",
            "example": "crawler",
            "enum": [
              "crawler",
              "docs"
            ]
          }
        },
        "description": "Data for the income verification"
      },
      "InsuranceAddress": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Address ID",
            "format": "uuid",
            "example": "a497f96b-94be-443e-88bb-c8289085c922"
          },
          "address_nature": {
            "type": "string",
            "description": "The type of address",
            "enum": [
              "MAILING",
              "PHYSICAL",
              "LIENHOLDER",
              "INCIDENT_LOCATION",
              "AGENCY_LOCATION",
              "MORTGAGEE"
            ]
          },
          "country": {
            "type": "string",
            "description": "Country",
            "example": "US"
          },
          "street": {
            "type": "string",
            "description": "Street",
            "example": "344 Clinton St, Apartment 3D"
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Brooklyn"
          },
          "state": {
            "type": "string",
            "description": "State",
            "example": "NY"
          },
          "zip": {
            "type": "string",
            "description": "Zip code",
            "example": "11231"
          }
        }
      },
      "InsuranceDwellingCoverage": {
        "required": [
          "id",
          "is_declined",
          "premium_cents"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Dwelling coverage ID",
            "format": "uuid",
            "example": "b9087b71-c1b1-482d-be9f-92a2cf81fbb3"
          },
          "name": {
            "type": "string",
            "description": "Name of coverage item",
            "example": "PERSONAL_PROPERTY",
            "enum": [
              "BASE",
              "DWELLING",
              "OTHER_STRUCTURES",
              "PERSONAL_PROPERTY",
              "BUSINESS_PROPERTY",
              "ORDINANCE_OR_LAW",
              "LOSS_OF_USE",
              "LOSS_ASSESSMENTS",
              "PERSONAL_LIABILITY",
              "PREMISES_LIABILITY",
              "REPLACEMENT_COST_FULL_VALUE",
              "REPLACEMENT_COST_DWELLING",
              "REPLACEMENT_COST_CONTENTS",
              "GUEST_MEDICAL_PROTECTION",
              "DAMAGE_TO_PROPERTY_OF_OTHERS",
              "MEDICAL_PAYMENTS",
              "ADDITIONAL_LIVING_EXPENSE",
              "FAMILY_LIABILITY_PROTECTION",
              "BUILDING_CODES",
              "WINDSTORM_OR_HAIL",
              "HURRICANE",
              "ALL_OTHER_PERILS",
              "ALL_PERILS",
              "EARTHQUAKE",
              "FLOOD",
              "PORTABLE_ELECTRONICS",
              "FASHION_ITEMS",
              "FINE_ART",
              "BICYCLE",
              "CAMERA",
              "JEWELRY",
              "MUSICAL_INSTRUMENT",
              "BUILDING",
              "CONTENTS",
              "ICC"
            ]
          },
          "premium_cents": {
            "type": "integer",
            "description": "Premium paid for coverage item, in cents",
            "example": 18514
          },
          "per_person_limit_cents": {
            "type": "integer",
            "description": "Per-person limit, in cents"
          },
          "per_incident_limit_cents": {
            "type": "integer",
            "description": "Per-incident limit, in cents"
          },
          "deductible_cents": {
            "type": "integer",
            "description": "Deductible, in cents",
            "example": 50000
          },
          "is_declined": {
            "type": "boolean",
            "description": "If true, this coverage item was declined"
          }
        }
      },
      "InsuranceDwellingMortgagee": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "ID of the mortgagee",
            "format": "uuid",
            "readOnly": true,
            "example": "26a4ce3a-0b9f-4c3d-96c0-1c76529e3b52"
          },
          "name": {
            "type": "string",
            "description": "Name of the mortgagee",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of mortgagee",
            "readOnly": true,
            "enum": [
              "FIRST",
              "SECOND",
              "THIRD"
            ]
          },
          "loan_number": {
            "type": "string",
            "description": "Loan number of the mortgage",
            "readOnly": true
          },
          "address": {
            "$ref": "#/components/schemas/InsuranceAddress"
          }
        }
      },
      "InsurancePolicyDwelling": {
        "title": "Dwelling",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Dwelling ID",
            "format": "uuid",
            "example": "b7a53a67-7266-42b6-a20e-97e8fc723bbc"
          },
          "address": {
            "$ref": "#/components/schemas/InsuranceAddress"
          },
          "replacement_cost_cents": {
            "type": "integer",
            "description": "Replacement cost in cents",
            "example": 2600
          },
          "cash_value_cents": {
            "type": "integer",
            "description": "Cash value in cents",
            "example": 2600
          },
          "coverages": {
            "type": "array",
            "description": "List of dwelling coverages",
            "items": {
              "$ref": "#/components/schemas/InsuranceDwellingCoverage"
            }
          },
          "mortgagees": {
            "type": "array",
            "description": "List of mortgagee objects",
            "items": {
              "$ref": "#/components/schemas/InsuranceDwellingMortgagee"
            }
          }
        }
      },
      "InsuranceVehicleCoverage": {
        "required": [
          "id",
          "is_declined",
          "premium_cents"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Vehicle coverage ID",
            "format": "uuid",
            "example": "111da3f8-20b0-4839-81d7-6473437e493e"
          },
          "name": {
            "type": "string",
            "description": "Name of coverage item",
            "example": "PROPERTY_DAMAGE_LIABILITY",
            "enum": [
              "SINGLE_LIMIT_LIABILITY",
              "BODILY_INJURY_LIABILITY",
              "PROPERTY_DAMAGE_LIABILITY",
              "SUPPLEMENTAL_SPOUSAL_LIABILITY",
              "PERSONAL_INJURY_PROTECTION",
              "COMPREHENSIVE",
              "FULL_GLASS",
              "COLLISION_DEDUCTIBLE_WAIVER",
              "COLLISION",
              "UNINSURED_MOTORISTS",
              "UNINSURED_MOTORIST_BODILY_INJURY_LIABILITY",
              "UNINSURED_MOTORIST_PROPERTY_DAMAGE_LIABILITY",
              "UNINSURED_MOTORIST_BODILY_INJURY_AND_PROPERTY_DAMAGE_LIABILITY",
              "UNDERINSURED_MOTORISTS",
              "UNDERINSURED_MOTORIST_BODILY_INJURY_LIABILITY",
              "UNDERINSURED_MOTORIST_PROPERTY_DAMAGE_LIABILITY",
              "UNDERINSURED_MOTORIST_BODILY_INJURY_AND_PROPERTY_DAMAGE_LIABILITY",
              "UNINSURED_AND_UNDERINSURED_MOTORISTS",
              "UNINSURED_AND_UNDERINSURED_MOTORIST_BODILY_INJURY_LIABILITY",
              "UNINSURED_AND_UNDERINSURED_MOTORIST_PROPERTY_DAMAGE_LIABILITY",
              "UNINSURED_AND_UNDERINSURED_MOTORIST_BODILY_INJURY_AND_PROPERTY_DAMAGE_LIABILITY",
              "TOWING_AND_LABOR",
              "LOAN_OR_LEASE_ASSISTANCE",
              "RIDESHARE_GAP_PROTECTION",
              "MEDICAL_PAYMENTS",
              "ADDITIONAL_LIVING_EXPENSE",
              "FAMILY_LIABILITY_PROTECTION",
              "BUILDING_CODES",
              "EMERGENCY_ROAD_SERVICE",
              "RENTAL_REIMBURSEMENT",
              "CAR_RENTAL_AND_TRAVEL_EXPENSES",
              "MECHANICAL_BREAKDOWN",
              "SUPPLEMENTAL_UNINSURED_AND_UNDERINSURED_MOTORISTS",
              "EMERGENCY_EXPENSE",
              "REPLACEMENT_COST_PERSONAL_EFFECTS",
              "VACATION_LIABILITY_COVERAGE",
              "RV_MEDICAL",
              "EXTENDED_BENEFITS",
              "WAGE_EARNER_DISABILITY_BENEFITS",
              "ESSENTIAL_SERVICES_DISABILITY_BENEFITS",
              "DEATH_BENEFIT",
              "CAR_REPLACEMENT_ASSISTANCE",
              "FULL_TORT",
              "LIMITED_TORT",
              "COMBINED_SINGLE_LIMIT",
              "SPARE_PARTS"
            ]
          },
          "per_day_limit_cents": {
            "type": "integer",
            "description": "Per-day limit, in cents"
          },
          "per_mile_premium_tenth_of_cents": {
            "type": "integer",
            "description": "Premium per mile, in tenth of cents"
          },
          "premium_cents": {
            "type": "integer",
            "description": "Premium paid for coverage item, in cents",
            "example": 18514
          },
          "per_person_limit_cents": {
            "type": "integer",
            "description": "Per-person limit, in cents"
          },
          "per_incident_limit_cents": {
            "type": "integer",
            "description": "Per-incident limit, in cents"
          },
          "deductible_cents": {
            "type": "integer",
            "description": "Deductible, in cents",
            "example": 50000
          },
          "is_declined": {
            "type": "boolean",
            "description": "If true, this coverage item was declined"
          }
        }
      },
      "InsuranceVehicleDriver": {
        "required": [
          "date_of_birth_str",
          "drivers_license",
          "first_name",
          "id",
          "is_excluded",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Driver ID",
            "format": "uuid",
            "example": "8857f648-c6ce-44df-8fa4-78eee16e9bb4"
          },
          "first_name": {
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle name",
            "example": "Joseph"
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "drivers_license": {
            "type": "string",
            "description": "License number",
            "example": "SUP1234012"
          },
          "drivers_license_state": {
            "type": "string",
            "description": "Driver license state",
            "example": "DC"
          },
          "date_of_birth_str": {
            "type": "string",
            "description": "Date of birth",
            "example": "05/03/1988"
          },
          "gender": {
            "type": "string",
            "description": "Gender",
            "enum": [
              "MALE",
              "FEMALE",
              "NONBINARY"
            ]
          },
          "marital_status": {
            "type": "string",
            "description": "Marital status",
            "enum": [
              "SINGLE",
              "MARRIED",
              "DIVORCED",
              "WIDOWED",
              "SEPARATED",
              "CIVIL_UNION"
            ]
          },
          "relationship_to_insured": {
            "type": "string",
            "description": "Relationship to the insured",
            "enum": [
              "INSURED",
              "SPOUSE",
              "BROTHER",
              "SISTER",
              "FATHER",
              "MOTHER",
              "DAUGHTER",
              "SON"
            ]
          },
          "is_excluded": {
            "type": "boolean",
            "description": "Whether or not the driver is excluded from the policy or vehicle"
          }
        }
      },
      "InsurancePolicyVehicle": {
        "title": "Vehicle",
        "required": [
          "id",
          "is_removed",
          "lien_holder",
          "vin"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Vehicle ID",
            "format": "uuid",
            "example": "26a4ce3a-0b9f-4c3d-96c0-1c76529e3b52"
          },
          "year": {
            "type": "integer",
            "description": "Year",
            "example": 2010
          },
          "make": {
            "type": "string",
            "description": "Manufacturer",
            "example": "CHEVROLET"
          },
          "model": {
            "type": "string",
            "description": "Model",
            "example": "Camaro"
          },
          "series": {
            "type": "string",
            "description": "Series",
            "example": "ZL1"
          },
          "series2": {
            "type": "string",
            "description": "Series 2",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Vehicle type",
            "example": "PASSENGER CAR"
          },
          "annual_mileage": {
            "type": "integer",
            "description": "Annual mileage",
            "example": 26000
          },
          "vin": {
            "type": "string",
            "description": "Vehicle identification number",
            "example": "1G1FK1R62J0158884"
          },
          "purchase_date": {
            "type": "string",
            "description": "Purchase date",
            "format": "date-time",
            "example": "2010-10-02T12:00:00.000Z"
          },
          "is_removed": {
            "type": "boolean",
            "description": "Whether or not the vehicle is excluded from the policy"
          },
          "lien_holder": {
            "type": "string",
            "description": "Vehicle lien holder name",
            "example": "Manhattan Bank"
          },
          "garaging_address": {
            "$ref": "#/components/schemas/InsuranceAddress"
          },
          "lien_holder_address": {
            "$ref": "#/components/schemas/InsuranceAddress"
          },
          "coverages": {
            "type": "array",
            "description": "List of vehicle coverages",
            "items": {
              "$ref": "#/components/schemas/InsuranceVehicleCoverage"
            }
          },
          "drivers": {
            "type": "array",
            "description": "List of drivers",
            "items": {
              "$ref": "#/components/schemas/InsuranceVehicleDriver"
            }
          }
        }
      },
      "InsurancePolicyCommercialNamedInsured": {
        "title": "Commercial Named Insured",
        "required": [
          "id",
          "is_primary"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Commercial named insured ID",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "name": {
            "type": "string",
            "description": "Name of the insured",
            "example": "Sample Business LLC"
          },
          "form_of_business": {
            "type": "string",
            "description": "Form of business",
            "enum": [
              "INDIVIDUAL",
              "PARTNERSHIP",
              "LIMITED_LIABILITY_COMPANY",
              "S_CORPORATION",
              "CORPORATION",
              "JOINT_VENTURE",
              "NOT_FOR_PROFIT_ORGANIZATION",
              "TRUST"
            ]
          },
          "gl_code": {
            "type": "string",
            "description": "General liability class code",
            "example": "10010"
          },
          "sic_code": {
            "type": "string",
            "description": "Standard industrial classification code",
            "example": "6411"
          },
          "naics_code": {
            "type": "string",
            "description": "North american industry classification system code",
            "example": "524210"
          },
          "fein": {
            "type": "string",
            "description": "Federal employer identification number",
            "example": "123456789"
          },
          "ssn": {
            "type": "string",
            "description": "Social security number",
            "example": "123456789"
          },
          "is_primary": {
            "type": "boolean",
            "description": "Whether the insured is the primary"
          },
          "address": {
            "$ref": "#/components/schemas/InsuranceAddress"
          }
        }
      },
      "InsurancePolicyNamedInsured": {
        "title": "Named Insured",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Named insured ID",
            "format": "uuid",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the insured"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle name of the insured"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the insured"
          },
          "full_name": {
            "type": "string",
            "description": "Full name of the insured"
          },
          "is_primary": {
            "type": "boolean",
            "description": "Whether the insured is the primary named insured"
          }
        }
      },
      "InsuranceClaim": {
        "title": "Claim",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Claim ID",
            "format": "uuid"
          },
          "dwelling_id": {
            "type": "string",
            "description": "Dwelling ID",
            "format": "uuid"
          },
          "vehicle_id": {
            "type": "string",
            "description": "Cehicle ID",
            "format": "uuid"
          },
          "driver_id": {
            "type": "string",
            "description": "Driver ID",
            "format": "uuid"
          },
          "carrier_claim_identifier": {
            "type": "string",
            "description": "Carrier claim identifier"
          },
          "date_occurred": {
            "type": "string",
            "description": "Date the claim occurred",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "Claim type",
            "enum": [
              "WIND_AND_HAIL_DAMAGE",
              "WATER_DAMAGE_AND_FREEZING",
              "FIRE_AND_LIGHTNING_DAMAGE",
              "OTHER_PROPERTY_DAMAGE",
              "PERSONAL_LIABILITY",
              "POWER_OUTAGE_OR_SURGE",
              "THEFT",
              "CAR_ACCIDENT",
              "WINDSHIELD_DAMAGE",
              "ANIMAL_COLLISION",
              "VANDALISM",
              "WEATHER",
              "EMERGENCY_ROADSIDE_ASSISTANCE",
              "MEDICAL",
              "HURRICANE_DAMAGE",
              "SEWAGE_BACKUP"
            ]
          },
          "status": {
            "type": "string",
            "description": "Status",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          },
          "date_closed": {
            "type": "string",
            "description": "Date the claim was closed",
            "format": "date-time",
            "example": "2022-05-03T00:00:00.000Z"
          },
          "payout_cents": {
            "type": "integer",
            "description": "Payout in cents",
            "example": 180111
          },
          "representative_name": {
            "type": "string",
            "description": "Representative name"
          },
          "representative_phone": {
            "type": "string",
            "description": "Representative phone number"
          },
          "representative_email": {
            "type": "string",
            "description": "Representative email address"
          },
          "address": {
            "$ref": "#/components/schemas/InsuranceAddress"
          }
        }
      },
      "InsurancePolicyLossEvent": {
        "title": "Loss Event",
        "required": [
          "amount_paid_cents",
          "date_of_occurrence",
          "id",
          "is_claim_open",
          "is_subrogation",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Loss event ID",
            "format": "uuid"
          },
          "date_of_occurrence": {
            "type": "string",
            "description": "Date the loss event occurred",
            "format": "date-time",
            "example": "2022-05-03T00:00:00.000Z"
          },
          "date_of_claim": {
            "type": "string",
            "description": "Date of the claim",
            "format": "date-time",
            "example": "2022-05-03T00:00:00.000Z"
          },
          "type": {
            "type": "string",
            "description": "Loss event type",
            "enum": [
              "BURGLARY_AND_THEFT",
              "WATER_DAMAGE_AND_FREEZING_DAMAGE",
              "WIND_AND_HAIL_DAMAGE",
              "FIRE",
              "CUSTOMER_SLIPS_AND_FALLS",
              "CUSTOMER_INJURY_AND_DAMAGE",
              "PERSONAL_AND_ADVERTISING_INJURY",
              "EMPLOYEE_INJURY_OR_ILLNESS",
              "PRODUCT_LIABILITY",
              "STRUCK_BY_AN_OBJECT",
              "REPUTATIONAL_HARM",
              "VEHICULAR_ACCIDENT",
              "WINDSHIELD_DAMAGE",
              "STRIKE_RIOT_OR_CIVIL_COMMOTION",
              "EMERGENCY_ROADSIDE_ASSISTANCE"
            ]
          },
          "amount_paid_cents": {
            "type": "integer",
            "description": "Amount paid in cents",
            "example": 123323
          },
          "amount_reserved_cents": {
            "type": "integer",
            "description": "Amount reserved in cents"
          },
          "is_subrogation": {
            "type": "boolean",
            "description": "Whether subrogation was successful"
          },
          "is_claim_open": {
            "type": "boolean",
            "description": "Whether the claim is open"
          }
        }
      },
      "InsuranceDocument": {
        "title": "Insurance Document",
        "required": [
          "date_added",
          "document_type",
          "id",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Document ID",
            "format": "uuid",
            "example": "55ad7bb6-f5a3-4ebf-91fb-2802391eb261"
          },
          "title": {
            "type": "string",
            "description": "Document title",
            "example": "11-03-2021 - Auto - Automobile Policy Renewal Declarations"
          },
          "document_type": {
            "type": "string",
            "description": "Document type",
            "enum": [
              "INSURANCE_APPLICATION",
              "INSURANCE_BINDER",
              "DECLARATIONS",
              "ENDORSEMENT",
              "INSURANCE_ID_CARD",
              "VERIFICATION_OF_INSURANCE"
            ]
          },
          "date_added": {
            "type": "string",
            "description": "Document effective date",
            "format": "date-time",
            "example": "2022-05-03T00:00:00.000Z"
          },
          "file": {
            "type": "string",
            "description": "File url",
            "example": "https://truv-statements.s3.amazonaws.com/insurance/example_file"
          }
        }
      },
      "InsurancePolicy": {
        "required": [
          "carrier_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Policy ID",
            "format": "uuid",
            "example": "53c5ce0d-fb79-4f1c-bc27-32181b368fc7"
          },
          "policy_type": {
            "type": "string",
            "description": "Policy type",
            "enum": [
              "AUTO",
              "NAMED_NON_OWNER",
              "CLASSIC_CAR",
              "BOAT",
              "CONDO",
              "FARMOWNER",
              "FLOOD",
              "HOMEOWNERS",
              "LANDLORD",
              "LIFE",
              "MOTORCYCLE",
              "TERM_LIFE",
              "UNIVERSAL_LIFE",
              "WHOLE_LIFE",
              "RENTERS",
              "SNOWMOBILE",
              "UMBRELLA",
              "RECREATIONAL_VEHICLE",
              "FIRE",
              "TRAILER",
              "PERSONAL_ARTICLES",
              "EARTHQUAKE",
              "BUSINESS_OWNERS",
              "COMMERCIAL_UMBRELLA",
              "COMMERCIAL_AUTO",
              "COMMERCIAL_FIRE",
              "COMMERCIAL_AGRIBUSINESS",
              "COMMERCIAL_PACKAGE",
              "COMMERCIAL_PROPERTY",
              "COMBO",
              "OFFROAD_VEHICLE",
              "WORKERS_COMPENSATION",
              "MOBILE_HOME",
              "PET",
              "PERSONAL_LIABILITY",
              "GENERAL_LIABILITY",
              "ERRORS_AND_OMISSIONS",
              "INLAND_MARINE",
              "GARAGE",
              "EXCESS_LIABILITY",
              "CYBER",
              "IDENTITY_THEFT",
              "COMMERCIAL_CRIME",
              "ARTISAN_AND_SERVICE_CONTRACTORS",
              "FARM_POLLUTION_LIABILITY",
              "FARM_UMBRELLA",
              "MANAGEMENT_LIABILITY",
              "GOLF_CART",
              "YACHT",
              "PERSONAL_WATERCRAFT",
              "STANDARD_PROPERTY"
            ]
          },
          "name": {
            "type": "string",
            "description": "Human-friendly name",
            "example": "AUTO AU192837"
          },
          "description": {
            "type": "string",
            "description": "Human-friendly description",
            "example": "Effective 11/03/2021 - 11/03/2022"
          },
          "carrier_policy_number": {
            "type": "string",
            "description": "Carrier policy number",
            "example": "HO132654"
          },
          "effective_date": {
            "type": "string",
            "description": "Policy effective date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "expiry_date": {
            "type": "string",
            "description": "Policy expiration date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "renewal_date": {
            "type": "string",
            "description": "Policy renewal date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "canceled_date": {
            "type": "string",
            "description": "Policy canceled date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "total_premium_cents": {
            "type": "integer",
            "description": "Total policy premium in cents",
            "example": 150319
          },
          "deductible_cents": {
            "type": "integer",
            "description": "Commercial policy deductible in cents"
          },
          "carrier_name": {
            "type": "string",
            "description": "Insurance carrier name",
            "example": "progressive"
          },
          "status": {
            "type": "string",
            "description": "Policy status",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "EXPIRED",
              "UNVERIFIED",
              "PENDING_ACTIVATION",
              "PENDING_CANCELLATION",
              "RESCINDED"
            ]
          },
          "paid_in_full": {
            "type": "boolean",
            "description": "Whether the policy is fully paid",
            "example": true
          },
          "dwellings": {
            "type": "array",
            "description": "List of dwellings",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyDwelling"
            }
          },
          "vehicles": {
            "type": "array",
            "description": "List of vehicles",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyVehicle"
            }
          },
          "commercial_named_insureds": {
            "type": "array",
            "description": "List of commercial named insureds",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyCommercialNamedInsured"
            }
          },
          "named_insureds": {
            "type": "array",
            "description": "List of named insured objects",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyNamedInsured"
            }
          },
          "claims": {
            "type": "array",
            "description": "List of claims",
            "items": {
              "$ref": "#/components/schemas/InsuranceClaim"
            }
          },
          "loss_events": {
            "type": "array",
            "description": "List of loss events",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyLossEvent"
            }
          },
          "documents": {
            "type": "array",
            "description": "List of documents",
            "items": {
              "$ref": "#/components/schemas/InsuranceDocument"
            }
          }
        },
        "description": "Policy object"
      },
      "InsuranceDriver": {
        "required": [
          "date_of_birth_str",
          "drivers_license",
          "first_name",
          "id",
          "last_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Driver ID",
            "format": "uuid",
            "example": "8857f648-c6ce-44df-8fa4-78eee16e9bb4"
          },
          "first_name": {
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "middle_name": {
            "type": "string",
            "description": "Middle name",
            "example": "Joseph"
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "drivers_license": {
            "type": "string",
            "description": "License number",
            "example": "SUP1234012"
          },
          "drivers_license_state": {
            "type": "string",
            "description": "Driver license state",
            "example": "DC"
          },
          "date_of_birth_str": {
            "type": "string",
            "description": "Date of birth",
            "example": "05/03/1988"
          },
          "gender": {
            "type": "string",
            "description": "Gender",
            "enum": [
              "MALE",
              "FEMALE",
              "NONBINARY"
            ]
          },
          "marital_status": {
            "type": "string",
            "description": "Marital status",
            "enum": [
              "SINGLE",
              "MARRIED",
              "DIVORCED",
              "WIDOWED",
              "SEPARATED",
              "CIVIL_UNION"
            ]
          },
          "relationship_to_insured": {
            "type": "string",
            "description": "Relationship to the insured",
            "enum": [
              "INSURED",
              "SPOUSE",
              "BROTHER",
              "SISTER",
              "FATHER",
              "MOTHER",
              "DAUGHTER",
              "SON"
            ]
          }
        }
      },
      "InsuranceDrivingRecord": {
        "title": "Driving Record",
        "required": [
          "id",
          "incident_date"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Driving record ID",
            "format": "uuid",
            "example": "da9d46ad-8ddb-4b4b-bc7e-7a381a738f7d"
          },
          "driver_id": {
            "type": "string",
            "description": "Driver ID",
            "format": "uuid",
            "example": "da9d46ad-8ddb-4b4b-bc7e-7a381a738f7c"
          },
          "incident_date": {
            "type": "string",
            "description": "Date the incident occurred",
            "format": "date-time",
            "example": "2021-04-23T00:00:00.000Z"
          },
          "incident_type": {
            "type": "string",
            "description": "Incident type",
            "example": "ACCIDENT",
            "enum": [
              "ACCIDENT",
              "VIOLATION"
            ]
          },
          "violation_type": {
            "type": "string",
            "description": "Violation type, \nonly exists if incident_type = VIOLATION",
            "nullable": true,
            "enum": [
              "MOVING",
              "SPEEDING",
              "RECKLESS_DRIVING",
              "DRIVING_WITHOUT_VALID_LICENSE",
              "HIT_AND_RUN",
              "DISTRACTED_DRIVING",
              "DRIVING_UNDER_INFLUENCE",
              "FAILURE_TO_YIELD",
              "TAILGATING",
              "OPEN_CONTAINER_OF_ALCOHOL"
            ]
          },
          "is_at_fault": {
            "type": "boolean",
            "description": "Whether the driver was at fault",
            "nullable": true
          }
        }
      },
      "InsuranceAgent": {
        "title": "Driving Record",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "AgentInfo record ID",
            "format": "uuid",
            "example": "da9d46ad-8ddb-4b4b-bc7e-7a381a738f7d"
          },
          "agency_name": {
            "type": "string",
            "description": "Name of the agency (agency_name or agent_full_name required)"
          },
          "agent_full_name": {
            "type": "string",
            "description": "Name of the agent (agency_name or agent_full_name required)"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number for the agent/agency"
          },
          "email": {
            "type": "string",
            "description": "Email for the agent/agency",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "policy_ids": {
            "type": "array",
            "description": "List of Policy ID's associated to the agent",
            "readOnly": true,
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "address": {
            "$ref": "#/components/schemas/InsuranceAddress"
          }
        }
      },
      "InsurancePull": {
        "title": "Insurance",
        "type": "object",
        "properties": {
          "policies": {
            "type": "array",
            "description": "List of policies",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsurancePolicy"
            }
          },
          "drivers": {
            "type": "array",
            "description": "List of drivers",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceDriver"
            }
          },
          "addresses": {
            "type": "array",
            "description": "List of addresses",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceAddress"
            }
          },
          "driving_records": {
            "type": "array",
            "description": "List of driving records",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceDrivingRecord"
            }
          },
          "agents": {
            "type": "array",
            "description": "List of agents",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceAgent"
            }
          }
        }
      },
      "InsuranceReport": {
        "required": [
          "access_token",
          "id",
          "identity",
          "insurance",
          "provider",
          "status",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "status": {
            "type": "string",
            "description": "[Request status](https://docs.truv.com/reference/task-livecycle)",
            "example": "new"
          },
          "finished_at": {
            "type": "string",
            "description": "Time when report was finished",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information passed to the Truv Bridge from a partner",
            "example": "user123456"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "insurance": {
            "$ref": "#/components/schemas/InsurancePull"
          },
          "provider": {
            "type": "string",
            "description": "Insurance Provider ID",
            "example": "progressive"
          },
          "identity": {
            "$ref": "#/components/schemas/Profile"
          },
          "pdf_report": {
            "type": "string",
            "description": "Insurance report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          }
        },
        "description": "Data for the insurance report"
      },
      "PLL": {
        "required": [
          "access_token",
          "completed_at",
          "deposit_details",
          "id",
          "status",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "status": {
            "type": "string",
            "description": "[Request status](https://docs.truv.com/reference/task-livecycle)",
            "example": "new"
          },
          "finished_at": {
            "type": "string",
            "description": "Time when report was finished",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Time when report was completed **(Deprecated, invalid datetime format)**",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information passed to the Truv Bridge from a partner",
            "example": "user123456"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "deposit_details": {
            "required": [
              "account_number",
              "account_type",
              "bank_name",
              "deposit_type",
              "routing_number"
            ],
            "type": "object",
            "properties": {
              "account_number": {
                "maxLength": 20,
                "minLength": 4,
                "type": "string",
                "description": "Account number",
                "example": "16002600"
              },
              "account_type": {
                "type": "string",
                "description": "\nAccount type:\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                "enum": [
                  "checking",
                  "savings"
                ]
              },
              "routing_number": {
                "maxLength": 12,
                "minLength": 8,
                "type": "string",
                "description": "Routing number",
                "example": "123456789"
              },
              "bank_name": {
                "type": "string",
                "description": "Bank name",
                "example": "TD Bank"
              },
              "deposit_type": {
                "type": "string",
                "description": "Deposit type: `amount` - fixed amount from the paycheck",
                "example": "amount"
              },
              "deposit_value": {
                "type": "string",
                "description": "Deposit value",
                "example": "50.00"
              }
            },
            "description": "Bank account info. Used for Direct deposit switching and Paycheck linked lending"
          },
          "initial_accounts": {
            "type": "array",
            "description": "List of initial accounts",
            "items": {
              "required": [
                "account_number",
                "routing_number"
              ],
              "type": "object",
              "properties": {
                "account_number": {
                  "maxLength": 20,
                  "minLength": 4,
                  "pattern": "[\\d*]+",
                  "type": "string",
                  "description": "Account number. Only digits and * are allowed.",
                  "example": "16001234"
                },
                "routing_number": {
                  "maxLength": 12,
                  "minLength": 8,
                  "pattern": "[\\d*]+",
                  "type": "string",
                  "description": "Routing number. Only digits and * are allowed.",
                  "example": "55999876"
                },
                "account_type": {
                  "type": "string",
                  "description": "\nAccount type.\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                  "enum": [
                    "checking",
                    "savings"
                  ]
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name"
                },
                "bank_name": {
                  "type": "string",
                  "description": "Bank name.",
                  "example": "TD Bank"
                },
                "deposit_type": {
                  "type": "string",
                  "description": "\nDeposit type.\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n",
                  "example": "amount",
                  "enum": [
                    "entire",
                    "percent",
                    "amount"
                  ]
                },
                "deposit_value": {
                  "type": "string",
                  "description": "Deposit value.",
                  "example": "50.00"
                }
              },
              "description": "Initial Account"
            }
          },
          "pdf_report": {
            "type": "string",
            "description": "URL that points to the PDF file containing the report",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          }
        },
        "description": "Data for the PLL report"
      },
      "AccountBalances": {
        "type": "object",
        "properties": {
          "currency_code": {
            "type": "string",
            "description": "Currency",
            "readOnly": true,
            "example": "USD"
          },
          "balance": {
            "type": "string",
            "description": "Balance amount",
            "format": "decimal",
            "readOnly": true,
            "example": "100.00"
          },
          "available_balance": {
            "type": "string",
            "description": "Available balance amount",
            "format": "decimal",
            "readOnly": true,
            "example": "50.99"
          },
          "credit_limit": {
            "type": "string",
            "description": "Credit limit",
            "format": "decimal",
            "readOnly": true,
            "example": "200.00"
          }
        }
      },
      "Account": {
        "required": [
          "balances",
          "mask",
          "subtype",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "readOnly": true,
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the account was created in Truv",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the account was updated last time in Truv",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "type": {
            "type": "string",
            "description": "The account’s type",
            "nullable": true,
            "readOnly": true,
            "example": "CHECKING",
            "enum": [
              "CHECKING",
              "SAVINGS",
              "LOAN",
              "CREDIT_CARD",
              "INVESTMENT",
              "LINE_OF_CREDIT",
              "MORTGAGE",
              "PROPERTY",
              "CASH",
              "INSURANCE",
              "PREPAID",
              "CHECKING_LINE_OF_CREDIT"
            ]
          },
          "subtype": {
            "type": "string",
            "description": "The account’s subtype",
            "nullable": true,
            "readOnly": true,
            "example": "MONEY_MARKET",
            "enum": [
              "MONEY_MARKET",
              "CERTIFICATE_OF_DEPOSIT",
              "AUTO",
              "STUDENT",
              "SMALL_BUSINESS",
              "PERSONAL",
              "PERSONAL_WITH_COLLATERAL",
              "HOME_EQUITY",
              "BOAT",
              "POWERSPORTS",
              "RV",
              "HELOC",
              "PLAN_401_K",
              "PLAN_403_B",
              "PLAN_529",
              "IRA",
              "ROLLOVER_IRA",
              "ROTH_IRA",
              "TAXABLE",
              "NON_TAXABLE",
              "BROKERAGE",
              "TRUST",
              "UNIFORM_GIFTS_TO_MINORS_ACT",
              "PLAN_457",
              "PENSION",
              "EMPLOYEE_STOCK_OWNERSHIP_PLAN",
              "SIMPLIFIED_EMPLOYEE_PENSION",
              "SIMPLE_IRA",
              "PLAN_ROTH_401_K",
              "FIXED_ANNUITY",
              "VARIABLE_ANNUITY",
              "HSA",
              "TAX_FREE_SAVINGS_ACCOUNT",
              "INDIVIDUAL",
              "REGISTERED_RETIREMENT_INCOME_FUND",
              "CASH_MANAGEMENT_ACCOUNT",
              "EMPLOYEE_STOCK_PURCHASE_PLAN",
              "REGISTERED_EDUCATION_SAVINGS_PLAN",
              "PROFIT_SHARING_PLAN",
              "UNIFORM_TRANSFER_TO_MINORS_ACT",
              "PLAN_401_A",
              "SARSEP_IRA",
              "FIXED_ANNUITY_TRADITIONAL_IRA",
              "VARIABLE_ANNUITY_TRADITIONAL_IRA",
              "SEPP_IRA",
              "INHERITED_TRADITIONAL_IRA",
              "FIXED_ANNUITY_ROTH_IRA",
              "VARIABLE_ANNUITY_ROTH_IRA",
              "INHERITED_ROTH_IRA",
              "COVERDELL",
              "ADVISORY_ACCOUNT",
              "BROKERAGE_MARGIN",
              "CHARITABLE_GIFT_ACCOUNT",
              "CHURCH_ACCOUNT",
              "CONSERVATORSHIP",
              "CUSTODIAL",
              "DEFINED_BENEFIT_PLAN",
              "DEFINED_CONTRIBUTION_PLAN",
              "EDUCATIONAL",
              "ESTATE",
              "EXECUTOR",
              "GROUP_RETIREMENT_SAVINGS_PLAN",
              "GUARANTEED_INVESTMENT_CERTIFICATE",
              "HRA",
              "INDEXED_ANNUITY",
              "INVESTMENT_CLUB",
              "IRREVOCABLE_TRUST",
              "JOINT_TENANTS_BY_ENTIRITY",
              "JOINT_TENANTS_COMMUNITY_PROPERTY",
              "JOINT_TENANTS_IN_COMMON",
              "JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP",
              "KEOUGH_PLAN",
              "LIFE_INCOME_FUND",
              "LIVING_TRUST",
              "LOCKED_IN_RETIREMENT_ACCOUNT",
              "LOCKED_IN_RETIREMENT_INVESTMENT_FUND",
              "LOCKED_IN_RETIREMENT_SAVINGS_ACCOUNT",
              "MONEY_PURCHASE_PLAN",
              "PARTNERSHIP",
              "PLAN_409_A",
              "PLAN_ROTH_403_B",
              "REGISTERED_DISABILITY_SAVINGS_PLAN",
              "REGISTERED_LOCKED_IN_SAVINGS_PLAN",
              "REGISTERED_PENSION_PLAN",
              "REGISTERED_RETIREMENT_SAVINGS_PLAN",
              "REVOCABLE_TRUST",
              "ROTH_CONVERSION",
              "SOLE_PROPRIETORSHIP",
              "SPOUSAL_IRA",
              "SPOUSAL_ROTH_IRA",
              "TESTAMENTARY_TRUST",
              "THRIFT_SAVINGS_PLAN",
              "INHERITED_ANNUITY",
              "CORPORATE_ACCOUNT",
              "LIMITED_LIABILITY_ACCOUNT",
              "VEHICLE_INSURANCE",
              "DISABILITY",
              "HEALTH",
              "LONG_TERM_CARE",
              "PROPERTY_AND_CASUALTY",
              "UNIVERSAL_LIFE",
              "TERM_LIFE",
              "WHOLE_LIFE",
              "ACCIDENTAL_DEATH_AND_DISMEMBERMENT",
              "VARIABLE_UNIVERSAL_LIFE",
              "ROTH",
              "ROLLOVER",
              "OTHER"
            ]
          },
          "mask": {
            "type": "string",
            "description": "Last 4 digits of account number",
            "readOnly": true,
            "example": "6789"
          },
          "nickname": {
            "type": "string",
            "description": "Description of account",
            "readOnly": true,
            "example": "My account"
          },
          "balances": {
            "$ref": "#/components/schemas/AccountBalances"
          }
        }
      },
      "DDSDetail": {
        "required": [
          "access_token",
          "completed_at",
          "deposit_details",
          "id",
          "provider",
          "status",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "status": {
            "type": "string",
            "description": "[Request status](https://docs.truv.com/reference/task-livecycle)",
            "example": "new"
          },
          "finished_at": {
            "type": "string",
            "description": "Time when report was finished",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Time when report was completed **(Deprecated, invalid datetime format)**",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information passed to the Truv Bridge from a partner",
            "example": "user123456"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "deposit_details": {
            "required": [
              "account_number",
              "account_type",
              "bank_name",
              "deposit_type",
              "routing_number"
            ],
            "type": "object",
            "properties": {
              "account_number": {
                "maxLength": 20,
                "minLength": 4,
                "type": "string",
                "description": "Account number",
                "example": "16002600"
              },
              "account_type": {
                "type": "string",
                "description": "\nAccount type:\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                "enum": [
                  "checking",
                  "savings"
                ]
              },
              "routing_number": {
                "maxLength": 12,
                "minLength": 8,
                "type": "string",
                "description": "Routing number",
                "example": "123456789"
              },
              "bank_name": {
                "type": "string",
                "description": "Bank name",
                "example": "TD Bank"
              },
              "deposit_type": {
                "type": "string",
                "description": "\nDeposit type:\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n\n",
                "enum": [
                  "entire",
                  "percent",
                  "amount"
                ]
              },
              "deposit_value": {
                "type": "string",
                "description": "Deposit value",
                "example": "50.00"
              }
            },
            "description": "Bank account info. Used for Direct deposit switching and Paycheck linked lending"
          },
          "initial_accounts": {
            "type": "array",
            "description": "List of initial accounts",
            "items": {
              "required": [
                "account_number",
                "routing_number"
              ],
              "type": "object",
              "properties": {
                "account_number": {
                  "maxLength": 20,
                  "minLength": 4,
                  "pattern": "[\\d*]+",
                  "type": "string",
                  "description": "Account number. Only digits and * are allowed.",
                  "example": "16001234"
                },
                "routing_number": {
                  "maxLength": 12,
                  "minLength": 8,
                  "pattern": "[\\d*]+",
                  "type": "string",
                  "description": "Routing number. Only digits and * are allowed.",
                  "example": "55999876"
                },
                "account_type": {
                  "type": "string",
                  "description": "\nAccount type.\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                  "enum": [
                    "checking",
                    "savings"
                  ]
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name"
                },
                "bank_name": {
                  "type": "string",
                  "description": "Bank name.",
                  "example": "TD Bank"
                },
                "deposit_type": {
                  "type": "string",
                  "description": "\nDeposit type.\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n",
                  "example": "amount",
                  "enum": [
                    "entire",
                    "percent",
                    "amount"
                  ]
                },
                "deposit_value": {
                  "type": "string",
                  "description": "Deposit value.",
                  "example": "50.00"
                }
              },
              "description": "Initial Account"
            }
          },
          "pdf_report": {
            "type": "string",
            "description": "URL that points to the PDF file containing the report",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          },
          "employer": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "maxLength": 64,
                "type": "string",
                "description": "Employer ID.",
                "readOnly": true,
                "example": "meta"
              },
              "name": {
                "maxLength": 128,
                "type": "string",
                "description": "Employer name.",
                "readOnly": true,
                "example": "Meta"
              },
              "logo_url": {
                "type": "string",
                "description": "Employer logo image."
              }
            },
            "description": "Employer"
          },
          "provider": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "maxLength": 64,
                "type": "string",
                "description": "Data provider ID.",
                "readOnly": true,
                "example": "adp"
              },
              "name": {
                "maxLength": 128,
                "type": "string",
                "description": "Data provider name.",
                "readOnly": true,
                "example": "ADP"
              },
              "logo_url": {
                "type": "string",
                "description": "Data provider logo image."
              }
            },
            "description": "Payroll provider"
          }
        },
        "description": "Data for the DDS report"
      },
      "Document": {
        "required": [
          "filename"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "id",
            "type": "string",
            "description": "Document ID",
            "readOnly": true,
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "type": {
            "title": "type",
            "type": "string",
            "description": "Document type",
            "readOnly": true,
            "example": "W2",
            "enum": [
              "PAYSTUB",
              "W2",
              "F1099",
              "F1040",
              "INSURANCE_HOME_POLICY",
              "INSURANCE_AUTO_POLICY"
            ]
          },
          "subtype": {
            "title": "subtype",
            "type": "string",
            "description": "Document subtype",
            "nullable": true,
            "readOnly": true,
            "enum": [
              "F1099_DIV",
              "F1099_G",
              "F1099_INT",
              "F1099_MISC",
              "F1099_NEC",
              "F1099_R",
              "F_SSA1099"
            ]
          },
          "file": {
            "title": "file",
            "type": "string",
            "description": "Document file link. The file could be absent or partially uploaded.",
            "format": "uri",
            "readOnly": true,
            "example": "https://citadelid-resources.s3.us-west-2.amazonaws.com/doc_upload/most.recent.paystub.pdf"
          },
          "filename": {
            "title": "filename",
            "type": "string",
            "description": "Document file name",
            "readOnly": true,
            "example": "most.recent.paystub.pdf"
          },
          "mimetype": {
            "title": "mimetype",
            "type": "string",
            "description": "Document mimetype",
            "readOnly": true,
            "example": "application/pdf"
          },
          "created_at": {
            "title": "created_at",
            "type": "string",
            "description": "Date when a document was uploaded",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "title": "updated_at",
            "type": "string",
            "description": "Date when a document was updated",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "EmploymentLinked": {
        "required": [
          "company",
          "id",
          "start_date"
        ],
        "type": "object",
        "properties": {
          "income": {
            "type": "string",
            "description": "Income amount not including commission or bonuses",
            "format": "decimal",
            "example": "70000.00"
          },
          "income_unit": {
            "type": "string",
            "description": "\nThe pay interval the income field refers to:\n\n* `YEARLY` - Annual income,\n* `MONTHLY` - Monthly income,\n* `WEEKLY` - Weekly income,\n* `DAILY` - Daily income,\n* `HOURLY` - Hourly income\n\n",
            "enum": [
              "YEARLY",
              "MONTHLY",
              "WEEKLY",
              "DAILY",
              "HOURLY"
            ]
          },
          "pay_rate": {
            "type": "string",
            "description": "Payment rate per pay cycle",
            "format": "decimal",
            "example": "6500.00"
          },
          "pay_frequency": {
            "type": "string",
            "description": "\nPay frequency:\n\n* `M` - Monthly,\n* `SM` - Semi-Monthly,\n* `W` - Weekly,\n* `BW` - Bi-Weekly,\n* `A` - Annually,\n* `SA` - Semiannually,\n* `C` - Commission\n\n",
            "enum": [
              "M",
              "SM",
              "W",
              "BW",
              "A",
              "SA",
              "C"
            ]
          },
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the employment is still active",
            "example": false
          },
          "job_title": {
            "type": "string",
            "description": "Employee's job title",
            "example": "PR associate"
          },
          "job_type": {
            "type": "string",
            "description": "\nEmployee's job type:\n\n* `F` - Full Time,\n* `P` - Part Time,\n* `S` - Seasonal,\n* `D` - Daily (per diem),\n* `C` - Contract\n\n",
            "enum": [
              "F",
              "P",
              "S",
              "D",
              "C"
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Employee's hire date",
            "format": "date",
            "example": "2018-01-01T00:00:00.000Z"
          },
          "original_hire_date": {
            "type": "string",
            "description": "Original hire date",
            "format": "date",
            "example": "2017-06-21T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Employee's end date",
            "format": "date"
          },
          "external_last_updated": {
            "type": "string",
            "description": "Indicates the date when employment data was last updated on the Payroll Provider side",
            "format": "date"
          },
          "derived_fields": {
            "type": "array",
            "description": "Array of derived fields",
            "example": [
              "is_active"
            ],
            "items": {
              "type": "string"
            }
          },
          "missing_data_fields": {
            "type": "array",
            "description": "List of the data fields which are missing in the payroll API response",
            "example": [
              "w2s"
            ],
            "items": {
              "type": "string"
            }
          },
          "manager_name": {
            "type": "string",
            "description": "Supervisor's name",
            "example": "Jenny McDouglas"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          }
        },
        "description": "Employment data"
      },
      "BankIncomeReportRequest": {
        "type": "object",
        "properties": {
          "days_requested": {
            "maximum": 183,
            "minimum": 60,
            "type": "integer",
            "description": "The specific duration in days for which the report is requested to be generated.",
            "format": "int32",
            "example": 60,
            "default": 60
          }
        }
      },
      "BankIncomeAccount": {
        "required": [
          "created_at",
          "id",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the account.",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when the account was created in Truv",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time when the account was updated last time in Truv",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "The parent type of the account, e.g., CHECKING or SAVINGS.",
            "readOnly": true,
            "example": "CHECKING"
          },
          "subtype": {
            "maxLength": 255,
            "type": "string",
            "description": "The account’s subtype, e.g., PLAN_401_K, MONEY_MARKET, or HOME_EQUITY.",
            "readOnly": true,
            "example": "MONEY_MARKET"
          },
          "mask": {
            "maxLength": 64,
            "type": "string",
            "description": "The masked banking account number associated with a particular account.",
            "readOnly": true
          },
          "nickname": {
            "maxLength": 255,
            "type": "string",
            "description": "An alternate name for the account.",
            "readOnly": true,
            "example": "My account"
          },
          "owners": {
            "type": "array",
            "description": "List of owners for account.",
            "items": {
              "$ref": "#/components/schemas/AssetsOwner"
            }
          }
        }
      },
      "HistoricalSummaryTransaction": {
        "required": [
          "amount",
          "check_number",
          "date",
          "description",
          "iso_currency_code",
          "pending",
          "transaction_id"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "title": "Amount",
            "type": "string",
            "format": "decimal"
          },
          "iso_currency_code": {
            "title": "Iso currency code",
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date"
          },
          "description": {
            "title": "Description",
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "pending": {
            "title": "Pending",
            "type": "boolean"
          },
          "transaction_id": {
            "title": "Transaction id",
            "minLength": 1,
            "type": "string"
          },
          "check_number": {
            "title": "Check number",
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "HistoricalSummary": {
        "required": [
          "end_date",
          "iso_currency_code",
          "start_date",
          "total_amount",
          "transactions"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "title": "Start date",
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "end_date": {
            "title": "End date",
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "total_amount": {
            "title": "Total amount",
            "type": "string",
            "format": "decimal",
            "nullable": true
          },
          "iso_currency_code": {
            "title": "Iso currency code",
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoricalSummaryTransaction"
            }
          }
        },
        "nullable": true,
        "x-nullable": true
      },
      "BankIncomeSource": {
        "required": [
          "account_id",
          "end_date",
          "historical_summary",
          "income_category",
          "income_description",
          "iso_currency_code",
          "pay_frequency",
          "start_date",
          "total_amount",
          "transaction_count"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Minimum of all dates within the specific income sources in the user's bank account for days requested by the client.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Maximum of all dates within the specific income sources in the user’s bank account for days requested by the client.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          },
          "account_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the account.",
            "format": "uuid",
            "readOnly": true
          },
          "income_description": {
            "type": "string",
            "description": "Description for the underlying income transactions.",
            "readOnly": true,
            "example": "Paycheck"
          },
          "income_category": {
            "type": "string",
            "description": "The income category.",
            "readOnly": true,
            "example": "Income: Paycheck"
          },
          "pay_frequency": {
            "type": "string",
            "description": "\nPay frequency:\n\n* `M` - Monthly,\n* `SM` - Semi-Monthly,\n* `W` - Weekly,\n* `BW` - Bi-Weekly,\n* `A` - Annually,\n* `SA` - Semiannually,\n* `C` - Commission\n\n",
            "readOnly": true,
            "example": "SM",
            "enum": [
              "M",
              "SM",
              "W",
              "BW",
              "A",
              "SA",
              "C"
            ]
          },
          "total_amount": {
            "type": "string",
            "description": "Total amount of earnings for the income source of the user in the summary.",
            "format": "decimal",
            "readOnly": true,
            "example": "200.31"
          },
          "iso_currency_code": {
            "type": "string",
            "description": "The ISO 4217 currency code of the amount or balance.",
            "readOnly": true,
            "example": "USD"
          },
          "transaction_count": {
            "type": "integer",
            "description": "Number of income transactions per end user for this source.",
            "readOnly": true,
            "example": 1
          },
          "historical_summary": {
            "type": "array",
            "description": "List of bank statements for each period.",
            "items": {
              "type": "object",
              "properties": {
                "start_date": {
                  "type": "string",
                  "description": "The start date of the period covered in this monthly summary. This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month.",
                  "format": "date",
                  "readOnly": true,
                  "example": "2022-05-04T00:00:00.000Z"
                },
                "end_date": {
                  "type": "string",
                  "description": "The end date of the period included in this monthly summary. This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month.",
                  "format": "date",
                  "readOnly": true,
                  "example": "2022-05-04T00:00:00.000Z"
                },
                "total_amount": {
                  "type": "string",
                  "description": "Total amount of earnings for the income source of the user for the month in the summary.",
                  "format": "decimal",
                  "readOnly": true,
                  "example": "200.31"
                },
                "iso_currency_code": {
                  "type": "string",
                  "description": "The ISO 4217 currency code of the amount or balance.",
                  "readOnly": true,
                  "example": "USD"
                },
                "transactions": {
                  "type": "array",
                  "description": "List of transactions",
                  "items": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "string",
                        "description": "The settled value of the transaction, denominated in the transactions's currency as stated in iso_currency_code. Negative values when money moves out of the account; positive othervise.",
                        "format": "decimal",
                        "readOnly": true,
                        "example": "200.31"
                      },
                      "iso_currency_code": {
                        "type": "string",
                        "description": "The ISO 4217 currency code of the amount or balance.",
                        "readOnly": true,
                        "example": "USD"
                      },
                      "date": {
                        "type": "string",
                        "description": "The date that the transaction occurred.",
                        "format": "date",
                        "readOnly": true,
                        "example": "2022-05-04T00:00:00.000Z"
                      },
                      "check_number": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The check number for the transaction.",
                        "readOnly": true
                      },
                      "description": {
                        "type": "string",
                        "description": "A human-readable transaction description.",
                        "readOnly": true
                      },
                      "pending": {
                        "type": "boolean",
                        "description": "True if status of the transaction is PENDING or not set.",
                        "readOnly": true
                      },
                      "transaction_id": {
                        "maxLength": 32,
                        "type": "string",
                        "description": "Unique identifier of the transaction.",
                        "format": "uuid",
                        "readOnly": true
                      }
                    }
                  }
                }
              }
            }
          },
          "avg_deposit_amount": {
            "type": "number",
            "description": "The average amount received per deposit, typically net of taxes and deductions.",
            "readOnly": true
          },
          "avg_gross_deposit_amount": {
            "type": "number",
            "description": "The average gross payment per deposit. Gross pay is predicted based on the transaction data.",
            "readOnly": true
          }
        }
      },
      "BankIncomeSummary": {
        "required": [
          "end_date",
          "income_categories_count",
          "income_sources_count",
          "income_transactions_count",
          "iso_currency_code",
          "start_date",
          "total_amount"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Minimum of all transaction dates among all income sources in the user's bank accounts for days requested by the client.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Maximum of all transaction dates among all income sources in the user's bank accounts for days requested by the client.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          },
          "income_sources_count": {
            "type": "integer",
            "description": "Number of income sources per end user.",
            "readOnly": true,
            "example": 2
          },
          "income_categories_count": {
            "type": "integer",
            "description": "Number of income categories per end user.",
            "readOnly": true,
            "example": 1
          },
          "income_transactions_count": {
            "type": "integer",
            "description": "Number of income transactions per end user.",
            "readOnly": true,
            "example": 17
          },
          "total_amount": {
            "type": "string",
            "description": "Total amount of earnings for the income of the user in summary.",
            "format": "decimal",
            "readOnly": true,
            "example": "200.31"
          },
          "iso_currency_code": {
            "type": "string",
            "description": "The ISO 4217 currency code of the amount or balance.",
            "readOnly": true,
            "example": "USD"
          }
        }
      },
      "BankIncomeReport": {
        "required": [
          "accounts",
          "completed_at",
          "days_requested",
          "income",
          "provider",
          "status",
          "summary"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the report.",
            "readOnly": true,
            "enum": [
              "success",
              "processing"
            ]
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp when the report was completed.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "days_requested": {
            "type": "integer",
            "description": "The specific duration in days for which the report is requested to be generated.",
            "format": "int32",
            "readOnly": true,
            "example": 60
          },
          "tracking_info": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional optional identifier passed by user.",
            "readOnly": true
          },
          "provider": {
            "maxLength": 64,
            "type": "string",
            "description": "Data provider ID.",
            "readOnly": true
          },
          "access_token": {
            "maxLength": 64,
            "type": "string",
            "description": "Access token of the existing link.",
            "format": "uuid",
            "readOnly": true
          },
          "companies": {
            "type": "array",
            "description": "Names of the companies person works for.",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "accounts": {
            "type": "array",
            "description": "List of bank accounts",
            "items": {
              "$ref": "#/components/schemas/BankIncomeAccount"
            }
          },
          "income": {
            "type": "array",
            "description": "List of bank income sources",
            "items": {
              "$ref": "#/components/schemas/BankIncomeSource"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/BankIncomeSummary"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          }
        }
      },
      "AutoPolicy": {
        "required": [
          "carrier_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Policy ID",
            "format": "uuid",
            "example": "53c5ce0d-fb79-4f1c-bc27-32181b368fc7"
          },
          "policy_type": {
            "type": "string",
            "description": "Policy type",
            "enum": [
              "AUTO",
              "MOTORCYCLE",
              "RECREATIONAL_VEHICLE",
              "TRAILER",
              "COMMERCIAL_AUTO",
              "OFFROAD_VEHICLE",
              "NAMED_NON_OWNER",
              "CLASSIC_CAR"
            ]
          },
          "name": {
            "type": "string",
            "description": "Human-friendly name",
            "example": "AUTO AU192837"
          },
          "description": {
            "type": "string",
            "description": "Human-friendly description",
            "example": "Effective 11/03/2021 - 11/03/2022"
          },
          "carrier_policy_number": {
            "type": "string",
            "description": "Carrier policy number",
            "example": "HO132654"
          },
          "effective_date": {
            "type": "string",
            "description": "Policy effective date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "expiry_date": {
            "type": "string",
            "description": "Policy expiration date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "renewal_date": {
            "type": "string",
            "description": "Policy renewal date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "canceled_date": {
            "type": "string",
            "description": "Policy canceled date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "total_premium_cents": {
            "type": "integer",
            "description": "Total policy premium in cents",
            "example": 150319
          },
          "deductible_cents": {
            "type": "integer",
            "description": "Commercial policy deductible in cents"
          },
          "carrier_name": {
            "type": "string",
            "description": "Insurance carrier name",
            "example": "progressive"
          },
          "status": {
            "type": "string",
            "description": "Policy status",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "EXPIRED",
              "UNVERIFIED",
              "PENDING_ACTIVATION",
              "PENDING_CANCELLATION",
              "RESCINDED"
            ]
          },
          "paid_in_full": {
            "type": "boolean",
            "description": "Whether the policy is fully paid",
            "example": true
          },
          "commercial_named_insureds": {
            "type": "array",
            "description": "List of commercial named insureds",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyCommercialNamedInsured"
            }
          },
          "named_insureds": {
            "type": "array",
            "description": "List of named insured objects",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyNamedInsured"
            }
          },
          "claims": {
            "type": "array",
            "description": "List of claims",
            "items": {
              "$ref": "#/components/schemas/InsuranceClaim"
            }
          },
          "loss_events": {
            "type": "array",
            "description": "List of loss events",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyLossEvent"
            }
          },
          "documents": {
            "type": "array",
            "description": "List of documents",
            "items": {
              "$ref": "#/components/schemas/InsuranceDocument"
            }
          },
          "vehicles": {
            "type": "array",
            "description": "List of vehicles",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyVehicle"
            }
          }
        },
        "description": "Policy object"
      },
      "AutoPull": {
        "title": "Insurance",
        "type": "object",
        "properties": {
          "policies": {
            "type": "array",
            "description": "List of policies",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AutoPolicy"
            }
          },
          "addresses": {
            "type": "array",
            "description": "List of addresses",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceAddress"
            }
          },
          "agents": {
            "type": "array",
            "description": "List of agents",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceAgent"
            }
          },
          "drivers": {
            "type": "array",
            "description": "List of drivers",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceDriver"
            }
          },
          "driving_records": {
            "type": "array",
            "description": "List of driving records",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceDrivingRecord"
            }
          }
        }
      },
      "AutoInsuranceReport": {
        "required": [
          "access_token",
          "id",
          "identity",
          "insurance",
          "provider",
          "status",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "status": {
            "type": "string",
            "description": "[Request status](https://docs.truv.com/reference/task-livecycle)",
            "example": "new"
          },
          "finished_at": {
            "type": "string",
            "description": "Time when report was finished",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information passed to the Truv Bridge from a partner",
            "example": "user123456"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "insurance": {
            "$ref": "#/components/schemas/AutoPull"
          },
          "provider": {
            "type": "string",
            "description": "Insurance Provider ID",
            "example": "progressive"
          },
          "identity": {
            "$ref": "#/components/schemas/Profile"
          },
          "pdf_report": {
            "type": "string",
            "description": "Insurance report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          }
        },
        "description": "Data for the insurance report"
      },
      "HomePolicy": {
        "required": [
          "carrier_name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Policy ID",
            "format": "uuid",
            "example": "53c5ce0d-fb79-4f1c-bc27-32181b368fc7"
          },
          "policy_type": {
            "type": "string",
            "description": "Policy type",
            "enum": [
              "CONDO",
              "HOMEOWNERS",
              "LANDLORD",
              "RENTERS",
              "MOBILE_HOME"
            ]
          },
          "name": {
            "type": "string",
            "description": "Human-friendly name",
            "example": "AUTO AU192837"
          },
          "description": {
            "type": "string",
            "description": "Human-friendly description",
            "example": "Effective 11/03/2021 - 11/03/2022"
          },
          "carrier_policy_number": {
            "type": "string",
            "description": "Carrier policy number",
            "example": "HO132654"
          },
          "effective_date": {
            "type": "string",
            "description": "Policy effective date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "expiry_date": {
            "type": "string",
            "description": "Policy expiration date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "renewal_date": {
            "type": "string",
            "description": "Policy renewal date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "canceled_date": {
            "type": "string",
            "description": "Policy canceled date",
            "format": "date-time",
            "example": "2021-11-03T00:00:00.000Z"
          },
          "total_premium_cents": {
            "type": "integer",
            "description": "Total policy premium in cents",
            "example": 150319
          },
          "deductible_cents": {
            "type": "integer",
            "description": "Commercial policy deductible in cents"
          },
          "carrier_name": {
            "type": "string",
            "description": "Insurance carrier name",
            "example": "progressive"
          },
          "status": {
            "type": "string",
            "description": "Policy status",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "EXPIRED",
              "UNVERIFIED",
              "PENDING_ACTIVATION",
              "PENDING_CANCELLATION",
              "RESCINDED"
            ]
          },
          "paid_in_full": {
            "type": "boolean",
            "description": "Whether the policy is fully paid",
            "example": true
          },
          "commercial_named_insureds": {
            "type": "array",
            "description": "List of commercial named insureds",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyCommercialNamedInsured"
            }
          },
          "named_insureds": {
            "type": "array",
            "description": "List of named insured objects",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyNamedInsured"
            }
          },
          "claims": {
            "type": "array",
            "description": "List of claims",
            "items": {
              "$ref": "#/components/schemas/InsuranceClaim"
            }
          },
          "loss_events": {
            "type": "array",
            "description": "List of loss events",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyLossEvent"
            }
          },
          "documents": {
            "type": "array",
            "description": "List of documents",
            "items": {
              "$ref": "#/components/schemas/InsuranceDocument"
            }
          },
          "dwellings": {
            "type": "array",
            "description": "List of dwellings",
            "items": {
              "$ref": "#/components/schemas/InsurancePolicyDwelling"
            }
          }
        },
        "description": "Policy object"
      },
      "HomePull": {
        "title": "Insurance",
        "type": "object",
        "properties": {
          "policies": {
            "type": "array",
            "description": "List of policies",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/HomePolicy"
            }
          },
          "addresses": {
            "type": "array",
            "description": "List of addresses",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceAddress"
            }
          },
          "agents": {
            "type": "array",
            "description": "List of agents",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/InsuranceAgent"
            }
          }
        }
      },
      "HomeInsuranceReport": {
        "required": [
          "access_token",
          "id",
          "identity",
          "insurance",
          "provider",
          "status",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "status": {
            "type": "string",
            "description": "[Request status](https://docs.truv.com/reference/task-livecycle)",
            "example": "new"
          },
          "finished_at": {
            "type": "string",
            "description": "Time when report was finished",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information passed to the Truv Bridge from a partner",
            "example": "user123456"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "insurance": {
            "$ref": "#/components/schemas/HomePull"
          },
          "provider": {
            "type": "string",
            "description": "Insurance Provider ID",
            "example": "progressive"
          },
          "identity": {
            "$ref": "#/components/schemas/Profile"
          },
          "pdf_report": {
            "type": "string",
            "description": "Insurance report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          }
        },
        "description": "Data for the insurance report"
      },
      "PLLDetail": {
        "required": [
          "access_token",
          "completed_at",
          "deposit_details",
          "id",
          "provider",
          "status",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "status": {
            "type": "string",
            "description": "[Request status](https://docs.truv.com/reference/task-livecycle)",
            "example": "new"
          },
          "finished_at": {
            "type": "string",
            "description": "Time when report was finished",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Time when report was completed **(Deprecated, invalid datetime format)**",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "tracking_info": {
            "type": "string",
            "description": "Any information passed to the Truv Bridge from a partner",
            "example": "user123456"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "deposit_details": {
            "required": [
              "account_number",
              "account_type",
              "bank_name",
              "deposit_type",
              "routing_number"
            ],
            "type": "object",
            "properties": {
              "account_number": {
                "maxLength": 20,
                "minLength": 4,
                "type": "string",
                "description": "Account number",
                "example": "16002600"
              },
              "account_type": {
                "type": "string",
                "description": "\nAccount type:\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                "enum": [
                  "checking",
                  "savings"
                ]
              },
              "routing_number": {
                "maxLength": 12,
                "minLength": 8,
                "type": "string",
                "description": "Routing number",
                "example": "123456789"
              },
              "bank_name": {
                "type": "string",
                "description": "Bank name",
                "example": "TD Bank"
              },
              "deposit_type": {
                "type": "string",
                "description": "Deposit type: `amount` - fixed amount from the paycheck",
                "example": "amount"
              },
              "deposit_value": {
                "type": "string",
                "description": "Deposit value",
                "example": "50.00"
              }
            },
            "description": "Bank account info. Used for Direct deposit switching and Paycheck linked lending"
          },
          "initial_accounts": {
            "type": "array",
            "description": "List of initial accounts",
            "items": {
              "required": [
                "account_number",
                "routing_number"
              ],
              "type": "object",
              "properties": {
                "account_number": {
                  "maxLength": 20,
                  "minLength": 4,
                  "pattern": "[\\d*]+",
                  "type": "string",
                  "description": "Account number. Only digits and * are allowed.",
                  "example": "16001234"
                },
                "routing_number": {
                  "maxLength": 12,
                  "minLength": 8,
                  "pattern": "[\\d*]+",
                  "type": "string",
                  "description": "Routing number. Only digits and * are allowed.",
                  "example": "55999876"
                },
                "account_type": {
                  "type": "string",
                  "description": "\nAccount type.\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                  "enum": [
                    "checking",
                    "savings"
                  ]
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name"
                },
                "bank_name": {
                  "type": "string",
                  "description": "Bank name.",
                  "example": "TD Bank"
                },
                "deposit_type": {
                  "type": "string",
                  "description": "\nDeposit type.\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n",
                  "example": "amount",
                  "enum": [
                    "entire",
                    "percent",
                    "amount"
                  ]
                },
                "deposit_value": {
                  "type": "string",
                  "description": "Deposit value.",
                  "example": "50.00"
                }
              },
              "description": "Initial Account"
            }
          },
          "pdf_report": {
            "type": "string",
            "description": "URL that points to the PDF file containing the report",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          },
          "employer": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "maxLength": 64,
                "type": "string",
                "description": "Employer ID.",
                "readOnly": true,
                "example": "meta"
              },
              "name": {
                "maxLength": 128,
                "type": "string",
                "description": "Employer name.",
                "readOnly": true,
                "example": "Meta"
              },
              "logo_url": {
                "type": "string",
                "description": "Employer logo image."
              }
            },
            "description": "Employer"
          },
          "provider": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "maxLength": 64,
                "type": "string",
                "description": "Data provider ID.",
                "readOnly": true,
                "example": "adp"
              },
              "name": {
                "maxLength": 128,
                "type": "string",
                "description": "Data provider name.",
                "readOnly": true,
                "example": "ADP"
              },
              "logo_url": {
                "type": "string",
                "description": "Data provider logo image."
              }
            },
            "description": "Payroll provider"
          }
        },
        "description": "Data for the PLL report"
      },
      "TimeEntry": {
        "title": "TimeEntry",
        "required": [
          "end",
          "entry_date",
          "external_id",
          "start"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "TimeEntry ID",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "external_id": {
            "type": "string",
            "description": "TimeEntry External ID",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "created_at": {
            "type": "string",
            "description": "TimeEntry creation timestamp (ISO 8601)",
            "example": "2022-06-07T15:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "TimeEntry update timestamp (ISO 8601)",
            "example": "2022-06-07T15:00:00.000Z"
          },
          "entry_date": {
            "type": "string",
            "description": "Entry date of the event in the time tracking system.",
            "example": "2022-06-07T00:00:00.000Z"
          },
          "start": {
            "type": "string",
            "description": "Datetime when the work started (ISO 8601)",
            "example": "2022-06-07T15:00:00.000Z"
          },
          "end": {
            "type": "string",
            "description": "Datetime when the work ended (ISO 8601)",
            "example": "2022-06-07T16:00:00.000Z"
          }
        },
        "description": "TimeEntry represents a period of time when a person worked"
      },
      "Shift": {
        "title": "Shift",
        "required": [
          "end_date",
          "external_id",
          "start_date",
          "time_entries",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Shift ID",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "external_id": {
            "type": "string",
            "description": "Shift External ID",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "created_at": {
            "type": "string",
            "description": "Shift creation timestamp (ISO 8601)",
            "example": "2022-06-07T15:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Shift update timestamp (ISO 8601)",
            "example": "2022-06-07T15:00:00.000Z"
          },
          "start_date": {
            "type": "string",
            "description": "Start date of the Shift. ISO 8601 format.",
            "example": "2022-06-07T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "End date of the Shift. ISO 8601 format.",
            "example": "2022-06-07T00:00:00.000Z"
          },
          "time_entries": {
            "type": "array",
            "description": "List of TimeEntries related to the Shift",
            "items": {
              "$ref": "#/components/schemas/TimeEntry"
            }
          },
          "earnings": {
            "type": "array",
            "description": "Aggregated earnings for the Shift",
            "example": [
              {
                "name": "Regular",
                "amount": "1935.77",
                "category": "regular",
                "rate": null,
                "units": null
              },
              {
                "name": "Overtime",
                "amount": "60.58",
                "category": "overtime",
                "rate": "30.29",
                "units": "2"
              }
            ],
            "items": {
              "required": [
                "amount",
                "category",
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of earnings",
                  "example": "Regular"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of earnings",
                  "format": "decimal",
                  "example": "1935.77"
                },
                "category": {
                  "type": "string",
                  "description": "Category of earnings",
                  "example": "regular",
                  "enum": [
                    "regular",
                    "overtime",
                    "bonus",
                    "commission",
                    "other_pay"
                  ]
                },
                "rate": {
                  "type": "string",
                  "description": "Rate of earnings",
                  "format": "decimal"
                },
                "units": {
                  "type": "string",
                  "description": "Units of earnings",
                  "format": "decimal"
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "Type of the shift",
            "example": "shift",
            "enum": [
              "other",
              "delivery",
              "rideshare",
              "shift"
            ]
          }
        },
        "description": "Shift represents a period of time when person was planned to work"
      },
      "ShiftsListResponse": {
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of the results in total",
            "example": 100
          },
          "next": {
            "type": "string",
            "description": "Link to the next page",
            "example": "https://prod.truv.com/v1/link/0000000000/shifts?page=1"
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous page",
            "example": "https://prod.truv.com/v1/link/0000000000/shifts?page=1"
          },
          "results": {
            "type": "array",
            "description": "List of the Shifts",
            "items": {
              "$ref": "#/components/schemas/Shift"
            }
          }
        },
        "description": "Shift List"
      },
      "LinkStatement": {
        "required": [
          "pay_date"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "check_number": {
            "type": "string",
            "description": "External ID of pay stub from the payroll provider",
            "format": "string",
            "example": "29205182"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay Date",
            "format": "date",
            "example": "2018-05-15T00:00:00.000Z"
          },
          "net_pay": {
            "type": "string",
            "description": "Net pay",
            "format": "decimal",
            "example": "11500.32"
          },
          "net_pay_ytd": {
            "type": "string",
            "description": "Net pay year to date",
            "format": "decimal",
            "example": "31980.64"
          },
          "gross_pay": {
            "type": "string",
            "description": "Gross pay",
            "format": "decimal",
            "example": "13900.11"
          },
          "gross_pay_ytd": {
            "type": "string",
            "description": "Gross pay year to date",
            "format": "decimal",
            "example": "49200.00"
          },
          "bonus": {
            "type": "string",
            "description": "Bonus",
            "format": "decimal",
            "example": "100.00"
          },
          "commission": {
            "type": "string",
            "description": "Commission",
            "format": "decimal",
            "example": "12000.00"
          },
          "hours": {
            "type": "string",
            "description": "Work hours during a pay period",
            "format": "decimal",
            "example": "40.00"
          },
          "basis_of_pay": {
            "type": "string",
            "description": "\nBasis of pay:\n\n* `S` - Salary,\n* `H` - Hourly,\n* `D` - Daily,\n* `W` - Weekly,\n* `M` - Monthly,\n* `C` - Contract,\n\n",
            "example": "S",
            "enum": [
              "S",
              "H",
              "D",
              "W",
              "M"
            ]
          },
          "period_start": {
            "type": "string",
            "description": "Period start",
            "format": "date",
            "example": "2018-05-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Period end",
            "format": "date",
            "example": "2018-05-15T00:00:00.000Z"
          },
          "regular": {
            "type": "string",
            "description": "Regular pay",
            "format": "decimal",
            "example": "1695.11"
          },
          "regular_ytd": {
            "type": "string",
            "description": "Regular salary year to date",
            "format": "decimal",
            "example": "23000.00"
          },
          "other_pay_ytd": {
            "type": "string",
            "description": "All other pays year to date",
            "format": "decimal",
            "example": "700.00"
          },
          "bonus_ytd": {
            "type": "string",
            "description": "Bonus year to date",
            "format": "decimal",
            "example": "1000.00"
          },
          "commission_ytd": {
            "type": "string",
            "description": "Commission year to date",
            "format": "decimal",
            "example": "24000.00"
          },
          "overtime": {
            "type": "string",
            "description": "Overtime pay",
            "format": "decimal",
            "example": "45.00"
          },
          "overtime_ytd": {
            "type": "string",
            "description": "Overtime pay year to date",
            "format": "decimal",
            "example": "500.00"
          },
          "other_pay": {
            "type": "string",
            "description": "All other pays",
            "format": "decimal",
            "example": "60.00"
          },
          "earnings": {
            "type": "array",
            "description": "Earnings for this pay cycle by type",
            "example": [
              {
                "name": "Regular",
                "amount": "1935.77",
                "category": "regular",
                "rate": null,
                "units": null
              },
              {
                "name": "Overtime",
                "amount": "60.58",
                "category": "overtime",
                "rate": "30.29",
                "units": "2"
              }
            ],
            "items": {
              "required": [
                "amount",
                "category",
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of earnings",
                  "example": "Regular"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of earnings",
                  "format": "decimal",
                  "example": "1935.77"
                },
                "category": {
                  "type": "string",
                  "description": "Category of earnings",
                  "example": "regular",
                  "enum": [
                    "regular",
                    "overtime",
                    "bonus",
                    "commission",
                    "other_pay"
                  ]
                },
                "rate": {
                  "type": "string",
                  "description": "Rate of earnings",
                  "format": "decimal"
                },
                "units": {
                  "type": "string",
                  "description": "Units of earnings",
                  "format": "decimal"
                }
              }
            }
          },
          "earnings_ytd": {
            "type": "array",
            "description": "Earnings year to date by type",
            "example": [
              {
                "name": "Regular",
                "amount": "1935.77",
                "category": "regular",
                "rate": null,
                "units": null
              },
              {
                "name": "Overtime",
                "amount": "60.58",
                "category": "overtime",
                "rate": "30.29",
                "units": "2"
              }
            ],
            "items": {
              "required": [
                "amount",
                "category",
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of earnings",
                  "example": "Regular"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of earnings",
                  "format": "decimal",
                  "example": "1935.77"
                },
                "category": {
                  "type": "string",
                  "description": "Category of earnings",
                  "example": "regular",
                  "enum": [
                    "regular",
                    "overtime",
                    "bonus",
                    "commission",
                    "other_pay"
                  ]
                },
                "rate": {
                  "type": "string",
                  "description": "Rate of earnings",
                  "format": "decimal"
                },
                "units": {
                  "type": "string",
                  "description": "Units of earnings",
                  "format": "decimal"
                }
              }
            }
          },
          "deductions": {
            "type": "array",
            "description": "Deductions for this pay cycle by type",
            "example": [
              {
                "name": "Social Security Tax",
                "amount": "127.01",
                "category": "socialsec"
              },
              {
                "name": "VA State Income Tax",
                "amount": "46.23",
                "category": "state"
              },
              {
                "name": "Medicare Tax",
                "amount": "29.7",
                "category": "medicare"
              }
            ],
            "items": {
              "required": [
                "amount",
                "category",
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the deduction",
                  "example": "Social Security Tax"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of the deduction",
                  "format": "decimal",
                  "example": "127.01"
                },
                "category": {
                  "type": "string",
                  "description": "Category of the deduction",
                  "example": "socialsec",
                  "enum": [
                    "memo",
                    "medicare",
                    "retirement",
                    "socialsec",
                    "federal",
                    "state",
                    "benefit",
                    "garnishment",
                    "local",
                    "other"
                  ]
                }
              }
            }
          },
          "deductions_ytd": {
            "type": "array",
            "description": "Deductions year to date by type",
            "example": [
              {
                "name": "Social Security Tax",
                "amount": "127.01",
                "category": "socialsec"
              },
              {
                "name": "VA State Income Tax",
                "amount": "46.23",
                "category": "state"
              },
              {
                "name": "Medicare Tax",
                "amount": "29.7",
                "category": "medicare"
              }
            ],
            "items": {
              "required": [
                "amount",
                "category",
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the deduction",
                  "example": "Social Security Tax"
                },
                "amount": {
                  "type": "string",
                  "description": "Amount of the deduction",
                  "format": "decimal",
                  "example": "127.01"
                },
                "category": {
                  "type": "string",
                  "description": "Category of the deduction",
                  "example": "socialsec",
                  "enum": [
                    "memo",
                    "medicare",
                    "retirement",
                    "socialsec",
                    "federal",
                    "state",
                    "benefit",
                    "garnishment",
                    "local",
                    "other"
                  ]
                }
              }
            }
          },
          "md5sum": {
            "type": "string",
            "description": "MD5 hash value computed based on the file content",
            "format": "string",
            "example": "03639d6a6624f69a54a88ea90bd25e9d"
          },
          "file": {
            "type": "string",
            "description": "Link to a pay stub file (format is specified in the content-type)",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/paystub_sample.pdf"
          },
          "derived_fields": {
            "type": "array",
            "description": "Array of derived fields",
            "example": [
              "basis_of_pay"
            ],
            "items": {
              "type": "string"
            }
          },
          "missing_data_fields": {
            "type": "array",
            "description": "List of the data fields which are missing in the payroll API response",
            "example": [
              "earnings_ytd"
            ],
            "items": {
              "type": "string"
            }
          },
          "end_of_year": {
            "type": "integer",
            "description": "Final paystub for the year",
            "example": 2023
          }
        },
        "description": "Pay stub data"
      },
      "StatementsListResponse": {
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of the results in total",
            "example": 100
          },
          "next": {
            "type": "string",
            "description": "Link to the next page",
            "example": "https://prod.truv.com/v1/link/0000000000/statements?page=1"
          },
          "previous": {
            "type": "string",
            "description": "Link to the previous page",
            "example": "https://prod.truv.com/v1/link/0000000000/statements?page=1"
          },
          "results": {
            "type": "array",
            "description": "List of the Pay Statements",
            "items": {
              "$ref": "#/components/schemas/Statement"
            }
          }
        },
        "description": "Statements List"
      },
      "TaxDocument": {
        "required": [
          "document_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "id",
            "type": "string",
            "description": "Tax document ID",
            "readOnly": true,
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "document_type": {
            "title": "document_type",
            "type": "string",
            "description": "Tax document type",
            "readOnly": true,
            "example": "W2",
            "enum": [
              "W2",
              "F1099",
              "F1040"
            ]
          },
          "document_subtype": {
            "title": "document_subtype",
            "type": "string",
            "description": "Tax document subtype",
            "nullable": true,
            "readOnly": true,
            "enum": [
              "F1099_DIV",
              "F1099_G",
              "F1099_INT",
              "F1099_MISC",
              "F1099_NEC",
              "F1099_R",
              "F_SSA1099"
            ]
          },
          "file": {
            "title": "file",
            "type": "string",
            "description": "Tax document file link",
            "format": "uri",
            "readOnly": true,
            "example": "https://citadelid-resources.s3.us-west-2.amazonaws.com/files_examples/w2.pdf"
          },
          "md5sum": {
            "title": "md5sum",
            "type": "string",
            "description": "Tax document md5sum",
            "readOnly": true,
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "year": {
            "title": "year",
            "type": "integer",
            "description": "Tax document year",
            "readOnly": true,
            "example": 2022
          }
        }
      },
      "TaxDocumentRetrieve": {
        "required": [
          "document_type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "id",
            "type": "string",
            "description": "Tax document ID",
            "readOnly": true,
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "document_type": {
            "title": "document_type",
            "type": "string",
            "description": "Tax document type",
            "readOnly": true,
            "example": "W2",
            "enum": [
              "W2",
              "F1099",
              "F1040"
            ]
          },
          "document_subtype": {
            "title": "document_subtype",
            "type": "string",
            "description": "Tax document subtype",
            "nullable": true,
            "readOnly": true,
            "enum": [
              "F1099_DIV",
              "F1099_G",
              "F1099_INT",
              "F1099_MISC",
              "F1099_NEC",
              "F1099_R",
              "F_SSA1099"
            ]
          },
          "file": {
            "title": "file",
            "type": "string",
            "description": "Tax document file link",
            "format": "uri",
            "readOnly": true,
            "example": "https://citadelid-resources.s3.us-west-2.amazonaws.com/files_examples/w2.pdf"
          },
          "md5sum": {
            "title": "md5sum",
            "type": "string",
            "description": "Tax document md5sum",
            "readOnly": true,
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "year": {
            "title": "year",
            "type": "integer",
            "description": "Tax document year",
            "readOnly": true,
            "example": 2022
          },
          "fields": {
            "title": "fields",
            "type": "object",
            "properties": {},
            "description": "Tax document fields. Set of fields depends on the document type and subtype.",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "Location": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude",
            "format": "float",
            "readOnly": true,
            "example": 40.73061
          },
          "longitude": {
            "type": "number",
            "description": "Longitude",
            "format": "float",
            "readOnly": true,
            "example": -73.93524
          }
        }
      },
      "Transaction": {
        "required": [
          "description",
          "external_id",
          "location",
          "status",
          "transacted_at",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "readOnly": true,
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the transaction was created in Truv",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the transaction was updated last time in Truv",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "account_id": {
            "type": "string",
            "description": "Unique account ID",
            "readOnly": true,
            "example": "68a7e80942ce4ad58a93f70ce411549a"
          },
          "external_id": {
            "type": "string",
            "description": "External ID",
            "readOnly": true,
            "example": "external_key_243901"
          },
          "amount": {
            "type": "string",
            "format": "decimal",
            "readOnly": true,
            "example": "100.00"
          },
          "currency_code": {
            "type": "string",
            "description": "Currency",
            "readOnly": true,
            "example": "USD"
          },
          "check_number": {
            "type": "string",
            "description": "Check number",
            "readOnly": true,
            "example": "123456"
          },
          "categories": {
            "type": "array",
            "description": "Categories",
            "example": [
              "Transfer"
            ],
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of transaction",
            "readOnly": true,
            "example": "Some transaction"
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "example": "POSTED",
            "enum": [
              "POSTED",
              "PENDING"
            ]
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "DEBIT",
            "enum": [
              "DEBIT",
              "CREDIT"
            ]
          },
          "posted_at": {
            "type": "string",
            "description": "Timestamp when funds were moved",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "transacted_at": {
            "type": "string",
            "description": "Timestamp when the transaction occurred",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "memo": {
            "type": "string",
            "description": "Additional descriptive information about the transaction",
            "readOnly": true,
            "example": ""
          },
          "merchant_category_code": {
            "type": "number",
            "description": "The ISO 18245 category code for the transaction",
            "readOnly": true,
            "example": 5967
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "TransactionsResponse": {
        "required": [
          "accounts",
          "count",
          "next",
          "previous",
          "transactions"
        ],
        "type": "object",
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "next": {
            "title": "Next",
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "title": "Previous",
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "CompanyAddressRequest": {
        "required": [
          "city",
          "state",
          "street",
          "zip"
        ],
        "type": "object",
        "properties": {
          "street": {
            "title": "Street",
            "minLength": 1,
            "type": "string"
          },
          "city": {
            "title": "City",
            "minLength": 1,
            "type": "string"
          },
          "state": {
            "title": "State",
            "minLength": 1,
            "type": "string"
          },
          "zip": {
            "title": "Zip",
            "minLength": 1,
            "type": "string"
          }
        },
        "nullable": true,
        "x-nullable": true
      },
      "BaseAccount": {
        "required": [
          "account_number",
          "routing_number"
        ],
        "type": "object",
        "properties": {
          "deposit_value": {
            "title": "Deposit value",
            "type": "string",
            "format": "decimal"
          },
          "deposit_type": {
            "title": "Deposit type",
            "type": "string",
            "enum": [
              "entire",
              "percent",
              "amount"
            ]
          },
          "account_type": {
            "title": "Account type",
            "type": "string",
            "enum": [
              "checking",
              "savings"
            ]
          },
          "bank_name": {
            "title": "Bank name",
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "bank_address": {
            "title": "Bank address",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "account_number": {
            "title": "Account number",
            "maxLength": 20,
            "minLength": 4,
            "pattern": "\\d+",
            "type": "string"
          },
          "routing_number": {
            "title": "Routing number",
            "maxLength": 12,
            "minLength": 8,
            "pattern": "\\d+",
            "type": "string"
          },
          "action": {
            "title": "Action",
            "type": "string",
            "default": "create",
            "enum": [
              "create",
              "delete",
              "update"
            ]
          }
        }
      },
      "EmployerCreate": {
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Job start date",
            "format": "date",
            "example": "2019-08-24T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Job end date",
            "format": "date",
            "example": "2019-11-27T00:00:00.000Z"
          },
          "company_name": {
            "type": "string",
            "description": "Company name",
            "example": "Facebook Demo"
          },
          "company_address": {
            "required": [
              "city",
              "state",
              "street",
              "zip"
            ],
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "description": "Company location street",
                "example": "1 Hacker Way"
              },
              "city": {
                "type": "string",
                "description": "Company location city",
                "example": "Menlo Park"
              },
              "state": {
                "type": "string",
                "description": "Company location state",
                "example": "CA"
              },
              "zip": {
                "type": "string",
                "description": "Company location zip code",
                "example": "94025"
              }
            },
            "description": "Company address"
          },
          "company_domain": {
            "type": "string",
            "description": "Company website domain",
            "example": "facebook.com"
          },
          "suborder_number": {
            "type": "string",
            "description": "External ID",
            "example": "133982343355"
          },
          "account": {
            "required": [
              "account_number",
              "bank_name",
              "routing_number"
            ],
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "description": "\nAction to be performed on the account.\n\n`update` and `delete` actions are only available for the accounts that were previously created.\n",
                "enum": [
                  "create",
                  "update",
                  "delete"
                ]
              },
              "account_number": {
                "maxLength": 20,
                "minLength": 4,
                "type": "string",
                "description": "Account number. Only digits are allowed, leading zeros will be preserved.",
                "example": "16002600"
              },
              "routing_number": {
                "maxLength": 12,
                "minLength": 8,
                "type": "string",
                "description": "Routing number. Only digits are allowed, leading zeros will be preserved.",
                "example": "123456789"
              },
              "account_type": {
                "type": "string",
                "description": "\nAccount type. Required for the `create` action.\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                "enum": [
                  "checking",
                  "savings"
                ]
              },
              "bank_name": {
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "description": "Bank name. Required for the `create` action.",
                "example": "TD Bank"
              },
              "bank_address": {
                "maxLength": 1024,
                "minLength": 1,
                "type": "string",
                "description": "Bank address.",
                "example": "123 Main St, New York, NY 10001"
              },
              "deposit_type": {
                "type": "string",
                "description": "\nDeposit type.\nFor `pll` product type is required and must be set to `amount`.\nFor `deposit_switch` product type is optional and can be set to any supported value.\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n",
                "enum": [
                  "entire",
                  "percent",
                  "amount"
                ]
              },
              "deposit_value": {
                "type": "string",
                "description": "\nDeposit value.\n\nPossible values for this field depend on the `deposit_type` field:\n`percent` - this field must be set to a whole number between 0 and 100.\n`amount` - this field must be set to a number between 0 and 9999.99.\n`entire` - this field must be set to `null` or be not provided.\n",
                "example": "50.00"
              }
            },
            "description": "Bank account info. Used for Direct deposit switching and Paycheck linked lending"
          },
          "company_mapping_id": {
            "type": "string",
            "description": "Company mapping ID",
            "example": "self_employed"
          },
          "data_sources": {
            "type": "array",
            "description": "List of data sources for the provided product_type. Leave blank to apply default values.",
            "items": {
              "type": "string",
              "enum": [
                "payroll",
                "docs",
                "insurance",
                "financial_accounts",
                "tax"
              ]
            }
          }
        }
      },
      "InsuranceCreate": {
        "type": "object",
        "properties": {
          "provider_id": {
            "type": "string",
            "description": "ID of a insurance provider",
            "example": "geico"
          }
        },
        "description": "Insurance verification additional parameters"
      },
      "Manager": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "type": "string",
            "description": "Email of the order manager",
            "example": "john.doe@example.com"
          },
          "name": {
            "maxLength": 600,
            "type": "string",
            "description": "Name of the order manager",
            "example": "John Doe"
          }
        }
      },
      "Loan": {
        "required": [
          "loan_number"
        ],
        "type": "object",
        "properties": {
          "loan_number": {
            "maxLength": 128,
            "type": "string",
            "description": "Loan identifier",
            "example": "MUUT220700012"
          },
          "originator_name": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the loan originator",
            "nullable": true,
            "example": "John Doe"
          },
          "originator_email": {
            "maxLength": 255,
            "type": "string",
            "description": "Email of the loan originator",
            "format": "email",
            "nullable": true,
            "example": "john@example.com"
          },
          "loan_processor_name": {
            "maxLength": 255,
            "type": "string",
            "description": "Name of the loan processor",
            "nullable": true,
            "example": "John Doe"
          },
          "loan_processor_email": {
            "maxLength": 255,
            "type": "string",
            "description": "Email of the loan processor",
            "format": "email",
            "nullable": true,
            "example": "john@doe.com"
          },
          "external_id": {
            "type": "string",
            "description": "External loan ID",
            "example": "c505e0f1-b413-4fdc-853f-c87e7d2cc4a5"
          }
        }
      },
      "AssetsRequestLargeDepositThreshold": {
        "type": "object",
        "properties": {
          "fixed_amount": {
            "maximum": 100000,
            "minimum": 10,
            "type": "integer",
            "description": "Amount that must be met or exceeded for deposits to be marked as large, when OTHER loan type is specified."
          },
          "sales_price": {
            "maximum": 1000000,
            "minimum": 10,
            "type": "number",
            "description": "Amount that must be met or exceeded for deposits to be marked as large, when FHA loan type is specified."
          },
          "qualifying_monthly_income": {
            "maximum": 100000,
            "minimum": 10,
            "type": "number",
            "description": "Amount that must be met or exceeded for deposits to be marked as large, when CONVENTIONAL loan type is specified."
          },
          "loan_type": {
            "type": "string",
            "description": "Loan type.",
            "default": "OTHER",
            "enum": [
              "FHA",
              "CONVENTIONAL",
              "OTHER"
            ]
          }
        }
      },
      "CreateVoaRequest": {
        "type": "object",
        "properties": {
          "days_requested": {
            "maximum": 730,
            "minimum": 30,
            "type": "integer",
            "description": "The specific duration in days for which the report is requested to be generated."
          },
          "large_deposit_threshold": {
            "type": "object",
            "properties": {
              "fixed_amount": {
                "maximum": 100000,
                "minimum": 10,
                "type": "integer",
                "description": "Amount that must be met or exceeded for deposits to be marked as large, when OTHER loan type is specified."
              },
              "sales_price": {
                "maximum": 1000000,
                "minimum": 10,
                "type": "number",
                "description": "Amount that must be met or exceeded for deposits to be marked as large, when FHA loan type is specified."
              },
              "qualifying_monthly_income": {
                "maximum": 100000,
                "minimum": 10,
                "type": "number",
                "description": "Amount that must be met or exceeded for deposits to be marked as large, when CONVENTIONAL loan type is specified."
              },
              "loan_type": {
                "type": "string",
                "description": "Loan type.",
                "enum": [
                  "FHA",
                  "CONVENTIONAL",
                  "OTHER"
                ]
              }
            }
          },
          "request_extended_history": {
            "type": "boolean",
            "description": "A boolean parameter to enable extended transaction/statement history. Need to be set for days_requested more than 60 days"
          }
        }
      },
      "CreateReports": {
        "type": "object",
        "properties": {
          "voa": {
            "$ref": "#/components/schemas/CreateVoaRequest"
          }
        }
      },
      "Order": {
        "required": [
          "first_name",
          "last_name",
          "products"
        ],
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "description": "Types of products selected for the order",
            "items": {
              "type": "string",
              "default": "employment",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets"
              ]
            }
          },
          "first_name": {
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "ssn": {
            "type": "string",
            "description": "User's SSN. Should be 4 or 9 digits length.",
            "example": "222233333"
          },
          "email": {
            "type": "string",
            "description": "Subject's email",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "Subject's phone number",
            "example": "4155554193"
          },
          "custom_field": {
            "type": "string",
            "description": "Client provided custom field. Must be enabled in the dashboard customisation section."
          },
          "order_number": {
            "type": "string",
            "description": "External ID",
            "example": "1534332"
          },
          "employers": {
            "type": "array",
            "description": "List of employers",
            "items": {
              "$ref": "#/components/schemas/EmployerCreate"
            }
          },
          "insurance": {
            "$ref": "#/components/schemas/InsuranceCreate"
          },
          "manager": {
            "required": [
              "email"
            ],
            "type": "object",
            "properties": {
              "email": {
                "maxLength": 255,
                "type": "string",
                "description": "Email of the order manager",
                "example": "john.doe@example.com"
              },
              "name": {
                "maxLength": 600,
                "type": "string",
                "description": "Name of the order manager",
                "example": "John Doe"
              }
            },
            "description": "Associate your order manager info with an order."
          },
          "loan": {
            "$ref": "#/components/schemas/Loan"
          },
          "reports": {
            "$ref": "#/components/schemas/CreateReports"
          },
          "template_id": {
            "type": "string",
            "description": "ID of the template",
            "example": "9b96606355b94e8abff8ed8d75aa2027"
          },
          "cc_emails": {
            "maxItems": 15,
            "type": "array",
            "description": "A list of email addresses that will receive carbon copies (CC) of order status updates.",
            "items": {
              "type": "string",
              "format": "email"
            }
          }
        }
      },
      "EmployerResponse": {
        "required": [
          "created_at",
          "employments",
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "ad9f14440d624ec3b0f66e81e44518c7"
          },
          "product_type": {
            "type": "string",
            "description": "Type of the product.",
            "example": "income",
            "enum": [
              "income",
              "employment",
              "deposit_switch",
              "pll"
            ]
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "example": "pending",
            "enum": [
              "pending",
              "sent",
              "completed",
              "error",
              "canceled",
              "expired",
              "no_data",
              "skipped"
            ]
          },
          "suborder_number": {
            "type": "string",
            "description": "External ID",
            "example": "133982343355"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when order was created",
            "example": "2021-04-21T22:12:59.346Z"
          },
          "bridge_token": {
            "type": "string",
            "description": "UUID value of bridge token",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "link_id": {
            "type": "string",
            "description": "Link ID for the connected account",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "access_token": {
            "type": "string",
            "description": "Access token to perform data refresh",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "pdf_report": {
            "type": "string",
            "description": "Verification report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: payroll - payroll provider parsing, docs - user uploaded documents, insurance - insurance data, financial_accounts - bank data, tax - tax documents, scoring_attributes - transactions scoring attributes report.",
            "example": "payroll",
            "enum": [
              "payroll",
              "docs",
              "tax",
              "financial_accounts"
            ]
          },
          "provider": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Provider id",
                "example": "truv_api"
              },
              "name": {
                "type": "string",
                "description": "Provider name",
                "example": "Sandbox Provider"
              },
              "logo_url": {
                "type": "string",
                "description": "Provider logo url",
                "format": "uri",
                "example": "https://citadelid-resources.s3.us-west-2.amazonaws.com/providers/truv-blue.svg"
              }
            },
            "description": "Payroll or insurance provider"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "start_date": {
            "type": "string",
            "description": "Employment start date",
            "example": "2019-08-24T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Employment start date",
            "example": "2019-11-27T00:00:00.000Z"
          },
          "company_name": {
            "type": "string",
            "description": "Company name",
            "example": "Facebook Demo"
          },
          "company_address": {
            "required": [
              "city",
              "state",
              "street",
              "zip"
            ],
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "description": "Company location street",
                "example": "1 Hacker Way"
              },
              "city": {
                "type": "string",
                "description": "Company location city",
                "example": "Menlo Park"
              },
              "state": {
                "type": "string",
                "description": "Company location state",
                "example": "CA"
              },
              "zip": {
                "type": "string",
                "description": "Company location zip code",
                "example": "94025"
              }
            },
            "description": "Company address"
          },
          "company_domain": {
            "type": "string",
            "description": "Company website domain",
            "example": "facebook.com"
          },
          "employments": {
            "type": "array",
            "description": "List of employments",
            "items": {
              "required": [
                "company",
                "id",
                "profile"
              ],
              "type": "object",
              "properties": {
                "income": {
                  "type": "string",
                  "description": "Income amount not including commission or bonuses (only for income product)",
                  "format": "decimal",
                  "example": "70000.00"
                },
                "income_unit": {
                  "type": "string",
                  "description": "\nThe pay interval the income field refers to:\n\n* `YEARLY` - Annual income,\n* `MONTHLY` - Monthly income,\n* `WEEKLY` - Weekly income,\n* `DAILY` - Daily income,\n* `HOURLY` - Hourly income\n\n (only for income product)",
                  "enum": [
                    "YEARLY",
                    "MONTHLY",
                    "WEEKLY",
                    "DAILY",
                    "HOURLY"
                  ]
                },
                "pay_rate": {
                  "type": "string",
                  "description": "Payment rate per pay cycle (only for income product)",
                  "format": "decimal",
                  "example": "6500.00"
                },
                "pay_frequency": {
                  "type": "string",
                  "description": "\nPay frequency:\n\n* `M` - Monthly,\n* `SM` - Semi-Monthly,\n* `W` - Weekly,\n* `BW` - Bi-Weekly,\n* `A` - Annually,\n* `SA` - Semiannually,\n* `C` - Commission\n\n (only for income product)",
                  "enum": [
                    "M",
                    "SM",
                    "W",
                    "BW",
                    "A",
                    "SA",
                    "C"
                  ]
                },
                "statements": {
                  "type": "array",
                  "description": "List of paystubs received from a payroll provider (only for income product)",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/Statement"
                  }
                },
                "annual_income_summary": {
                  "type": "array",
                  "description": "Annual income summary by years (only for income product)",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/AnnualIncomeSummary"
                  }
                },
                "bank_accounts": {
                  "type": "array",
                  "description": "List of bank accounts linked to the employment (only for income product)",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/BankAccount"
                  }
                },
                "w2s": {
                  "type": "array",
                  "description": "List of W-2 forms linked to the employment (only for income product)",
                  "readOnly": true,
                  "items": {
                    "$ref": "#/components/schemas/TaxDocumentW2"
                  }
                },
                "id": {
                  "type": "string",
                  "description": "Unique ID",
                  "example": "24d7e80942ce4ad58a93f70ce4115f5c"
                },
                "is_active": {
                  "type": "boolean",
                  "description": "Indicates whether the employment is still active",
                  "example": false
                },
                "job_title": {
                  "type": "string",
                  "description": "Employee's job title",
                  "example": "PR associate"
                },
                "job_type": {
                  "type": "string",
                  "description": "\nEmployee's job type:\n\n* `F` - Full Time,\n* `P` - Part Time,\n* `S` - Seasonal,\n* `D` - Daily (per diem),\n* `C` - Contract\n\n",
                  "enum": [
                    "F",
                    "P",
                    "S",
                    "D",
                    "C"
                  ]
                },
                "start_date": {
                  "type": "string",
                  "description": "Employee's hire date",
                  "format": "date",
                  "example": "2018-01-01T00:00:00.000Z"
                },
                "original_hire_date": {
                  "type": "string",
                  "description": "Original hire date",
                  "format": "date",
                  "example": "2017-06-21T00:00:00.000Z"
                },
                "end_date": {
                  "type": "string",
                  "description": "Employee's end date",
                  "format": "date"
                },
                "external_last_updated": {
                  "type": "string",
                  "description": "Indicates the date when employment data was last updated on the Payroll Provider side",
                  "format": "date"
                },
                "dates_from_statements": {
                  "type": "boolean",
                  "description": "Indicates whether or not the Employee's hire and/or end dates were derived from first/last pay statements **(Deprecated)**",
                  "example": false
                },
                "derived_fields": {
                  "type": "array",
                  "description": "Array of derived fields",
                  "example": [
                    "is_active"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "missing_data_fields": {
                  "type": "array",
                  "description": "List of the data fields which are missing in the payroll API response",
                  "example": [
                    "w2s"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "manager_name": {
                  "type": "string",
                  "description": "Supervisor's name",
                  "example": "Jenny McDouglas"
                },
                "profile": {
                  "$ref": "#/components/schemas/Profile"
                },
                "company": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        }
      },
      "InsuranceResponse": {
        "required": [
          "created_at",
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "ad9f14440d624ec3b0f66e81e44518c7"
          },
          "product_type": {
            "type": "string",
            "description": "Type of the product.",
            "example": "insurance",
            "enum": [
              "insurance"
            ]
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "example": "pending",
            "enum": [
              "pending",
              "sent",
              "completed",
              "error",
              "canceled",
              "expired",
              "no_data",
              "skipped"
            ]
          },
          "suborder_number": {
            "type": "string",
            "description": "External ID",
            "example": "133982343355"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when order was created",
            "example": "2021-04-21T22:12:59.346Z"
          },
          "bridge_token": {
            "type": "string",
            "description": "UUID value of bridge token",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "link_id": {
            "type": "string",
            "description": "Link ID for the connected account",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "access_token": {
            "type": "string",
            "description": "Access token to perform data refresh",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "pdf_report": {
            "type": "string",
            "description": "Verification report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: payroll - payroll provider parsing, docs - user uploaded documents, insurance - insurance data, financial_accounts - bank data, tax - tax documents, scoring_attributes - transactions scoring attributes report.",
            "example": "insurance",
            "enum": [
              "insurance",
              "docs"
            ]
          },
          "provider": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Provider id",
                "example": "truv_api"
              },
              "name": {
                "type": "string",
                "description": "Provider name",
                "example": "Sandbox Provider"
              },
              "logo_url": {
                "type": "string",
                "description": "Provider logo url",
                "format": "uri",
                "example": "https://citadelid-resources.s3.us-west-2.amazonaws.com/providers/truv-blue.svg"
              }
            },
            "description": "Payroll or insurance provider"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "provider_id": {
            "type": "string",
            "description": "Pre-selected ID of a insurance provider",
            "example": "geico"
          }
        },
        "description": "Insurance verification meta data"
      },
      "BankResponse": {
        "required": [
          "created_at",
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "ad9f14440d624ec3b0f66e81e44518c7"
          },
          "product_type": {
            "type": "string",
            "description": "Type of the product.",
            "example": "transactions",
            "enum": [
              "transactions",
              "assets"
            ]
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "example": "pending",
            "enum": [
              "pending",
              "sent",
              "completed",
              "error",
              "canceled",
              "expired",
              "no_data",
              "skipped"
            ]
          },
          "suborder_number": {
            "type": "string",
            "description": "External ID",
            "example": "133982343355"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when order was created",
            "example": "2021-04-21T22:12:59.346Z"
          },
          "bridge_token": {
            "type": "string",
            "description": "UUID value of bridge token",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "link_id": {
            "type": "string",
            "description": "Link ID for the connected account",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "access_token": {
            "type": "string",
            "description": "Access token to perform data refresh",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "pdf_report": {
            "type": "string",
            "description": "Verification report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: payroll - payroll provider parsing, docs - user uploaded documents, insurance - insurance data, financial_accounts - bank data, tax - tax documents, scoring_attributes - transactions scoring attributes report.",
            "example": "financial_accounts",
            "enum": [
              "financial_accounts"
            ]
          },
          "provider": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Provider id",
                "example": "truv_api"
              },
              "name": {
                "type": "string",
                "description": "Provider name",
                "example": "Sandbox Provider"
              },
              "logo_url": {
                "type": "string",
                "description": "Provider logo url",
                "format": "uri",
                "example": "https://citadelid-resources.s3.us-west-2.amazonaws.com/providers/truv-blue.svg"
              }
            },
            "description": "Payroll or insurance provider"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          }
        },
        "description": "Bank transactions meta data"
      },
      "OrderResponse": {
        "required": [
          "client_name",
          "created_at",
          "employers",
          "expired_at",
          "first_name",
          "id",
          "is_expired",
          "last_name",
          "products",
          "share_url",
          "source",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "39aa1486ccca4bc19cda071ffc1ba392"
          },
          "products": {
            "type": "array",
            "description": "Types of products selected for the order",
            "items": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets"
              ]
            }
          },
          "source": {
            "type": "string",
            "description": "Type of the platform (internal, accio, etc.)",
            "enum": [
              "floify",
              "besmartee",
              "lenderlogix",
              "encompass_consumer_connect",
              "byte",
              "core_logic",
              "xactus",
              "constellation",
              "banno",
              "mx",
              "q2",
              "clutch",
              "accio",
              "encompass",
              "darkmatter",
              "tazworks",
              "internal",
              "simplenexus",
              "external_webpage",
              "individual"
            ]
          },
          "order_number": {
            "type": "string",
            "description": "External ID",
            "example": "1534332"
          },
          "custom_field": {
            "type": "string",
            "description": "User provided custom field. Must be enabled in the customisation section."
          },
          "client_name": {
            "type": "string",
            "description": "Verification agency name",
            "example": "Unnamed Verifications Inc."
          },
          "first_name": {
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "user_id": {
            "type": "string",
            "description": "Unique Truv ID of the user.",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "bridge_token": {
            "type": "string",
            "description": "UUID value of bridge token",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "share_url": {
            "type": "string",
            "description": "Landing page URL to share",
            "example": "https://cdn.truv.com/employment.html?bridge_token=63b4af88facb40e48f517c1e8c7abdf4&order_group_id=39aa1486ccca4bc19cda071ffc1ba392"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when order was created",
            "format": "date-time",
            "example": "2021-04-21T21:45:14.418Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time when order was updated",
            "format": "date-time",
            "example": "2021-04-21T21:45:14.418Z"
          },
          "canceled_at": {
            "type": "string",
            "description": "Date and time when order was canceled",
            "format": "date-time",
            "example": "2021-04-22T21:45:14.418Z"
          },
          "expired_at": {
            "type": "string",
            "description": "Date and time when order would expire",
            "format": "date-time",
            "example": "2021-04-24T21:45:14.418Z"
          },
          "is_expired": {
            "type": "boolean",
            "description": "If order is already expired"
          },
          "user_consent_at": {
            "type": "string",
            "description": "Date and time when explicit user consent was given",
            "format": "date-time",
            "example": "2021-04-21T21:45:14.418Z"
          },
          "initial_order": {
            "type": "string",
            "description": "ID of an origin order if the order was created by the order data refresh operation",
            "example": "f5dc0239e2094dbc90ab2edc1918a9df"
          },
          "refresh_order": {
            "type": "string",
            "description": "ID of the last refresh order created by the order data refresh operation for the order",
            "example": "9b96606355b94e8abff8ed8d75aa2027"
          },
          "employers": {
            "type": "array",
            "description": "List of employers",
            "items": {
              "$ref": "#/components/schemas/EmployerResponse"
            }
          },
          "insurance": {
            "$ref": "#/components/schemas/InsuranceResponse"
          },
          "manager": {
            "required": [
              "email"
            ],
            "type": "object",
            "properties": {
              "email": {
                "maxLength": 255,
                "type": "string",
                "description": "Email of the order manager",
                "example": "john.doe@example.com"
              },
              "name": {
                "maxLength": 600,
                "type": "string",
                "description": "Name of the order manager",
                "example": "John Doe"
              }
            },
            "description": "Order manager info associated with an order."
          },
          "financial_accounts": {
            "type": "array",
            "description": "List of financial accounts",
            "items": {
              "$ref": "#/components/schemas/BankResponse"
            }
          },
          "loan": {
            "$ref": "#/components/schemas/Loan"
          },
          "template_id": {
            "type": "string",
            "description": "ID of the template",
            "example": "9b96606355b94e8abff8ed8d75aa2027"
          },
          "cc_emails": {
            "maxItems": 15,
            "type": "array",
            "description": "A list of email addresses that will receive carbon copies (CC) of order status updates.",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "voie_report_id": {
            "type": "string",
            "description": "GSE accepted income and employment verification report ID",
            "example": "b19c454a98594b4084b71e3b62873d29"
          },
          "voa_report_id": {
            "type": "string",
            "description": "Verification of Assets report ID",
            "example": "b19c454a98594b4084b71e3b62873d29"
          },
          "aim_check_report_id": {
            "type": "string",
            "description": "AIM check report ID",
            "example": "FM-1234-39aa1486ccca4bc19cda071ffc1ba392"
          }
        }
      },
      "OrderGroupSSNSearch": {
        "required": [
          "ssn"
        ],
        "type": "object",
        "properties": {
          "ssn": {
            "title": "Ssn",
            "maxLength": 11,
            "minLength": 9,
            "type": "string"
          }
        }
      },
      "EmployerListResponse": {
        "required": [
          "created_at",
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "ad9f14440d624ec3b0f66e81e44518c7"
          },
          "product_type": {
            "type": "string",
            "description": "Type of the product.",
            "example": "income",
            "enum": [
              "income",
              "employment",
              "deposit_switch",
              "pll"
            ]
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "example": "pending",
            "enum": [
              "pending",
              "sent",
              "completed",
              "error",
              "canceled",
              "expired",
              "no_data",
              "skipped"
            ]
          },
          "suborder_number": {
            "type": "string",
            "description": "External ID",
            "example": "133982343355"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when order was created",
            "example": "2021-04-21T22:12:59.346Z"
          },
          "bridge_token": {
            "type": "string",
            "description": "UUID value of bridge token",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "link_id": {
            "type": "string",
            "description": "Link ID for the connected account",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "access_token": {
            "type": "string",
            "description": "Access token to perform data refresh",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "pdf_report": {
            "type": "string",
            "description": "Verification report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: payroll - payroll provider parsing, docs - user uploaded documents, insurance - insurance data, financial_accounts - bank data, tax - tax documents, scoring_attributes - transactions scoring attributes report.",
            "example": "payroll",
            "enum": [
              "payroll",
              "docs",
              "tax",
              "financial_accounts"
            ]
          },
          "provider": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Provider id",
                "example": "truv_api"
              },
              "name": {
                "type": "string",
                "description": "Provider name",
                "example": "Sandbox Provider"
              },
              "logo_url": {
                "type": "string",
                "description": "Provider logo url",
                "format": "uri",
                "example": "https://citadelid-resources.s3.us-west-2.amazonaws.com/providers/truv-blue.svg"
              }
            },
            "description": "Payroll or insurance provider"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          },
          "start_date": {
            "type": "string",
            "description": "Employment start date",
            "example": "2019-08-24T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Employment start date",
            "example": "2019-11-27T00:00:00.000Z"
          },
          "company_name": {
            "type": "string",
            "description": "Company name",
            "example": "Facebook Demo"
          },
          "company_address": {
            "required": [
              "city",
              "state",
              "street",
              "zip"
            ],
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "description": "Company location street",
                "example": "1 Hacker Way"
              },
              "city": {
                "type": "string",
                "description": "Company location city",
                "example": "Menlo Park"
              },
              "state": {
                "type": "string",
                "description": "Company location state",
                "example": "CA"
              },
              "zip": {
                "type": "string",
                "description": "Company location zip code",
                "example": "94025"
              }
            },
            "description": "Company address"
          },
          "company_domain": {
            "type": "string",
            "description": "Company website domain",
            "example": "facebook.com"
          }
        }
      },
      "InsuranceListResponse": {
        "required": [
          "created_at",
          "id",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "ad9f14440d624ec3b0f66e81e44518c7"
          },
          "product_type": {
            "type": "string",
            "description": "Type of the product.",
            "example": "insurance",
            "enum": [
              "insurance"
            ]
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "example": "pending",
            "enum": [
              "pending",
              "sent",
              "completed",
              "error",
              "canceled",
              "expired",
              "no_data",
              "skipped"
            ]
          },
          "suborder_number": {
            "type": "string",
            "description": "External ID",
            "example": "133982343355"
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when order was created",
            "example": "2021-04-21T22:12:59.346Z"
          },
          "bridge_token": {
            "type": "string",
            "description": "UUID value of bridge token",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "link_id": {
            "type": "string",
            "description": "Link ID for the connected account",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "access_token": {
            "type": "string",
            "description": "Access token to perform data refresh",
            "example": "e4100fccdae94691b4414c7306220c06"
          },
          "pdf_report": {
            "type": "string",
            "description": "Verification report in PDF format",
            "format": "uri",
            "example": "https://citadelid-resources.s3-us-west-2.amazonaws.com/report.pdf"
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: payroll - payroll provider parsing, docs - user uploaded documents, insurance - insurance data, financial_accounts - bank data, tax - tax documents, scoring_attributes - transactions scoring attributes report.",
            "example": "insurance",
            "enum": [
              "insurance",
              "docs"
            ]
          },
          "provider": {
            "required": [
              "id",
              "name"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Provider id",
                "example": "truv_api"
              },
              "name": {
                "type": "string",
                "description": "Provider name",
                "example": "Sandbox Provider"
              },
              "logo_url": {
                "type": "string",
                "description": "Provider logo url",
                "format": "uri",
                "example": "https://citadelid-resources.s3.us-west-2.amazonaws.com/providers/truv-blue.svg"
              }
            },
            "description": "Payroll or insurance provider"
          },
          "is_suspicious": {
            "type": "boolean",
            "description": "Flag to indicate if the data from the source is suspicious. E.g. fraud detected in uploaded documents or SSN of the user does not match with the data"
          }
        },
        "description": "Insurance verification meta data"
      },
      "OrderListResponse": {
        "required": [
          "count",
          "next",
          "previous",
          "results"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of orders to return",
            "example": 100
          },
          "next": {
            "type": "string",
            "description": "Url to the next page",
            "example": "https://prod.truv.com/v1/orders/lookup/?page=2"
          },
          "previous": {
            "type": "string",
            "description": "Url to the previous page",
            "example": "https://prod.truv.com/v1/orders/lookup/?page=1"
          },
          "results": {
            "type": "array",
            "description": "List orders by an applicant SSN",
            "items": {
              "required": [
                "client_name",
                "created_at",
                "employers",
                "expired_at",
                "first_name",
                "id",
                "is_expired",
                "last_name",
                "products",
                "share_url",
                "source",
                "user_id"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID",
                  "example": "39aa1486ccca4bc19cda071ffc1ba392"
                },
                "products": {
                  "type": "array",
                  "description": "Types of products selected for the order",
                  "items": {
                    "type": "string",
                    "enum": [
                      "income",
                      "employment",
                      "deposit_switch",
                      "pll",
                      "insurance",
                      "transactions",
                      "assets"
                    ]
                  }
                },
                "source": {
                  "type": "string",
                  "description": "Type of the platform (internal, accio, etc.)",
                  "enum": [
                    "floify",
                    "besmartee",
                    "lenderlogix",
                    "encompass_consumer_connect",
                    "byte",
                    "core_logic",
                    "xactus",
                    "constellation",
                    "banno",
                    "mx",
                    "q2",
                    "clutch",
                    "accio",
                    "encompass",
                    "darkmatter",
                    "tazworks",
                    "internal",
                    "simplenexus",
                    "external_webpage",
                    "individual"
                  ]
                },
                "order_number": {
                  "type": "string",
                  "description": "External ID",
                  "example": "1534332"
                },
                "custom_field": {
                  "type": "string",
                  "description": "User provided custom field. Must be enabled in the customisation section."
                },
                "client_name": {
                  "type": "string",
                  "description": "Verification agency name",
                  "example": "Unnamed Verifications Inc."
                },
                "first_name": {
                  "type": "string",
                  "description": "First name",
                  "example": "John"
                },
                "last_name": {
                  "type": "string",
                  "description": "Last name",
                  "example": "Doe"
                },
                "user_id": {
                  "type": "string",
                  "description": "Unique Truv ID of the user.",
                  "example": "99dd17074ac94aa9ace2621d657c7610"
                },
                "bridge_token": {
                  "type": "string",
                  "description": "UUID value of bridge token",
                  "example": "e4100fccdae94691b4414c7306220c06"
                },
                "share_url": {
                  "type": "string",
                  "description": "Landing page URL to share",
                  "example": "https://cdn.truv.com/employment.html?bridge_token=63b4af88facb40e48f517c1e8c7abdf4&order_group_id=39aa1486ccca4bc19cda071ffc1ba392"
                },
                "created_at": {
                  "type": "string",
                  "description": "Date and time when order was created",
                  "format": "date-time",
                  "example": "2021-04-21T21:45:14.418Z"
                },
                "updated_at": {
                  "type": "string",
                  "description": "Date and time when order was updated",
                  "format": "date-time",
                  "example": "2021-04-21T21:45:14.418Z"
                },
                "canceled_at": {
                  "type": "string",
                  "description": "Date and time when order was canceled",
                  "format": "date-time",
                  "example": "2021-04-22T21:45:14.418Z"
                },
                "expired_at": {
                  "type": "string",
                  "description": "Date and time when order would expire",
                  "format": "date-time",
                  "example": "2021-04-24T21:45:14.418Z"
                },
                "is_expired": {
                  "type": "boolean",
                  "description": "If order is already expired"
                },
                "user_consent_at": {
                  "type": "string",
                  "description": "Date and time when explicit user consent was given",
                  "format": "date-time",
                  "example": "2021-04-21T21:45:14.418Z"
                },
                "initial_order": {
                  "type": "string",
                  "description": "ID of an origin order if the order was created by the order data refresh operation",
                  "example": "f5dc0239e2094dbc90ab2edc1918a9df"
                },
                "refresh_order": {
                  "type": "string",
                  "description": "ID of the last refresh order created by the order data refresh operation for the order",
                  "example": "9b96606355b94e8abff8ed8d75aa2027"
                },
                "employers": {
                  "type": "array",
                  "description": "List of employers",
                  "items": {
                    "$ref": "#/components/schemas/EmployerListResponse"
                  }
                },
                "insurance": {
                  "$ref": "#/components/schemas/InsuranceListResponse"
                },
                "manager": {
                  "required": [
                    "email"
                  ],
                  "type": "object",
                  "properties": {
                    "email": {
                      "maxLength": 255,
                      "type": "string",
                      "description": "Email of the order manager",
                      "example": "john.doe@example.com"
                    },
                    "name": {
                      "maxLength": 600,
                      "type": "string",
                      "description": "Name of the order manager",
                      "example": "John Doe"
                    }
                  },
                  "description": "Order manager info associated with an order."
                },
                "financial_accounts": {
                  "type": "array",
                  "description": "List of financial accounts",
                  "items": {
                    "$ref": "#/components/schemas/BankResponse"
                  }
                },
                "loan": {
                  "$ref": "#/components/schemas/Loan"
                },
                "template_id": {
                  "type": "string",
                  "description": "ID of the template",
                  "example": "9b96606355b94e8abff8ed8d75aa2027"
                },
                "cc_emails": {
                  "maxItems": 15,
                  "type": "array",
                  "description": "A list of email addresses that will receive carbon copies (CC) of order status updates.",
                  "items": {
                    "type": "string",
                    "format": "email"
                  }
                },
                "voie_report_id": {
                  "type": "string",
                  "description": "GSE accepted income and employment verification report ID",
                  "example": "b19c454a98594b4084b71e3b62873d29"
                },
                "voa_report_id": {
                  "type": "string",
                  "description": "Verification of Assets report ID",
                  "example": "b19c454a98594b4084b71e3b62873d29"
                },
                "aim_check_report_id": {
                  "type": "string",
                  "description": "AIM check report ID",
                  "example": "FM-1234-39aa1486ccca4bc19cda071ffc1ba392"
                }
              }
            }
          }
        },
        "description": "List orders by an applicant SSN"
      },
      "CreateOrderGroupRefreshEmployer": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "minLength": 1,
            "type": "string"
          },
          "suborder_number": {
            "title": "Suborder number",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "CreateRefreshOrder": {
        "type": "object",
        "properties": {
          "products": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "description": "Indicates the type of product to use for the data refresh order. For the \"income\" type orders the data refresh order can be \"income\" or \"employment\" type. For the \"employment\" type orders the data refresh order can be only \"employment\" type.",
            "items": {
              "type": "string",
              "enum": [
                "employment",
                "income",
                "insurance",
                "transactions",
                "assets"
              ]
            }
          },
          "employers": {
            "type": "array",
            "description": "List of employers to include in the new refresh order data.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of an employer object for the refresh. Can be found in the order retrieve endpoint response \"employers\" -> \"id\" field."
                },
                "suborder_number": {
                  "type": "string",
                  "description": "External ID of an employer object for the refresh."
                }
              }
            }
          },
          "manager": {
            "required": [
              "email"
            ],
            "type": "object",
            "properties": {
              "email": {
                "maxLength": 255,
                "type": "string",
                "description": "Email of the order manager",
                "example": "john.doe@example.com"
              },
              "name": {
                "maxLength": 600,
                "type": "string",
                "description": "Name of the order manager",
                "example": "John Doe"
              }
            },
            "description": "Associate new order manager info with a new data refresh order."
          },
          "email": {
            "type": "string",
            "description": "Subject's email",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "Subject's phone number",
            "example": "4155554193"
          },
          "include_recent_paystub": {
            "type": "boolean",
            "description": "A boolean parameter to include the latest statement in the employment report"
          }
        }
      },
      "EditOrder": {
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First name",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "last_name": {
            "title": "Last name",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "ssn": {
            "title": "Ssn",
            "maxLength": 128,
            "type": "string",
            "nullable": true
          },
          "refresh_approved": {
            "title": "Refresh approved",
            "type": "boolean",
            "description": "Flag that indicates approval for notification to reconnect the account to be sent."
          },
          "loan": {
            "$ref": "#/components/schemas/Loan"
          }
        }
      },
      "EmployerAdd": {
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Job start date",
            "format": "date",
            "example": "2019-08-24T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Job end date",
            "format": "date",
            "example": "2019-11-27T00:00:00.000Z"
          },
          "company_name": {
            "type": "string",
            "description": "Company name",
            "example": "Facebook Demo"
          },
          "company_address": {
            "required": [
              "city",
              "state",
              "street",
              "zip"
            ],
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "description": "Company location street",
                "example": "1 Hacker Way"
              },
              "city": {
                "type": "string",
                "description": "Company location city",
                "example": "Menlo Park"
              },
              "state": {
                "type": "string",
                "description": "Company location state",
                "example": "CA"
              },
              "zip": {
                "type": "string",
                "description": "Company location zip code",
                "example": "94025"
              }
            },
            "description": "Company address"
          },
          "company_domain": {
            "type": "string",
            "description": "Company website domain",
            "example": "facebook.com"
          },
          "suborder_number": {
            "type": "string",
            "description": "External ID",
            "example": "133982343355"
          },
          "company_mapping_id": {
            "type": "string",
            "description": "Company mapping ID",
            "example": "self_employed"
          }
        }
      },
      "RefreshTaskCreateRequest": {
        "required": [
          "access_token",
          "product_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Access token for a Link to payroll provider",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          },
          "account": {
            "required": [
              "account_number",
              "account_type",
              "bank_name",
              "deposit_type",
              "routing_number"
            ],
            "type": "object",
            "properties": {
              "account_number": {
                "maxLength": 20,
                "minLength": 4,
                "type": "string",
                "description": "Account number",
                "example": "16002600"
              },
              "account_type": {
                "type": "string",
                "description": "\nAccount type:\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                "enum": [
                  "checking",
                  "savings"
                ]
              },
              "routing_number": {
                "maxLength": 12,
                "minLength": 8,
                "type": "string",
                "description": "Routing number",
                "example": "123456789"
              },
              "bank_name": {
                "type": "string",
                "description": "Bank name",
                "example": "TD Bank"
              },
              "deposit_type": {
                "type": "string",
                "description": "\nDeposit type:\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n\n",
                "enum": [
                  "entire",
                  "percent",
                  "amount"
                ]
              },
              "deposit_value": {
                "type": "string",
                "description": "Deposit value",
                "example": "50.00"
              }
            },
            "description": "Bank account info. Used for [Paycheck Linked Loans](#paycheck-linked-loans)"
          },
          "product_type": {
            "type": "string",
            "description": "\nIndicates the type of product to use:\n\n* `employment` - Employment verification,\n* `income` - Income and Employment verification,\n* `deposit_switch` - Direct deposit switch,\n* `pll` - Paycheck linked lending,\n* `insurance` - Insurance verification,\n* `transactions` - Financial account aggregation,\n* `assets` - Assets verification,\n\n",
            "enum": [
              "income",
              "employment",
              "deposit_switch",
              "pll",
              "insurance",
              "transactions",
              "assets"
            ]
          }
        },
        "description": "Refresh Link data task"
      },
      "RefreshTaskCreateResponse": {
        "required": [
          "task_id"
        ],
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "description": "Unique ID for the `Link` data refresh task",
            "example": "48427a36d43c4d5aa6324bc06c692456"
          }
        },
        "description": "Response for refresh task creation endpoint."
      },
      "RefreshTask": {
        "required": [
          "id",
          "refresh_date",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique refresh task ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "created_at": {
            "type": "string",
            "description": "Time when refresh task was created",
            "example": "2021-04-06T11:30:00.000Z"
          },
          "refresh_date": {
            "type": "string",
            "description": "Date of the data refresh **(Deprecated, invalid datetime format)**",
            "format": "date",
            "example": "2020-03-10T00:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "[Refresh task status](#task-statuses)",
            "example": "new"
          }
        },
        "description": "Link data refresh task"
      },
      "CustomizationBridgeTexts": {
        "type": "object",
        "properties": {
          "search_header": {
            "maxLength": 500,
            "type": "string",
            "description": "Search screen header text"
          },
          "success_title": {
            "maxLength": 500,
            "type": "string",
            "description": "Success screen title"
          },
          "success_subtitle": {
            "maxLength": 500,
            "type": "string",
            "description": "Success screen subtitle"
          },
          "success_cta": {
            "maxLength": 500,
            "type": "string",
            "description": "Success button label"
          }
        }
      },
      "CustomizationBridgeSearch": {
        "type": "object",
        "properties": {
          "popular_listing_id": {
            "maxLength": 32,
            "type": "string",
            "description": "ID of the popular company listing"
          },
          "categories": {
            "type": "array",
            "description": "Search categories IDs",
            "example": [],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CustomizationTemplateBridge": {
        "type": "object",
        "properties": {
          "texts": {
            "$ref": "#/components/schemas/CustomizationBridgeTexts"
          },
          "hide_truv_logo": {
            "type": "boolean",
            "description": "Hide the Truv logo"
          },
          "hide_support_button": {
            "type": "boolean",
            "description": "Hide the support button"
          },
          "search": {
            "$ref": "#/components/schemas/CustomizationBridgeSearch"
          }
        }
      },
      "CustomizationTemplateAgreement": {
        "type": "object",
        "properties": {
          "header": {
            "maxLength": 500,
            "type": "string",
            "description": "End-user agreement or privacy policy label"
          },
          "url": {
            "maxLength": 255,
            "type": "string",
            "description": "End-user agreement or privacy policy URL",
            "format": "uri"
          }
        }
      },
      "CustomProductNames": {
        "type": "object",
        "properties": {
          "pll": {
            "title": "Pll",
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomizationTemplateBranding": {
        "type": "object",
        "properties": {
          "company_name": {
            "maxLength": 255,
            "type": "string",
            "description": "Client name"
          },
          "accent_color": {
            "type": "string",
            "description": "Main color",
            "example": "#aabb00"
          },
          "background_color": {
            "type": "string",
            "description": "Background color",
            "example": "rgba(0, 0, 255, 0.5)"
          },
          "logo": {
            "type": "string",
            "description": "Company logo image.",
            "format": "uri"
          },
          "hide_confetti": {
            "type": "boolean",
            "description": "Option to hide confetti on the success screen"
          },
          "custom_end_user_agreement": {
            "$ref": "#/components/schemas/CustomizationTemplateAgreement"
          }
        }
      },
      "CustomizationTemplateFirstSMS": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "SMS text message"
          },
          "apply_for_reminder": {
            "type": "boolean",
            "description": "If enabled, the first SMS text message will also be used as the reminder"
          }
        }
      },
      "CustomizationTemplateReminderSMS": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "SMS text message"
          }
        }
      },
      "CustomizationTemplateFirstEmail": {
        "type": "object",
        "properties": {
          "subject": {
            "maxLength": 500,
            "type": "string",
            "description": "Subject and title of the email"
          },
          "header": {
            "maxLength": 2000,
            "type": "string",
            "description": "Main header content of the email"
          },
          "button": {
            "maxLength": 500,
            "type": "string",
            "description": "Text within the call-to-action button"
          },
          "caption": {
            "maxLength": 2000,
            "type": "string",
            "description": "Small text below the call-to-action button"
          },
          "apply_for_reminder": {
            "type": "boolean",
            "description": "If enabled, the first email fields will also be used as the reminder email fields"
          }
        }
      },
      "CustomizationTemplateReminderEmail": {
        "type": "object",
        "properties": {
          "subject": {
            "maxLength": 500,
            "type": "string",
            "description": "Subject and title of the email"
          },
          "header": {
            "maxLength": 2000,
            "type": "string",
            "description": "Main header content of the email"
          },
          "button": {
            "maxLength": 500,
            "type": "string",
            "description": "Text within the call-to-action button"
          },
          "caption": {
            "maxLength": 2000,
            "type": "string",
            "description": "Small text below the call-to-action button"
          }
        }
      },
      "CustomizationTemplateFirstCall": {
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 1000,
            "type": "string",
            "description": "Text message that will be spelled out during an automated phone call. The message should be composed of alphanumeric characters and standard punctuation."
          },
          "delay_seconds": {
            "maximum": 10800,
            "minimum": 60,
            "type": "integer",
            "description": "Delay in seconds after the order is placed."
          },
          "apply_for_reminder": {
            "type": "boolean",
            "description": "Flag that determines whether the associated text message should be utilized in automated reminder phone calls"
          }
        }
      },
      "CustomizationTemplateReminderCall": {
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 1000,
            "type": "string",
            "description": "Call text"
          },
          "delay_seconds": {
            "maximum": 864000,
            "minimum": 600,
            "type": "integer",
            "description": "Call delay in seconds"
          }
        }
      },
      "BankInfo": {
        "type": "object",
        "properties": {
          "account_type": {
            "title": "Account type",
            "type": "string",
            "enum": [
              "checking",
              "savings"
            ]
          },
          "bank_name": {
            "title": "Bank name",
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "bank_address": {
            "title": "Bank address",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "account_number": {
            "title": "Account number",
            "maxLength": 20,
            "minLength": 4,
            "pattern": "\\d+",
            "type": "string"
          },
          "routing_number": {
            "title": "Routing number",
            "maxLength": 12,
            "minLength": 8,
            "pattern": "\\d+",
            "type": "string"
          }
        }
      },
      "CustomizationTemplateScreen": {
        "type": "object",
        "properties": {
          "header": {
            "maxLength": 500,
            "type": "string",
            "description": "Title header text"
          },
          "body": {
            "maxLength": 2000,
            "type": "string",
            "description": "Body text"
          }
        }
      },
      "CustomizationTemplateLanding": {
        "type": "object",
        "properties": {
          "header": {
            "maxLength": 500,
            "type": "string",
            "description": "Title header text"
          },
          "body": {
            "maxLength": 2000,
            "type": "string",
            "description": "Body text"
          },
          "hide_faq": {
            "type": "boolean",
            "description": "If enabled, FAQ will be suppressed on the Landing page"
          },
          "success_screen": {
            "$ref": "#/components/schemas/CustomizationTemplateScreen"
          },
          "expired_screen": {
            "$ref": "#/components/schemas/CustomizationTemplateScreen"
          }
        }
      },
      "CustomizationTemplateOrders": {
        "type": "object",
        "properties": {
          "link_expiration": {
            "type": "string",
            "description": "Expiration of the link to the landing page",
            "enum": [
              "24",
              "48",
              "72",
              "120",
              "240",
              "360",
              "480"
            ]
          },
          "custom_field_title": {
            "maxLength": 255,
            "type": "string",
            "description": "Custom field title"
          },
          "support_email": {
            "maxLength": 254,
            "type": "string",
            "description": "Email address for customer support",
            "format": "email"
          },
          "first_sms": {
            "$ref": "#/components/schemas/CustomizationTemplateFirstSMS"
          },
          "reminder_sms": {
            "$ref": "#/components/schemas/CustomizationTemplateReminderSMS"
          },
          "first_email": {
            "$ref": "#/components/schemas/CustomizationTemplateFirstEmail"
          },
          "reminder_email": {
            "$ref": "#/components/schemas/CustomizationTemplateReminderEmail"
          },
          "refresh_first_sms": {
            "$ref": "#/components/schemas/CustomizationTemplateFirstSMS"
          },
          "refresh_reminder_sms": {
            "$ref": "#/components/schemas/CustomizationTemplateReminderSMS"
          },
          "refresh_first_email": {
            "$ref": "#/components/schemas/CustomizationTemplateFirstEmail"
          },
          "refresh_reminder_email": {
            "$ref": "#/components/schemas/CustomizationTemplateReminderEmail"
          },
          "first_call": {
            "$ref": "#/components/schemas/CustomizationTemplateFirstCall"
          },
          "reminder_call": {
            "$ref": "#/components/schemas/CustomizationTemplateReminderCall"
          },
          "landing": {
            "$ref": "#/components/schemas/CustomizationTemplateLanding"
          },
          "bank_info": {
            "$ref": "#/components/schemas/BankInfo"
          }
        }
      },
      "CustomizationTemplateDocumentUploadConfig": {
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "If the document type is enabled"
          },
          "is_required": {
            "type": "boolean",
            "description": "If the document type is required"
          },
          "title": {
            "type": "string",
            "description": "Title on the first document upload screen"
          },
          "description": {
            "type": "string",
            "description": "Description on the first document upload screen",
            "example": "PDF files only under 15 MB."
          },
          "button": {
            "type": "string",
            "description": "Text on the upload button",
            "example": "Upload"
          },
          "submit_title": {
            "type": "string",
            "description": "Title on the submit screen"
          },
          "min_count": {
            "type": "integer",
            "description": "Minimum required number of uploaded documents",
            "example": 2
          },
          "max_count": {
            "type": "integer",
            "description": "Maximum required number of uploaded documents",
            "example": 5
          }
        }
      },
      "CustomizationTemplateDocumentUpload": {
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "If document upload is enabled for the template or not. Set to null - for global settings. If set to true document types should be enabled in the template explicitly."
          },
          "paystub": {
            "$ref": "#/components/schemas/CustomizationTemplateDocumentUploadConfig"
          },
          "w2": {
            "$ref": "#/components/schemas/CustomizationTemplateDocumentUploadConfig"
          },
          "f1099": {
            "$ref": "#/components/schemas/CustomizationTemplateDocumentUploadConfig"
          },
          "f1040": {
            "$ref": "#/components/schemas/CustomizationTemplateDocumentUploadConfig"
          },
          "insurance_home_policy": {
            "$ref": "#/components/schemas/CustomizationTemplateDocumentUploadConfig"
          },
          "insurance_auto_policy": {
            "$ref": "#/components/schemas/CustomizationTemplateDocumentUploadConfig"
          }
        }
      },
      "CustomizationTemplateReturnedDocuments": {
        "type": "object",
        "properties": {
          "paystubs_count": {
            "type": "integer",
            "description": "The number of most recent paystubs to include in the response. Specify the desired count of paystubs to be returned.",
            "example": 6
          },
          "w2_count": {
            "type": "integer",
            "description": "The number of most recent W2 forms to include in the response. Specify the desired count of W2 forms to be returned.",
            "example": 3
          },
          "paystubs_ytd_count": {
            "type": "integer",
            "description": "The number of most recent year-to-date paystubs to include in the response. Specify the desired count of year-to-date paystubs to be returned.",
            "example": 3
          }
        },
        "nullable": true,
        "x-nullable": true
      },
      "CustomizationTemplateHiddenSections": {
        "type": "object",
        "properties": {
          "deposits": {
            "type": "boolean",
            "description": "Hide Deposits"
          },
          "historical_payment_summary": {
            "type": "boolean",
            "description": "Hide Historical Pay Summary"
          }
        }
      },
      "CustomizationTemplateReportSettings": {
        "type": "object",
        "properties": {
          "hidden_sections": {
            "$ref": "#/components/schemas/CustomizationTemplateHiddenSections"
          },
          "days_requested": {
            "maximum": 730,
            "minimum": 1,
            "type": "integer",
            "description": "The specific duration in days for which the report is requested to be generated.",
            "example": 60
          }
        },
        "nullable": true,
        "x-nullable": true
      },
      "CustomizationTemplateManager": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "title": "Email",
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "format": "email"
          }
        },
        "nullable": true,
        "x-nullable": true
      },
      "CustomizationTemplate": {
        "required": [
          "created_at",
          "default_for_products",
          "id",
          "name",
          "products",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the template.",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Template name",
            "default": "My template"
          },
          "products": {
            "type": "array",
            "description": "Products list this template applies to",
            "items": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets",
                "admin"
              ]
            }
          },
          "default_for_products": {
            "type": "boolean",
            "description": "If enabled, the template will be applied for the products by default"
          },
          "bridge": {
            "$ref": "#/components/schemas/CustomizationTemplateBridge"
          },
          "branding": {
            "$ref": "#/components/schemas/CustomizationTemplateBranding"
          },
          "orders": {
            "$ref": "#/components/schemas/CustomizationTemplateOrders"
          },
          "document_upload": {
            "$ref": "#/components/schemas/CustomizationTemplateDocumentUpload"
          },
          "data": {
            "$ref": "#/components/schemas/CustomizationTemplateReturnedDocuments"
          },
          "reports": {
            "$ref": "#/components/schemas/CustomizationTemplateReportSettings"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the template was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the template was updated last time.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          }
        }
      },
      "CustomizationTemplateRequestCreate": {
        "required": [
          "name",
          "products"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Template name",
            "default": "My template"
          },
          "products": {
            "type": "array",
            "description": "Products list this template applies to",
            "items": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets",
                "admin"
              ]
            }
          },
          "default_for_products": {
            "type": "boolean",
            "description": "If enabled, the template will be applied for the products by default"
          },
          "bridge": {
            "$ref": "#/components/schemas/CustomizationTemplateBridge"
          },
          "branding": {
            "$ref": "#/components/schemas/CustomizationTemplateBranding"
          },
          "orders": {
            "$ref": "#/components/schemas/CustomizationTemplateOrders"
          },
          "document_upload": {
            "$ref": "#/components/schemas/CustomizationTemplateDocumentUpload"
          },
          "data": {
            "$ref": "#/components/schemas/CustomizationTemplateReturnedDocuments"
          },
          "reports": {
            "$ref": "#/components/schemas/CustomizationTemplateReportSettings"
          }
        }
      },
      "CustomizationTemplateRequestUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Template name"
          },
          "products": {
            "type": "array",
            "description": "Products list this template applies to",
            "items": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets",
                "admin"
              ]
            }
          },
          "default_for_products": {
            "type": "boolean",
            "description": "If enabled, the template will be applied for the products by default"
          },
          "bridge": {
            "$ref": "#/components/schemas/CustomizationTemplateBridge"
          },
          "branding": {
            "$ref": "#/components/schemas/CustomizationTemplateBranding"
          },
          "orders": {
            "$ref": "#/components/schemas/CustomizationTemplateOrders"
          },
          "document_upload": {
            "$ref": "#/components/schemas/CustomizationTemplateDocumentUpload"
          },
          "data": {
            "$ref": "#/components/schemas/CustomizationTemplateReturnedDocuments"
          },
          "reports": {
            "$ref": "#/components/schemas/CustomizationTemplateReportSettings"
          }
        }
      },
      "ApplicantList": {
        "required": [
          "created_at",
          "external_user_id",
          "id",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the user.",
            "format": "uuid",
            "readOnly": true
          },
          "external_user_id": {
            "type": "string",
            "description": "External user id.",
            "example": "12345"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the user.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user.",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "User's email.",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number.",
            "example": "+14155554193"
          },
          "ssn": {
            "type": "string",
            "description": "User's SSN.",
            "example": "222233333"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the user was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the user was updated last time.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "links": {
            "type": "array",
            "description": "List of account Links associated with the user.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        }
      },
      "ApplicantRequestCreate": {
        "required": [
          "external_user_id"
        ],
        "type": "object",
        "properties": {
          "external_user_id": {
            "type": "string",
            "description": "External user id.",
            "example": "12345"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the user.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user.",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "User's email.",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number.",
            "example": "+14155554193"
          },
          "ssn": {
            "type": "string",
            "description": "User's SSN.",
            "example": "222233333"
          }
        }
      },
      "Applicant": {
        "required": [
          "created_at",
          "external_user_id",
          "id",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the user.",
            "format": "uuid",
            "readOnly": true
          },
          "external_user_id": {
            "type": "string",
            "description": "External user id.",
            "example": "12345"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the user.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user.",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "User's email.",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number.",
            "example": "+14155554193"
          },
          "ssn": {
            "type": "string",
            "description": "User's SSN.",
            "example": "222233333"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the user was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the user was updated last time.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          }
        }
      },
      "ApplicantRetrieve": {
        "required": [
          "created_at",
          "external_user_id",
          "id",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the user.",
            "format": "uuid",
            "readOnly": true
          },
          "external_user_id": {
            "type": "string",
            "description": "External user id.",
            "example": "12345"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the user.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user.",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "User's email.",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number.",
            "example": "+14155554193"
          },
          "ssn": {
            "type": "string",
            "description": "User's SSN.",
            "example": "222233333"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the user was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the user was updated last time.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "links": {
            "type": "array",
            "description": "List of account Links associated with the user.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "voie_report_id": {
            "type": "string",
            "description": "GSE accepted income and employment verification report ID",
            "example": "b19c454a98594b4084b71e3b62873d29"
          },
          "voa_report_id": {
            "type": "string",
            "description": "Verification of Assets report ID",
            "example": "b19c454a98594b4084b71e3b62873d29"
          },
          "aim_check_report_id": {
            "type": "string",
            "description": "AIM check report ID",
            "example": "FM-1234-39aa1486ccca4bc19cda071ffc1ba392"
          }
        }
      },
      "ApplicantRequestUpdate": {
        "type": "object",
        "properties": {
          "external_user_id": {
            "type": "string",
            "description": "External user id.",
            "example": "12345"
          },
          "email": {
            "type": "string",
            "description": "User's email.",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number.",
            "example": "+14155554193"
          }
        }
      },
      "AssetsRequest": {
        "type": "object",
        "properties": {
          "days_requested": {
            "maximum": 730,
            "minimum": 30,
            "type": "integer",
            "description": "The specific duration in days for which the report is requested to be generated."
          },
          "large_deposit_threshold": {
            "type": "object",
            "properties": {
              "fixed_amount": {
                "maximum": 100000,
                "minimum": 10,
                "type": "integer",
                "description": "Amount that must be met or exceeded for deposits to be marked as large, when OTHER loan type is specified."
              },
              "sales_price": {
                "maximum": 1000000,
                "minimum": 10,
                "type": "number",
                "description": "Amount that must be met or exceeded for deposits to be marked as large, when FHA loan type is specified."
              },
              "qualifying_monthly_income": {
                "maximum": 100000,
                "minimum": 10,
                "type": "number",
                "description": "Amount that must be met or exceeded for deposits to be marked as large, when CONVENTIONAL loan type is specified."
              },
              "loan_type": {
                "type": "string",
                "description": "Loan type.",
                "default": "OTHER",
                "enum": [
                  "FHA",
                  "CONVENTIONAL",
                  "OTHER"
                ]
              }
            }
          }
        }
      },
      "AssetsAccountBalances": {
        "type": "object",
        "properties": {
          "currency_code": {
            "maxLength": 3,
            "type": "string",
            "description": "The three-character ISO 4217 currency code.",
            "readOnly": true
          },
          "balance": {
            "type": "string",
            "description": "The current balance of the account.",
            "format": "decimal",
            "readOnly": true
          },
          "available_balance": {
            "type": "string",
            "description": "The balance that is available for use in asset accounts like checking and savings. PENDING transactions are typically taken into account with the available balance, but this may not always be the case.",
            "format": "decimal",
            "readOnly": true
          },
          "credit_limit": {
            "type": "string",
            "description": "The credit limit associated with the account.",
            "format": "decimal",
            "readOnly": true
          }
        }
      },
      "AssetsTransaction": {
        "required": [
          "categories",
          "external_id",
          "id",
          "status",
          "transacted_at",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the transaction.",
            "format": "uuid",
            "readOnly": true
          },
          "external_id": {
            "maxLength": 255,
            "type": "string",
            "description": "Identifier of the transaction in the external system.",
            "readOnly": true
          },
          "amount": {
            "type": "string",
            "description": "The monetary amount of the transaction.",
            "format": "decimal",
            "readOnly": true
          },
          "currency_code": {
            "maxLength": 3,
            "type": "string",
            "description": "The three-character ISO 4217 currency code.",
            "readOnly": true
          },
          "check_number": {
            "maxLength": 255,
            "type": "string",
            "description": "The check number for the transaction.",
            "readOnly": true
          },
          "categories": {
            "type": "array",
            "description": "List of categories assigned to this transaction.",
            "items": {
              "maxLength": 100,
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "A human-readable transaction description.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "The status of the transaction. This will be either POSTED or PENDING.",
            "readOnly": true,
            "enum": [
              "POSTED",
              "PENDING",
              "AUTHORIZATION",
              "MEMO"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of transaction. This will be either CREDIT or DEBIT.",
            "readOnly": true,
            "enum": [
              "DEBIT",
              "CREDIT"
            ]
          },
          "transacted_at": {
            "type": "string",
            "description": "Timestamp when the the transaction took place.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "merchant_category_code": {
            "type": "integer",
            "description": "The ISO 18245 category code for the transaction.",
            "format": "int32",
            "readOnly": true
          },
          "ending_daily_balance": {
            "type": "string",
            "description": "Ending daily balance.",
            "format": "decimal",
            "readOnly": true
          },
          "is_direct_deposit": {
            "type": "boolean",
            "description": "Indicates if the transaction represents a direct deposit.",
            "readOnly": true
          },
          "is_subscription": {
            "type": "boolean",
            "description": "Indicates if the transaction represents a payment for a subscription.",
            "readOnly": true
          }
        }
      },
      "AssetsOwner": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "type": "string",
            "description": "Unique identifier of the owner.",
            "format": "string",
            "readOnly": true,
            "example": "2b623fa2fa9e49cea17d9692caa884c5"
          },
          "full_name": {
            "maxLength": 255,
            "type": "string",
            "description": "The account owner’s name.",
            "readOnly": true,
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The account owner’s email address.",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "description": "The account owner’s phone number.",
            "example": "14155554193"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string",
                "description": "Street",
                "example": "1 Morgan Ave"
              },
              "city": {
                "type": "string",
                "description": "City",
                "example": "Los Angeles"
              },
              "state": {
                "type": "string",
                "description": "State",
                "example": "CA"
              },
              "zip": {
                "type": "string",
                "description": "Zip code",
                "example": "90210"
              },
              "country": {
                "type": "string",
                "description": "Country",
                "example": "US"
              }
            },
            "description": "The account owner’s address."
          },
          "relation_type": {
            "type": "string",
            "description": "The relationship this person has to the account.",
            "enum": [
              "AUTHORIZED_USER",
              "BUSINESS",
              "FOR_BENEFIT_OF",
              "FOR_BENEFIT_OF_PRIMARY",
              "FOR_BENEFIT_OF_PRIMARY_JOINT_RESTRICTED",
              "FOR_BENEFIT_OF_SECONDARY",
              "FOR_BENEFIT_OF_SECONDARY_JOINT_RESTRICTED",
              "FOR_BENEFIT_OF_SOLE_OWNER_RESTRICTED",
              "POWER_OF_ATTORNEY",
              "PRIMARY_JOINT_TENANTS",
              "PRIMARY",
              "PRIMARY_BORROWER",
              "PRIMARY_JOINT",
              "SECONDARY",
              "SECONDARY_JOINT_TENANTS",
              "SECONDARY_BORROWER",
              "SECONDARY_JOINT",
              "SOLE_OWNER",
              "TRUSTEE",
              "UNIFORM_TRANSFER_TO_MINOR"
            ]
          }
        }
      },
      "AssetsAccountSummary": {
        "required": [
          "avg_30",
          "avg_60",
          "avg_90",
          "balance",
          "currency_code"
        ],
        "type": "object",
        "properties": {
          "avg_30": {
            "type": "string",
            "description": "The average balance for 30 days.",
            "format": "decimal",
            "readOnly": true
          },
          "avg_60": {
            "type": "string",
            "description": "The average balance for 60 days.",
            "format": "decimal",
            "readOnly": true
          },
          "avg_90": {
            "type": "string",
            "description": "The average balance for 90 days.",
            "format": "decimal",
            "readOnly": true
          },
          "currency_code": {
            "maxLength": 3,
            "type": "string",
            "description": "The three-character ISO 4217 currency code.",
            "readOnly": true
          },
          "balance": {
            "type": "string",
            "description": "Total balance.",
            "format": "decimal",
            "readOnly": true
          }
        }
      },
      "AssetsAccount": {
        "required": [
          "balances",
          "created_at",
          "days_available",
          "id",
          "owners",
          "transactions",
          "updated_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the account.",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time at which the account was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time at which the account was most recently updated.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "The parent type of the account, e.g., CHECKING or SAVINGS.",
            "readOnly": true
          },
          "subtype": {
            "maxLength": 255,
            "type": "string",
            "description": "The account’s subtype, e.g., PLAN_401_K, MONEY_MARKET, or HOME_EQUITY.",
            "readOnly": true
          },
          "mask": {
            "maxLength": 64,
            "type": "string",
            "description": "The masked banking account number associated with a particular account.",
            "readOnly": true
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number",
            "example": "55999876"
          },
          "nickname": {
            "maxLength": 255,
            "type": "string",
            "description": "An alternate name for the account.",
            "readOnly": true
          },
          "days_available": {
            "type": "integer",
            "description": "Number of days for which transactions are available out of days_requested.",
            "readOnly": true
          },
          "balances": {
            "$ref": "#/components/schemas/AssetsAccountBalances"
          },
          "transactions": {
            "type": "array",
            "description": "List of transactions for account.",
            "items": {
              "$ref": "#/components/schemas/AssetsTransaction"
            }
          },
          "owners": {
            "type": "array",
            "description": "List of owners for account.",
            "items": {
              "$ref": "#/components/schemas/AssetsOwner"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/AssetsAccountSummary"
          },
          "same_owner_as_requested": {
            "type": "boolean",
            "description": "Primary owner is the borrower.",
            "readOnly": true
          },
          "direct_deposit_from_employer": {
            "type": "boolean",
            "description": "Account is used for direct deposits from employer.",
            "readOnly": true
          },
          "nsf": {
            "type": "integer",
            "description": "Insufficient funds occurrence count.",
            "readOnly": true
          }
        }
      },
      "LinkAssets": {
        "required": [
          "accounts",
          "link_id"
        ],
        "type": "object",
        "properties": {
          "link_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the link.",
            "format": "uuid",
            "readOnly": true
          },
          "tracking_info": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional optional identifier passed by user.",
            "readOnly": true
          },
          "provider": {
            "maxLength": 64,
            "type": "string",
            "description": "Data provider ID.",
            "readOnly": true
          },
          "provider_name": {
            "maxLength": 128,
            "type": "string",
            "description": "Data provider name.",
            "readOnly": true
          },
          "accounts": {
            "type": "array",
            "description": "List of assets accounts.",
            "items": {
              "$ref": "#/components/schemas/AssetsAccount"
            }
          }
        }
      },
      "VoaApplicantReport": {
        "required": [
          "borrower",
          "completed_at",
          "created_at",
          "days_requested",
          "links",
          "report_id",
          "summary"
        ],
        "type": "object",
        "properties": {
          "report_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the report.",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the report was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp when the report was completed.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "days_requested": {
            "type": "integer",
            "description": "Number of days for which transactions are requested.",
            "format": "int32",
            "readOnly": true,
            "example": 60
          },
          "borrower": {
            "$ref": "#/components/schemas/Applicant"
          },
          "links": {
            "type": "array",
            "description": "List of assets links",
            "items": {
              "$ref": "#/components/schemas/LinkAssets"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/AssetsAccountSummary"
          }
        }
      },
      "ProviderDDS": {
        "required": [
          "id",
          "name",
          "supported_bank_account_actions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "type": "string",
            "description": "Data provider ID.",
            "readOnly": true,
            "example": "adp"
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Data provider name.",
            "readOnly": true,
            "example": "ADP"
          },
          "logo_url": {
            "type": "string",
            "description": "Data provider logo image."
          },
          "supported_bank_account_actions": {
            "type": "array",
            "description": "List of supported bank account actions.",
            "items": {
              "type": "string",
              "enum": [
                "create",
                "delete",
                "update"
              ]
            }
          }
        }
      },
      "LinkDDS": {
        "required": [
          "deposit_details",
          "link_id"
        ],
        "type": "object",
        "properties": {
          "link_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the link.",
            "format": "uuid",
            "readOnly": true
          },
          "tracking_info": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional optional identifier passed by user.",
            "readOnly": true
          },
          "access_token": {
            "maxLength": 64,
            "type": "string",
            "description": "Access token of the existing link.",
            "format": "uuid",
            "readOnly": true
          },
          "provider": {
            "$ref": "#/components/schemas/ProviderDDS"
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          },
          "deposit_details": {
            "required": [
              "account_number",
              "account_type",
              "bank_name",
              "deposit_type",
              "routing_number"
            ],
            "type": "object",
            "properties": {
              "account_number": {
                "maxLength": 20,
                "minLength": 4,
                "type": "string",
                "description": "Account number",
                "example": "16002600"
              },
              "account_type": {
                "type": "string",
                "description": "\nAccount type:\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                "enum": [
                  "checking",
                  "savings"
                ]
              },
              "routing_number": {
                "maxLength": 12,
                "minLength": 8,
                "type": "string",
                "description": "Routing number",
                "example": "123456789"
              },
              "bank_name": {
                "type": "string",
                "description": "Bank name",
                "example": "TD Bank"
              },
              "deposit_type": {
                "type": "string",
                "description": "\nDeposit type:\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n\n",
                "enum": [
                  "entire",
                  "percent",
                  "amount"
                ]
              },
              "deposit_value": {
                "type": "string",
                "description": "Deposit value",
                "example": "50.00"
              }
            },
            "description": "Bank account info. Used for Direct deposit switching and Paycheck linked lending"
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when the link was first created, specified in ISO 8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time of the most recent update made to the link, in ISO 8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          }
        }
      },
      "DDSApplicantReport": {
        "required": [
          "completed_at",
          "links"
        ],
        "type": "object",
        "properties": {
          "completed_at": {
            "type": "string",
            "description": "Timestamp when the report was completed.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "links": {
            "type": "array",
            "description": "List of assets links",
            "items": {
              "$ref": "#/components/schemas/LinkDDS"
            }
          }
        }
      },
      "FinancialOwner": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the owner.",
            "format": "uuid",
            "readOnly": true
          },
          "full_name": {
            "maxLength": 255,
            "type": "string",
            "description": "The account owner’s name.",
            "readOnly": true
          },
          "relation_type": {
            "type": "string",
            "description": "The relationship this person has to the account.",
            "enum": [
              "AUTHORIZED_USER",
              "BUSINESS",
              "FOR_BENEFIT_OF",
              "FOR_BENEFIT_OF_PRIMARY",
              "FOR_BENEFIT_OF_PRIMARY_JOINT_RESTRICTED",
              "FOR_BENEFIT_OF_SECONDARY",
              "FOR_BENEFIT_OF_SECONDARY_JOINT_RESTRICTED",
              "FOR_BENEFIT_OF_SOLE_OWNER_RESTRICTED",
              "POWER_OF_ATTORNEY",
              "PRIMARY_JOINT_TENANTS",
              "PRIMARY",
              "PRIMARY_BORROWER",
              "PRIMARY_JOINT",
              "SECONDARY",
              "SECONDARY_JOINT_TENANTS",
              "SECONDARY_BORROWER",
              "SECONDARY_JOINT",
              "SOLE_OWNER",
              "TRUSTEE",
              "UNIFORM_TRANSFER_TO_MINOR"
            ]
          }
        }
      },
      "FinancialAccount": {
        "required": [
          "balances",
          "institution_name",
          "mask",
          "subtype",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID",
            "readOnly": true,
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when the account was first created in Truv, specified in ISO 8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time of the most recent update made to the account in Truv, in ISO 8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "institution_name": {
            "type": "string",
            "description": "The name of the financial institution associated with the account.",
            "readOnly": true,
            "example": "Truv Bank"
          },
          "type": {
            "type": "string",
            "description": "The type of the account.",
            "nullable": true,
            "readOnly": true,
            "example": "CHECKING",
            "enum": [
              "CHECKING",
              "SAVINGS",
              "LOAN",
              "CREDIT_CARD",
              "INVESTMENT",
              "LINE_OF_CREDIT",
              "MORTGAGE",
              "PROPERTY",
              "CASH",
              "INSURANCE",
              "PREPAID",
              "CHECKING_LINE_OF_CREDIT"
            ]
          },
          "subtype": {
            "type": "string",
            "description": "The subtype of the account.",
            "nullable": true,
            "readOnly": true,
            "example": "MONEY_MARKET",
            "enum": [
              "MONEY_MARKET",
              "CERTIFICATE_OF_DEPOSIT",
              "AUTO",
              "STUDENT",
              "SMALL_BUSINESS",
              "PERSONAL",
              "PERSONAL_WITH_COLLATERAL",
              "HOME_EQUITY",
              "BOAT",
              "POWERSPORTS",
              "RV",
              "HELOC",
              "PLAN_401_K",
              "PLAN_403_B",
              "PLAN_529",
              "IRA",
              "ROLLOVER_IRA",
              "ROTH_IRA",
              "TAXABLE",
              "NON_TAXABLE",
              "BROKERAGE",
              "TRUST",
              "UNIFORM_GIFTS_TO_MINORS_ACT",
              "PLAN_457",
              "PENSION",
              "EMPLOYEE_STOCK_OWNERSHIP_PLAN",
              "SIMPLIFIED_EMPLOYEE_PENSION",
              "SIMPLE_IRA",
              "PLAN_ROTH_401_K",
              "FIXED_ANNUITY",
              "VARIABLE_ANNUITY",
              "HSA",
              "TAX_FREE_SAVINGS_ACCOUNT",
              "INDIVIDUAL",
              "REGISTERED_RETIREMENT_INCOME_FUND",
              "CASH_MANAGEMENT_ACCOUNT",
              "EMPLOYEE_STOCK_PURCHASE_PLAN",
              "REGISTERED_EDUCATION_SAVINGS_PLAN",
              "PROFIT_SHARING_PLAN",
              "UNIFORM_TRANSFER_TO_MINORS_ACT",
              "PLAN_401_A",
              "SARSEP_IRA",
              "FIXED_ANNUITY_TRADITIONAL_IRA",
              "VARIABLE_ANNUITY_TRADITIONAL_IRA",
              "SEPP_IRA",
              "INHERITED_TRADITIONAL_IRA",
              "FIXED_ANNUITY_ROTH_IRA",
              "VARIABLE_ANNUITY_ROTH_IRA",
              "INHERITED_ROTH_IRA",
              "COVERDELL",
              "ADVISORY_ACCOUNT",
              "BROKERAGE_MARGIN",
              "CHARITABLE_GIFT_ACCOUNT",
              "CHURCH_ACCOUNT",
              "CONSERVATORSHIP",
              "CUSTODIAL",
              "DEFINED_BENEFIT_PLAN",
              "DEFINED_CONTRIBUTION_PLAN",
              "EDUCATIONAL",
              "ESTATE",
              "EXECUTOR",
              "GROUP_RETIREMENT_SAVINGS_PLAN",
              "GUARANTEED_INVESTMENT_CERTIFICATE",
              "HRA",
              "INDEXED_ANNUITY",
              "INVESTMENT_CLUB",
              "IRREVOCABLE_TRUST",
              "JOINT_TENANTS_BY_ENTIRITY",
              "JOINT_TENANTS_COMMUNITY_PROPERTY",
              "JOINT_TENANTS_IN_COMMON",
              "JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP",
              "KEOUGH_PLAN",
              "LIFE_INCOME_FUND",
              "LIVING_TRUST",
              "LOCKED_IN_RETIREMENT_ACCOUNT",
              "LOCKED_IN_RETIREMENT_INVESTMENT_FUND",
              "LOCKED_IN_RETIREMENT_SAVINGS_ACCOUNT",
              "MONEY_PURCHASE_PLAN",
              "PARTNERSHIP",
              "PLAN_409_A",
              "PLAN_ROTH_403_B",
              "REGISTERED_DISABILITY_SAVINGS_PLAN",
              "REGISTERED_LOCKED_IN_SAVINGS_PLAN",
              "REGISTERED_PENSION_PLAN",
              "REGISTERED_RETIREMENT_SAVINGS_PLAN",
              "REVOCABLE_TRUST",
              "ROTH_CONVERSION",
              "SOLE_PROPRIETORSHIP",
              "SPOUSAL_IRA",
              "SPOUSAL_ROTH_IRA",
              "TESTAMENTARY_TRUST",
              "THRIFT_SAVINGS_PLAN",
              "INHERITED_ANNUITY",
              "CORPORATE_ACCOUNT",
              "LIMITED_LIABILITY_ACCOUNT",
              "VEHICLE_INSURANCE",
              "DISABILITY",
              "HEALTH",
              "LONG_TERM_CARE",
              "PROPERTY_AND_CASUALTY",
              "UNIVERSAL_LIFE",
              "TERM_LIFE",
              "WHOLE_LIFE",
              "ACCIDENTAL_DEATH_AND_DISMEMBERMENT",
              "VARIABLE_UNIVERSAL_LIFE",
              "ROTH",
              "ROLLOVER",
              "OTHER"
            ]
          },
          "mask": {
            "type": "string",
            "description": "The last four digits of the account number.",
            "readOnly": true,
            "example": "6789"
          },
          "nickname": {
            "type": "string",
            "description": "A user-defined name or label for the account.",
            "nullable": true,
            "readOnly": true,
            "example": "My account"
          },
          "is_open": {
            "type": "boolean",
            "description": "Indicates whether the account is currently open.",
            "readOnly": true
          },
          "interest_rate": {
            "type": "string",
            "description": "The account's interest rate, if applicable.",
            "format": "decimal",
            "nullable": true,
            "readOnly": true,
            "example": "4.75"
          },
          "interest_rate_type": {
            "type": "string",
            "description": "Specifies the type of interest rate for the account.",
            "nullable": true,
            "readOnly": true,
            "enum": [
              "FIXED",
              "VARIABLE"
            ]
          },
          "maturity_date": {
            "type": "string",
            "description": "The date when the account reaches maturity.",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "loan_term": {
            "type": "integer",
            "description": "The duration of the loan associated with the account, in months.",
            "nullable": true,
            "readOnly": true
          },
          "apr": {
            "type": "string",
            "description": "The Annual Percentage Rate (APR) associated with the account.",
            "format": "decimal",
            "nullable": true,
            "readOnly": true
          },
          "balances": {
            "$ref": "#/components/schemas/AccountBalances"
          },
          "account_number": {
            "type": "string",
            "description": "Account number. A unique identifier assigned to a financial account for tracking and managing transactions, providing essential information for financial operations. Returned only when full_account_number parameter is set.",
            "example": "16002600"
          },
          "routing_number": {
            "type": "string",
            "description": "Routing number. A unique identifier for a financial institution. It is used to route and process transactions, ensuring accurate and secure transfers of funds. Returned only when full_account_number parameter is set.",
            "example": "123456789"
          },
          "owners": {
            "type": "array",
            "description": "List of owners for account. Returned only when full_account_number parameter is set.",
            "items": {
              "$ref": "#/components/schemas/FinancialOwner"
            }
          }
        }
      },
      "IncomeInsightsRequest": {
        "required": [
          "consumer_report_permissible_purpose"
        ],
        "type": "object",
        "properties": {
          "days_requested": {
            "maximum": 730,
            "minimum": 30,
            "type": "integer",
            "description": "The specific duration in days for which the report is requested to be generated."
          },
          "consumer_report_permissible_purpose": {
            "type": "string",
            "description": "Describes the reason you are generating an Income Insights Report for this user.",
            "enum": [
              "ACCOUNT_REVIEW_CREDIT",
              "ACCOUNT_REVIEW_NON_CREDIT",
              "EMPLOYMENT",
              "EXTENSION_OF_CREDIT",
              "LEGITIMATE_BUSINESS_NEED_TENANT_SCREENING",
              "LEGITIMATE_BUSINESS_NEED_OTHER",
              "WRITTEN_INSTRUCTION_PREQUALIFICATION",
              "WRITTEN_INSTRUCTION_OTHER"
            ]
          }
        }
      },
      "AccountIncomeInsights": {
        "required": [
          "id",
          "owners"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the account.",
            "format": "uuid",
            "readOnly": true
          },
          "mask": {
            "maxLength": 64,
            "type": "string",
            "description": "The masked banking account number associated with a particular account.",
            "readOnly": true,
            "example": "****1234"
          },
          "nickname": {
            "maxLength": 255,
            "type": "string",
            "description": "An alternate name for the account.",
            "readOnly": true,
            "example": "My account"
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "description": "The parent type of the account, e.g., CHECKING or SAVINGS.",
            "readOnly": true,
            "example": "CHECKING"
          },
          "subtype": {
            "maxLength": 255,
            "type": "string",
            "description": "The account’s subtype, e.g., PLAN_401_K, MONEY_MARKET, or HOME_EQUITY.",
            "readOnly": true,
            "example": "MONEY_MARKET"
          },
          "owners": {
            "type": "array",
            "description": "List of owners for account.",
            "items": {
              "$ref": "#/components/schemas/AssetsOwner"
            }
          }
        }
      },
      "BankIncomeInsightsSource": {
        "required": [
          "account_id",
          "end_date",
          "historical_summary",
          "income_category",
          "income_description",
          "iso_currency_code",
          "pay_frequency",
          "start_date",
          "total_amount",
          "transaction_count"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Minimum of all dates within the specific income sources in the user's bank account for days requested by the client.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Maximum of all dates within the specific income sources in the user’s bank account for days requested by the client.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          },
          "account_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the account.",
            "format": "uuid",
            "readOnly": true
          },
          "income_description": {
            "type": "string",
            "description": "Description for the underlying income transactions.",
            "readOnly": true,
            "example": "Paycheck"
          },
          "income_category": {
            "type": "string",
            "description": "The income category.",
            "readOnly": true,
            "example": "Income: Paycheck"
          },
          "pay_frequency": {
            "type": "string",
            "description": "\nPay frequency:\n\n* `M` - Monthly,\n* `SM` - Semi-Monthly,\n* `W` - Weekly,\n* `BW` - Bi-Weekly,\n* `A` - Annually,\n* `SA` - Semiannually,\n* `C` - Commission\n\n",
            "readOnly": true,
            "example": "SM",
            "enum": [
              "M",
              "SM",
              "W",
              "BW",
              "A",
              "SA",
              "C"
            ]
          },
          "total_amount": {
            "type": "string",
            "description": "Total amount of earnings for the income source of the user in the summary.",
            "format": "decimal",
            "readOnly": true,
            "example": "200.31"
          },
          "iso_currency_code": {
            "type": "string",
            "description": "The ISO 4217 currency code of the amount or balance.",
            "readOnly": true,
            "example": "USD"
          },
          "transaction_count": {
            "type": "integer",
            "description": "Number of income transactions per end user for this source.",
            "readOnly": true,
            "example": 1
          },
          "historical_summary": {
            "type": "array",
            "description": "List of bank statements for each period.",
            "items": {
              "type": "object",
              "properties": {
                "start_date": {
                  "type": "string",
                  "description": "The start date of the period covered in this monthly summary. This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month.",
                  "format": "date",
                  "readOnly": true,
                  "example": "2022-05-04T00:00:00.000Z"
                },
                "end_date": {
                  "type": "string",
                  "description": "The end date of the period included in this monthly summary. This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month.",
                  "format": "date",
                  "readOnly": true,
                  "example": "2022-05-04T00:00:00.000Z"
                },
                "total_amount": {
                  "type": "string",
                  "description": "Total amount of earnings for the income source of the user for the month in the summary.",
                  "format": "decimal",
                  "readOnly": true,
                  "example": "200.31"
                },
                "iso_currency_code": {
                  "type": "string",
                  "description": "The ISO 4217 currency code of the amount or balance.",
                  "readOnly": true,
                  "example": "USD"
                },
                "transactions": {
                  "type": "array",
                  "description": "List of transactions",
                  "items": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "type": "string",
                        "description": "The settled value of the transaction, denominated in the transactions's currency as stated in iso_currency_code. Negative values when money moves out of the account; positive othervise.",
                        "format": "decimal",
                        "readOnly": true,
                        "example": "200.31"
                      },
                      "iso_currency_code": {
                        "type": "string",
                        "description": "The ISO 4217 currency code of the amount or balance.",
                        "readOnly": true,
                        "example": "USD"
                      },
                      "date": {
                        "type": "string",
                        "description": "The date that the transaction occurred.",
                        "format": "date",
                        "readOnly": true,
                        "example": "2022-05-04T00:00:00.000Z"
                      },
                      "check_number": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The check number for the transaction.",
                        "readOnly": true
                      },
                      "description": {
                        "type": "string",
                        "description": "A human-readable transaction description.",
                        "readOnly": true
                      },
                      "pending": {
                        "type": "boolean",
                        "description": "True if status of the transaction is PENDING or not set.",
                        "readOnly": true
                      },
                      "transaction_id": {
                        "maxLength": 32,
                        "type": "string",
                        "description": "Unique identifier of the transaction.",
                        "format": "uuid",
                        "readOnly": true
                      }
                    }
                  }
                }
              }
            }
          },
          "historical_average_monthly_income": {
            "type": "string",
            "description": "Historical average income deposited into the account, per calendar month, typically net of taxes and deductions.",
            "format": "decimal",
            "readOnly": true,
            "example": "10000.00"
          },
          "historical_average_monthly_gross_income": {
            "type": "string",
            "description": "Historical average gross payment amount, per calendar month, predicted based on the transaction data.",
            "format": "decimal",
            "readOnly": true,
            "example": "12000.00"
          },
          "forecasted_average_monthly_income": {
            "type": "string",
            "description": "Forecasted income deposited into the account, per calendar month.",
            "format": "decimal",
            "readOnly": true,
            "example": "10000.00"
          },
          "employer": {
            "$ref": "#/components/schemas/Employer"
          }
        }
      },
      "LinkIncomeInsights": {
        "required": [
          "accounts",
          "link_id"
        ],
        "type": "object",
        "properties": {
          "link_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the link.",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when the link was first created, specified in ISO 8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time of the most recent update made to the link, in ISO 8601 format.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "provider": {
            "maxLength": 64,
            "type": "string",
            "description": "Data provider ID.",
            "readOnly": true,
            "example": "chase"
          },
          "provider_name": {
            "maxLength": 128,
            "type": "string",
            "description": "Data provider name.",
            "readOnly": true,
            "example": "Chase Bank"
          },
          "tracking_info": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional optional identifier passed by user.",
            "readOnly": true
          },
          "accounts": {
            "type": "array",
            "description": "List of demand deposit accounts.",
            "items": {
              "$ref": "#/components/schemas/AccountIncomeInsights"
            }
          },
          "bank_income_sources": {
            "type": "array",
            "description": "List of bank income sources.",
            "items": {
              "$ref": "#/components/schemas/BankIncomeInsightsSource"
            }
          }
        }
      },
      "AmountISOCurrency": {
        "required": [
          "amount",
          "iso_currency_code"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of earnings.",
            "format": "decimal",
            "readOnly": true,
            "example": "200.31"
          },
          "iso_currency_code": {
            "type": "string",
            "description": "The ISO 4217 currency code of the amount or balance.",
            "readOnly": true,
            "example": "USD"
          }
        }
      },
      "BankIncomeInsightsSourcesSummary": {
        "required": [
          "end_date",
          "forecasted_annual_income",
          "forecasted_average_monthly_income",
          "historical_annual_gross_income",
          "historical_annual_income",
          "historical_average_monthly_gross_income",
          "historical_average_monthly_income",
          "income_categories_count",
          "income_sources_count",
          "income_transactions_count",
          "start_date",
          "total_amounts"
        ],
        "type": "object",
        "properties": {
          "start_date": {
            "type": "string",
            "description": "Minimum of all transaction dates among all income sources in the user's bank accounts for days requested by the client.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Maximum of all transaction dates among all income sources in the user's bank accounts for days requested by the client.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          },
          "income_sources_count": {
            "type": "integer",
            "description": "Number of income sources per end user.",
            "readOnly": true,
            "example": 1
          },
          "income_categories_count": {
            "type": "integer",
            "description": "Number of income categories per end user.",
            "readOnly": true,
            "example": 1
          },
          "income_transactions_count": {
            "type": "integer",
            "description": "Number of income transactions per end user.",
            "readOnly": true,
            "example": 1
          },
          "total_amounts": {
            "type": "array",
            "description": "Total amount of income earned, over all sources. One per currency.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AmountISOCurrency"
            }
          },
          "historical_average_monthly_gross_income": {
            "type": "array",
            "description": "Total monthly average gross income earned historically, over all sources. One per currency. Gross amounts are estimated from transactions.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AmountISOCurrency"
            }
          },
          "historical_average_monthly_income": {
            "type": "array",
            "description": "Total monthly average income earned historically, over all sources. One per currency.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AmountISOCurrency"
            }
          },
          "forecasted_average_monthly_income": {
            "type": "array",
            "description": "Total forecasted monthly average income, over all sources. One per currency.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AmountISOCurrency"
            }
          },
          "historical_annual_gross_income": {
            "type": "array",
            "description": "Annualized gross income earned historically, over all sources. One per currency.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AmountISOCurrency"
            }
          },
          "historical_annual_income": {
            "type": "array",
            "description": "Annualized income earned historically, over all sources. One per currency.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AmountISOCurrency"
            }
          },
          "forecasted_annual_income": {
            "type": "array",
            "description": "Annualized forecasted income, over all sources. One per currency.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AmountISOCurrency"
            }
          }
        }
      },
      "IncomeInsightsApplicantReport": {
        "required": [
          "bank_income_summary",
          "completed_at",
          "created_at",
          "days_requested",
          "links",
          "report_id"
        ],
        "type": "object",
        "properties": {
          "report_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the report.",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the report was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp when the report was completed.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "days_requested": {
            "type": "integer",
            "description": "Number of days for which transactions are requested.",
            "format": "int32",
            "readOnly": true,
            "example": 60
          },
          "links": {
            "type": "array",
            "description": "List of assets links",
            "items": {
              "$ref": "#/components/schemas/LinkIncomeInsights"
            }
          },
          "bank_income_summary": {
            "$ref": "#/components/schemas/BankIncomeInsightsSourcesSummary"
          }
        }
      },
      "LenderEmployment": {
        "title": "LenderEmploymentSerializer",
        "required": [
          "company",
          "id",
          "profile"
        ],
        "type": "object",
        "properties": {
          "income": {
            "type": "string",
            "description": "Income amount not including commission or bonuses (only for income product, null for employment product)",
            "format": "decimal",
            "example": "70000.00"
          },
          "income_unit": {
            "type": "string",
            "description": "\nThe pay interval the income field refers to:\n\n* `YEARLY` - Annual income,\n* `MONTHLY` - Monthly income,\n* `WEEKLY` - Weekly income,\n* `DAILY` - Daily income,\n* `HOURLY` - Hourly income\n\n (only for income product, null for employment product)",
            "enum": [
              "YEARLY",
              "MONTHLY",
              "WEEKLY",
              "DAILY",
              "HOURLY"
            ]
          },
          "pay_rate": {
            "type": "string",
            "description": "Payment rate per pay cycle (only for income product, null for employment product)",
            "format": "decimal",
            "example": "6500.00"
          },
          "pay_frequency": {
            "type": "string",
            "description": "\nPay frequency:\n\n* `M` - Monthly,\n* `SM` - Semi-Monthly,\n* `W` - Weekly,\n* `BW` - Bi-Weekly,\n* `A` - Annually,\n* `SA` - Semiannually,\n* `C` - Commission\n\n (only for income product, null for employment product)",
            "enum": [
              "M",
              "SM",
              "W",
              "BW",
              "A",
              "SA",
              "C"
            ]
          },
          "statements": {
            "type": "array",
            "description": "List of paystubs received from a payroll provider (only for income product, null for employment product)",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Statement"
            }
          },
          "annual_income_summary": {
            "type": "array",
            "description": "Annual income summary by years (only for income product, null for employment product)",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AnnualIncomeSummary"
            }
          },
          "bank_accounts": {
            "type": "array",
            "description": "List of bank accounts linked to the employment (only for income product, null for employment product)",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/BankAccount"
            }
          },
          "w2s": {
            "type": "array",
            "description": "List of W-2 forms linked to the employment (only for income product, null for employment product)",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/TaxDocumentW2"
            }
          },
          "id": {
            "type": "string",
            "description": "Unique ID",
            "example": "24d7e80942ce4ad58a93f70ce4115f5c"
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates whether the employment is still active",
            "example": false
          },
          "job_title": {
            "type": "string",
            "description": "Employee's job title",
            "example": "PR associate"
          },
          "job_type": {
            "type": "string",
            "description": "\nEmployee's job type:\n\n* `F` - Full Time,\n* `P` - Part Time,\n* `S` - Seasonal,\n* `D` - Daily (per diem),\n* `C` - Contract\n\n",
            "enum": [
              "F",
              "P",
              "S",
              "D",
              "C"
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Employee's hire date",
            "format": "date",
            "example": "2018-01-01T00:00:00.000Z"
          },
          "original_hire_date": {
            "type": "string",
            "description": "Original hire date",
            "format": "date",
            "example": "2017-06-21T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Employee's end date",
            "format": "date"
          },
          "external_last_updated": {
            "type": "string",
            "description": "Indicates the date when employment data was last updated on the Payroll Provider side",
            "format": "date"
          },
          "derived_fields": {
            "type": "array",
            "description": "Array of derived fields",
            "example": [
              "is_active"
            ],
            "items": {
              "type": "string"
            }
          },
          "missing_data_fields": {
            "type": "array",
            "description": "List of the data fields which are missing in the payroll API response",
            "example": [
              "w2s"
            ],
            "items": {
              "type": "string"
            }
          },
          "manager_name": {
            "type": "string",
            "description": "Supervisor's name",
            "example": "Jenny McDouglas"
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "gse_accepted": {
            "type": "boolean",
            "description": "Indicates whether the provider is considered eligible by Fannie Mae Desktop Underwriter",
            "readOnly": true
          },
          "last_period_end": {
            "type": "string",
            "description": "Period end date of the latest paystub.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          },
          "last_pay_date": {
            "type": "string",
            "description": "Pay date of the latest paystub.",
            "format": "date",
            "readOnly": true,
            "example": "2022-05-04T00:00:00.000Z"
          }
        },
        "description": "Employment data"
      },
      "LinkEmployments": {
        "required": [
          "data_source",
          "id",
          "link_id",
          "provider",
          "tracking_info"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the most recent data pull.",
            "format": "uuid",
            "readOnly": true
          },
          "link_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the link.",
            "format": "uuid",
            "readOnly": true
          },
          "tracking_info": {
            "maxLength": 255,
            "type": "string",
            "description": "Additional optional identifier passed by user.",
            "readOnly": true
          },
          "data_source": {
            "type": "string",
            "description": "Source of data: payroll - payroll provider parsing, docs - user uploaded documents.",
            "example": "payroll",
            "enum": [
              "payroll",
              "docs"
            ]
          },
          "provider": {
            "maxLength": 64,
            "type": "string",
            "description": "Data provider ID.",
            "readOnly": true
          },
          "provider_name": {
            "maxLength": 128,
            "type": "string",
            "description": "Data provider name.",
            "readOnly": true
          },
          "employments": {
            "type": "array",
            "description": "List of employee data.",
            "items": {
              "$ref": "#/components/schemas/LenderEmployment"
            }
          }
        }
      },
      "LenderApplicantReport": {
        "required": [
          "completed_at",
          "created_at",
          "last_task_at",
          "links",
          "report_id"
        ],
        "type": "object",
        "properties": {
          "report_id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the report.",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the report was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "completed_at": {
            "type": "string",
            "description": "Timestamp when the report was completed.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "last_task_at": {
            "type": "string",
            "description": "Created timestamp of the latest task.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          },
          "links": {
            "type": "array",
            "description": "List of employment links",
            "items": {
              "$ref": "#/components/schemas/LinkEmployments"
            }
          }
        }
      },
      "ApplicantBridgeTokenCreate": {
        "required": [
          "product_type"
        ],
        "type": "object",
        "properties": {
          "tracking_info": {
            "type": "string",
            "description": "Any information to associate with current user.",
            "example": "any data for tracking current user"
          },
          "product_type": {
            "type": "string",
            "description": "\nIndicates the type of product to use:\n\n* `employment` - Employment verification,\n* `income` - Income and Employment verification,\n* `deposit_switch` - Direct deposit switch,\n* `pll` - Paycheck linked lending,\n* `insurance` - Insurance verification,\n* `transactions` - Financial account aggregation,\n* `assets` - Assets verification,\n\n",
            "enum": [
              "income",
              "employment",
              "deposit_switch",
              "pll",
              "insurance",
              "transactions",
              "assets"
            ]
          },
          "allowed_products": {
            "type": "array",
            "description": "List of all allowed products for this payroll connection. If not passed, only type from the product_type field will be allowed.",
            "items": {
              "type": "string",
              "enum": [
                "income",
                "employment",
                "deposit_switch",
                "pll",
                "insurance",
                "transactions",
                "assets"
              ]
            }
          },
          "company_mapping_id": {
            "type": "string",
            "description": "A mapping ID from a company to payroll provider.",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "provider_id": {
            "type": "string",
            "description": "An ID of a data provider for direct login.",
            "example": "adp"
          },
          "access_token": {
            "type": "string",
            "description": "Access token of the existing link (used for the data refresh).",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "account": {
            "required": [
              "account_number",
              "bank_name",
              "routing_number"
            ],
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "description": "\nAction to be performed on the account.\n\n`update` and `delete` actions are only available for the accounts that were previously created.\n",
                "enum": [
                  "create",
                  "update",
                  "delete"
                ]
              },
              "account_number": {
                "maxLength": 20,
                "minLength": 4,
                "type": "string",
                "description": "Account number. Only digits are allowed, leading zeros will be preserved.",
                "example": "16002600"
              },
              "routing_number": {
                "maxLength": 12,
                "minLength": 8,
                "type": "string",
                "description": "Routing number. Only digits are allowed, leading zeros will be preserved.",
                "example": "123456789"
              },
              "account_type": {
                "type": "string",
                "description": "\nAccount type. Required for the `create` action.\n\n* `checking` - Checking account,\n* `savings` - Savings account\n\n",
                "enum": [
                  "checking",
                  "savings"
                ]
              },
              "bank_name": {
                "maxLength": 128,
                "minLength": 1,
                "type": "string",
                "description": "Bank name. Required for the `create` action.",
                "example": "TD Bank"
              },
              "bank_address": {
                "maxLength": 1024,
                "minLength": 1,
                "type": "string",
                "description": "Bank address.",
                "example": "123 Main St, New York, NY 10001"
              },
              "deposit_type": {
                "type": "string",
                "description": "\nDeposit type.\nFor `pll` product type is required and must be set to `amount`.\nFor `deposit_switch` product type is optional and can be set to any supported value.\n\n* `entire` - Entire paycheck,\n* `percent` - Percentage of the paycheck,\n* `amount` - Fixed amount from the paycheck\n",
                "enum": [
                  "entire",
                  "percent",
                  "amount"
                ]
              },
              "deposit_value": {
                "type": "string",
                "description": "\nDeposit value.\n\nPossible values for this field depend on the `deposit_type` field:\n`percent` - this field must be set to a whole number between 0 and 100.\n`amount` - this field must be set to a number between 0 and 9999.99.\n`entire` - this field must be set to `null` or be not provided.\n",
                "example": "50.00"
              }
            },
            "description": "Bank account info. Used for Direct deposit switching and Paycheck linked lending"
          },
          "template_id": {
            "type": "string",
            "description": "An ID of a customization template.",
            "example": "99dd17074ac94aa9ace2621d657c7610"
          },
          "use_case": {
            "type": "string",
            "description": "Use case for the connection.",
            "example": "mortgage_lending",
            "default": "",
            "enum": [
              "",
              "background_screening",
              "mortgage_lending",
              "home_equity_lending",
              "consumer_lending",
              "auto_lending",
              "tenant_screening",
              "banking",
              "government"
            ]
          },
          "request_extended_history": {
            "type": "boolean",
            "description": "A boolean parameter to enable extended transaction/statement history.",
            "example": true,
            "default": false
          },
          "locale": {
            "type": "string",
            "description": "Locale parameter for regional customization of the Bridge.",
            "example": "es",
            "enum": [
              "en",
              "es"
            ]
          },
          "data_sources": {
            "type": "array",
            "description": "List of data sources for the provided product_type. Leave blank to apply default values.",
            "items": {
              "type": "string",
              "enum": [
                "payroll",
                "docs",
                "insurance",
                "financial_accounts",
                "tax"
              ]
            }
          }
        }
      },
      "Webhook": {
        "required": [
          "created_at",
          "env_type",
          "events",
          "id",
          "name",
          "updated_at",
          "webhook_url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 32,
            "type": "string",
            "description": "Unique identifier of the webhook.",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Public name for this webhook config."
          },
          "webhook_url": {
            "maxLength": 2048,
            "type": "string",
            "description": "Webhook URL where event data will be sent.",
            "format": "uri",
            "example": "http://example.com/"
          },
          "events": {
            "type": "array",
            "description": "List of events sent to this webhook URL.",
            "example": [
              "task-status-updated",
              "order-status-updated"
            ],
            "items": {
              "type": "string",
              "enum": [
                "task-status-updated",
                "order-status-updated",
                "link-connected",
                "link-disconnected",
                "link-deleted",
                "employment-created",
                "employment-updated",
                "profile-created",
                "profile-updated",
                "statements-created",
                "statements-updated",
                "shifts-created",
                "shifts-updated",
                "bank-accounts-created",
                "bank-accounts-updated"
              ]
            }
          },
          "env_type": {
            "type": "string",
            "description": "Type of environment.",
            "example": "dev",
            "enum": [
              "sandbox",
              "dev",
              "prod"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp when the webhook was created.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T11:30:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp when the webhook was updated last time.",
            "format": "date-time",
            "readOnly": true,
            "example": "2022-05-04T12:00:00.000Z"
          }
        }
      },
      "WebhookRequestCreate": {
        "required": [
          "env_type",
          "name",
          "webhook_url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Public name for this webhook config."
          },
          "webhook_url": {
            "maxLength": 2048,
            "type": "string",
            "description": "Webhook URL where event data will be sent.",
            "format": "uri",
            "example": "http://example.com/"
          },
          "events": {
            "type": "array",
            "description": "List of events sent to this webhook URL.",
            "example": [
              "task-status-updated",
              "order-status-updated"
            ],
            "items": {
              "type": "string",
              "enum": [
                "task-status-updated",
                "order-status-updated",
                "link-connected",
                "link-disconnected",
                "link-deleted",
                "employment-created",
                "employment-updated",
                "profile-created",
                "profile-updated",
                "statements-created",
                "statements-updated",
                "shifts-created",
                "shifts-updated",
                "bank-accounts-created",
                "bank-accounts-updated"
              ]
            }
          },
          "env_type": {
            "type": "string",
            "description": "Type of environment.",
            "example": "dev",
            "enum": [
              "sandbox",
              "dev",
              "prod"
            ]
          }
        }
      },
      "WebhookRequestUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 128,
            "type": "string",
            "description": "Public name for this webhook config."
          },
          "webhook_url": {
            "maxLength": 2048,
            "type": "string",
            "description": "Webhook URL where event data will be sent.",
            "format": "uri",
            "example": "http://example.com/"
          },
          "events": {
            "type": "array",
            "description": "List of events sent to this webhook URL.",
            "example": [
              "task-status-updated",
              "order-status-updated"
            ],
            "items": {
              "type": "string",
              "enum": [
                "task-status-updated",
                "order-status-updated",
                "link-connected",
                "link-disconnected",
                "link-deleted",
                "employment-created",
                "employment-updated",
                "profile-created",
                "profile-updated",
                "statements-created",
                "statements-updated",
                "shifts-created",
                "shifts-updated",
                "bank-accounts-created",
                "bank-accounts-updated"
              ]
            }
          },
          "env_type": {
            "type": "string",
            "description": "Type of environment.",
            "example": "dev",
            "enum": [
              "sandbox",
              "dev",
              "prod"
            ]
          }
        }
      },
      "Error403": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "",
                "example": "not_authenticated"
              },
              "message": {
                "type": "string",
                "description": "",
                "example": "Authentication credentials were not provided."
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "Error401": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "",
                "example": "authentication_failed"
              },
              "message": {
                "type": "string",
                "description": "",
                "example": "No such token"
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "Error400": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "",
                "example": "incorrect_parameters"
              },
              "message": {
                "type": "string",
                "description": "",
                "example": "Incorrect request parameters"
              },
              "extra": {
                "type": "object",
                "properties": {
                  "invalid-params": {
                    "type": "array",
                    "description": "",
                    "example": [
                      {
                        "field": "access_token",
                        "message": "This field is required."
                      }
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "type": "string",
                          "description": "",
                          "example": "access_token"
                        },
                        "message": {
                          "type": "string",
                          "description": "",
                          "example": "This field is required."
                        }
                      },
                      "description": ""
                    }
                  }
                },
                "description": ""
              }
            },
            "description": ""
          }
        },
        "description": ""
      }
    },
    "securitySchemes": {
      "ClientID": {
        "type": "apiKey",
        "description": "Client ID",
        "name": "X-Access-Client-Id",
        "in": "header"
      },
      "AccessKey": {
        "type": "apiKey",
        "description": "Client Access Key",
        "name": "X-Access-Secret",
        "in": "header"
      }
    }
  },
  "x-original-swagger-version": "2.0"
}